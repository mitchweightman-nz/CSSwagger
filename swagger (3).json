{
  "openapi": "3.0.3",
  "info": {
    "title": "Content Server Rest API",
    "description": "Content Server Rest API (v1 and v2 calls).<p> Please click the implementation notes below for further clarification on topics such as categories, body JSON parameters, etc. </p> <details id=\"implementation-notes\"> <summary><b>[IMPLEMENTATION NOTES]</b></summary> <br>Inspect the available methods and learn how they work by trying them; not all methods may be allowed to execute on this server. <br> <br> <div> <h3>Unpublished Calls</h3> API calls not mentioned in this document (such as \"csui\" resources) are not officially supported and are subject to change. Use at your own risk. </div> <div> <h3>Authentication</h3> To use the REST API you will be required to be authenticated (except for the /v1/auth POST). You can do this by using the /v1/auth POST on this page. Then, copy the \"ticket\" value returned. Click the \"Authorize\" button and paste the value in the \"value\" textbox (then click \"Authorize\").</div> <div> <h3>Performance Tips</h3> <ul> <li>The more you ask for the slower the REST API will be.</li> <li>When using api/v1/nodes/id/nodes it is recommended to include the extra=false parameter. By default it will be included to maintain backwards compatibility. Getting this information is costly and should not be asked for. Use commands to get that same information in the REST API.</li> <li>When using the v2 api you should specify the fields you want and not get everything back. This has multiple benefits such as less bytes over the wire, less unnecessary expansion of data on the server and in some cases less database calls. Some data is not contained in a standard node and must be retrieved in further database calls.</li> <li>The more actions/commands you ask for the slower the response time the REST API will have. Only ask for the ones you need.</li> <li>See the Query Formatting below on how to specify only certain fields be returned.</li> <li>When using the v2 api, any expanded objects are returned in-line by default. To normalize the data, use the \"references\" parameter (references=expand) in conjunction with the \"expand\" parameter(s).</li> </ul> </div> <div> <h3>Query Formatting</h3> Specify the fields being returned <br> <ul> <li> <b>REST API V1:</b> v1/nodes/id/nodes?fields=data&fields=definitions </li> <li> <b>REST API v2:</b> v2/nodes/id/nodes?fields=properties&fields=columns </li> </ul> Specify specific items being returned in a field <br> <ul> <li> <b>REST API v2:</b> v2/nodes/id/nodes?fields=properties{id,name} </li> </ul> Query parameters with multiple values must be specified using multiple parameters (ex. &fields=properties&fields=versions) and not using a single parameter (&fields=properties,versions).</br> </div> <div> <h3>Body Parameter</h3> For some requests, instead of specifying parameters in the form, the parameters can be formatted into a json object and submitted in a single \"body\" parameter. <br> <h4>NOTE: The content-type of the request must be: <b>application/x-www-form-urlencoded</b></h4> <ul> <li><b>Ex. REST API v2 PUT</b> <br> v2/nodes/id <br> body={\"description\":\"best description\", \"name\":\"my new name\"} </div> </li> </ul> <div> <div class=\"category-title\"> <details> <summary>Javascript Example</summary> <code> // Include jQuery<br> &lt;script src=\"https:\\code.jquery.com/jquery-3.3.1.min.js\"&gt;&lt;/script&gt;<br><br>  // Get a OTCSTicket<br> function GetOTCSTicket(){<br> var formData = { username: \"Admin\", password:\"mypassword\"}<br> var url = 'http:\\mycontentsserver/alpha/cs.exe/api/v1/auth';<br> var jqxhr = $.ajax({<br> url: url,<br> type: \"POST\",<br> contentType: \"application/x-www-form-urlencoded\",<br> data: formData,<br> });<br>  return jqxhr;<br> } <br><br>  // Update the name and description for the node with data ID of 6966<br> function AjaxViaForm(ticket) {<br> var url = 'http:\\mycontentsserver/main/cs.exe/api/v2/nodes/6966';<br> var formData = {description: \"best description\", name: \"my new name\"};<br>  $.ajax({<br> url: url,<br> type: \"PUT\",<br> headers: { 'OTCSTicket': ticket},<br> contentType: \"application/x-www-form-urlencoded\",<br> data: formData,<br> }).done(function(data){<br> console.log(data);<br> })<br> .fail(function(data){<br> console.log(data.responseJSON.error);<br> });<br> }<br><br>  // Generic method to Get the ticket and update a node after the ticket is received.<br> function SubmitForm(){<br> GetOTCSTicket().done(function(data) {<br> console.log(data.ticket);<br> AjaxViaForm(data.ticket);<br> }) .fail(function(data) {<br> console.log(data.responseJSON.error);<br> }); } </code> </details> </div> <ul> <li>To update fields such as name_multilingual or description_multilingual, the body parameter must be used and the field name must be submitted along with the multilingual structure. </li> </ul> <ul> <li><b>Ex. REST API v2 PUT</b> <br> v2/nodes/id <br> body={\"description\":\"abc\", \"description_multilingual\":{\"en\":\"abc\", \"de_DE\":\"desc DE\"}} </div> </li> </ul> <div> <div class=\"category-title\"> <details> <summary>Javascript Example</summary> <code> // Include jQuery<br> &lt;script src=\"https:\\code.jquery.com/jquery-3.3.1.min.js\"&gt;&lt;/script&gt;<br><br>  // Get a OTCSTicket<br> function GetOTCSTicket(){<br> var formData = { username: \"Admin\", password:\"mypassword\"}<br> var url = 'http:\\mycontentsserver/alpha/cs.exe/api/v1/auth';<br> var jqxhr = $.ajax({<br> url: url,<br> type: \"POST\",<br> contentType: \"application/x-www-form-urlencoded\",<br> data: formData,<br> });<br>  return jqxhr;<br> }<br><br>    // Update the name and description for the node with data ID of 6966<br> function AjaxViaForm(ticket) {<br> var url = 'http:\\mycontentsserver/main/cs.exe/api/v2/nodes/6966';<br> var bodyData = {<br> \"description\":\"abc\",<br> \"description_multilingual\":{<br> \"en\":\"abc\",<br> \"de_DE\":\"desc DE\"<br> }<br> };<br> var formData = {\"body\": JSON.stringify(bodyData)};<br>  $.ajax({<br> url: url,<br> type: \"PUT\",<br> headers: { 'OTCSTicket': ticket},<br> contentType: \"application/x-www-form-urlencoded\",<br> data: formData,<br> }).done(function(data){<br> console.log(data);<br> })<br> .fail(function(data){<br> console.log(data.responseJSON.error);<br> });<br> }<br><br>  // Generic method to Get the ticket and update a node after the ticket is received.<br> function SubmitForm(){<br> GetOTCSTicket().done(function(data) {<br> console.log(data.ticket);<br> AjaxViaForm(data.ticket);<br> })<br> .fail(function(data) {<br> console.log(data.responseJSON.error);<br> });<br> }<br><br> </code> </div> <ul> <li>To submit parameters in the body that allow multiple values, wrap the values with a JSON array. </li> </ul> <ul> <li><b>Ex. REST API v2 POST</b> <br> v2/nodes/actions <br> body={\"ids\":[2000,4532,6425], \"actions\":[\"open\",\"download\",\"delete\"]} </div> </li> </ul> </div> <div> <h3>Determine if an action is allowed</h3> <ul> <li><b>REST API v1:</b> v1/nodes/id/nodes?commands=rename&commands=properties etc. </li> <br> <li><b>REST API v2:</b> v2/nodes/id/nodes?actions=rename&actions=open etc. </li> </ul> </div> <div> <h3>Using Categories</h3> The following major operations can be performed with respect to Content Server Categories: <ul> <li><b>Apply categories during node creation:</b>&emsp; (POST /nodes)</li> <li><b>Apply a category on a node:</b>&emsp; (POST /nodes/{id}/categories)</li> <li><b>List categories on a node:</b>&emsp; (GET /nodes/{id}/categories)</li> <li><b>Get category info on a node:</b>&emsp; (GET /nodes/{id}/categories/{category_id})</li> <li><b>Update a category on a node:</b>&emsp; (PUT /nodes/{id}/categories/{category_id})</li> <li><b>Remove a category on a node:</b>&emsp; (DELETE /nodes/{id}/categories/{category_id}</li> <li><b>Enable/Disable category inheritance:</b>&emsp; (POST/DELETE /nodes/{id}/categories/{category_id}/inheritance)</li> <li><b>Upgrade categories on a node:</b>&emsp; (PUT /nodes/{id}/categories/upgrade)</li> </ul> Where appropriate, the calls will use the body parameter, which contains a JSON strong. Examples will be provided in each of the URLs above that call for a body parameter. <br> <br> NOTE: The category attributes mentioned in the examples will often look like <code>9830_2</code> or <code>9830_3_2_4</code>.  Call 'GET /v2/nodes/{id}?fields=categories' to get the categories and their attributes in the above format, which will make it easier to create the body parameter. <br> <br> <details> <summary>Category with one Text Field Attribute</summary> <code> (Category ID: 15847)<br><br>  The specification for the Text Field attribute is as follows:<br><br>  {category_id}_{attribute_id}<br><br>  The category will look like this:<br><br>  Category: [15847_1]<br> text_field_1: [15847_2]<br><br>  The attribute ID starts at 2, this is because 1 is reserved for the Category itself. From the example above, the specification for the Text Field attribute would be:<br><br>  15847_2<br><br>  V1 example to create a node with this category<br> Syntax<br> - POST api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]\":{\"[category_id]_[attribute_id]\":\"Value goes here\"}}}}<br><br>  Example:<br> - Post api/vi/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15384\":{\"15384_2\":\"test\"}}}}<br><br>  V2 example to create a node with this category<br> Syntax<br> - POST api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]_[attribute_id]\":\"Value goes here\"}}}<br><br>  Example:<br> - POST api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15384_2\":\"Value goes here\"}}}<br><br>  V1 example to update a node that has this category already applied<br> Syntax<br> - PUT api/v1/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[attribute_id]\":\"Value goes here\"}<br><br>  Example:<br> - PUT api/v1/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_2\":\"Value goes here\"}<br><br>  V2 example to update a node that has this category already applied<br> Syntax<br> - PUT api/v2/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[attribute_id]\":\"Value goes here\"}<br><br>  Example:<br> - PUT api/v2/nodes/{id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_2\":\"Value goes here\"}<br><br> </code> </details> <details> <summary>Category with a Multi-Row Text Field Attribute</summary> <code> (Category ID 15847)<br><br>  The specification for the Text Field attribute is as follows:<br><br>  {category_id}_{attribute_id}<br><br>  This Category has one normal text field and a multi-row text field. It will appear as follows:<br><br>  Category: [15847_1]<br> text_field_1: [15847_2]<br> text_field_multi(3 rows): [15847_3]<br><br> Even though it is a multi-row text field, its specification is the same as a single row attribute:<br><br> 15847_3<br>  To assign values to multi-row fields, the values for each row needs to be inside a list which is enclosed by square brackets:<br><br>  [\"value 1\", \"value 2\", \"value 3\",....]<br><br>  V1 example to create a node with this category<br> Syntax<br> - POST api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]\":{\"[category_id]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}}<br><br>  Example:<br> - Post api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15847\":{\"15847_3\":[\"test1\",\"test2\",\"test3\"]}}}}<br><br>  V2 example to create a node with this category<br> Syntax<br> - POST api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}<br><br>  Example:<br> - Post api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15847_5\":[\"test1\",\"test2\",\"test3\"]}}}<br><br>  V1 example to update a node that has this category already applied<br> Syntax<br> - PUT api/v1/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br>  Example:<br> - PUT api/v1/nodes/{id}/categories/{category_id}<br> - body = {\"category_id\":15847, \"15847_3\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br>  V2 example to update a node that has this category already applied<br> Syntax<br> - PUT api/v2/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br>  Example:<br> - PUT api/v2/nodes/{id}/categories/{category_id}<br> - body = {\"category_id\":15847, \"15847_3\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br>  To update or set multiple fields at once, use a comma to separate them in the body<br> - body = {...\"15847_2\":\"text field 1\", \"15847_3\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br> </code> </details> <details> <summary>Category with set that has one normal field</summary> <code> (Category ID 15847)<br><br>  The specification for an attribute inside of a Set is as follows:<br><br>  {category_id}_{set_id}_{set_row}_{attribute_id}<br><br>  This Category has a normal text field, a multi-row text field, and a Set with one text field.<br><br>  Category:[15847_1]<br> text_field_1:[15847_2]<br> text_field_multi(3 rows):[15847_3]<br> Set: [15847_4]<br> text_field_set: [15847_4_1_5]<br><br>  Set_id follows the same rules for attribute_id. Set_row is used to identify different rows if there is more than one row. Since there can be multiple attributes per row, attribute_id is used to  identify different attributes. However, the attribute_id here still follows the general rule for attributes which means they don't start from 1, rather they start from set_id plus 1. In this example, the attribute ID is 5 since set_id is 4. The specification for a Category with a set that has one row would be:<br><br>  15847_4_1_5<br><br>  V1 example to create a node with this category<br> Syntax<br> - POST api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]\":{\"[category_id]_[set_id]_[set_row]_[attribute_id]\":\"value goes here\"}}}}<br><br>  Example:<br> - Post api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15847\":{\"15847_4_1_5\":\"value goes here\"}}}}<br><br>  V2 example to create a node with this category<br> Syntax<br> - POST api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]_[set_id]_[set_row]_[attribute_id]\":\"value goes here\"}}}<br><br>  Example:<br> - Post api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15847_4_1_5\":\"value goes here\"}}}<br><br>  V1 example to update a node that has this category already applied<br> Syntax<br> - PUT api/v1/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[set_id]_[set_row]_[attribute_id]\":\"value goes here\"}<br><br>  Example:<br> - PUT api/v1/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_4_1_5\":\"Value goes here\"}<br><br>  V2 example to update a node that has this category already applied<br> Syntax<br> - PUT api/v2/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[set_id]_[set_row]_[attribute_id]\":\"value goes here\"}<br><br>  Example:<br> - PUT api/v2/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_4_1_5\":\"Value goes here\"}<br><br>  To update or set multiple fields at once, use a comma to separate them in the body<br> - body = {...\"15847_2\":\"text field 1\", \"15847_3\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br> </code> </details> <details> <summary>Category with a Set that contains a multi-row field</summary> <code> (Category ID 15847)<br><br>  The specification for attributes inside of a Set is as follows:<br><br>  {category_id}_{set_id}_{set_row}_{attribute_id}<br><br>  This Category has a normal text field, a multi-row text field, and a Set with one text field and one mutli-row field.<br><br>  Category: [15847_1]<br> text_field_1: [15847_2]<br> text_field_multi(3 rows): [15847_3]<br> Set: [15847_4]<br> text_field_set: [15847_4_1_5]<br> text_field_set_multi(3 rows): [15847_4_1_6]<br><br>  Set_id follows the same rules for attribute_id. Set_row is used to identify different rows if there is more than one row. Since there can be multiple attributes per row, attribute_id is used to identify different attributes. In this case it is 1. Attributes inside a Set follow the same rules and in this example, as it is the fifth attribute in this category, its id is 6. Therefore text_field_set_multi's specification is:<br><br> 15847_4_1_6<br><br>  V1 example to create a node with this category<br> Syntax<br> - POST api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]\":{\"[category_id]_[set_id]_[set_row]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}}<br><br>  Example:<br> - Post api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15847\":{\"15847_4_1_6\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}}<br><br>  V2 example to create a node with this category<br> Syntax<br> - POST api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]_[set_id]_[set_row]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}<br><br>  Example:<br> - Post api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15847_4_1_6\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}<br><br>  V1 example to update a node that has this category already applied<br> Syntax <br> - PUT api/v1/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[set_id]_[set_row]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br>  Example:<br> - PUT api/v1/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_4_1_6\":[\"value 1\", \"value 2\", \"value 3\", ....]} <br><br>  V2 example to update a node that has this category already applied<br> Syntax <br> - PUT api/v2/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br>  Example:<br> - PUT api/v2/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_4_1_6\":[\"value 1\", \"value 2\", \"value 3\", ....]} <br><br>  - This example can be used to add and remove rows from a category attribute that has multiple rows <br> - To set the value for the first row as \"value 1\" and remove other rows:<br> - PUT api/v2/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_4_1_6\":[\"value 1\"]}<br><br>  - To put \"value 1\" and \"value 2\" into the first and second row:<br> - PUT api/v2/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_4_1_6\":[\"value 1\", \"value 2\"]}<br><br>  - The following example will return an error if the max limit of rows is 2:<br> - PUT api/v2/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_4_1_6\":[\"value 1\", \"value 2\", \"value 3\"]}<br><br>  To update or set multiple fields at once, use a comma to separate them in the body<br> - body = {...\"15847_2\":\"text field 1\", \"15847_3\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br> </code> </details> <details> <summary>Category with a Set that has more than one row</summary> <code> (Category ID 15847)<br><br>  The specification for attributes inside of a Set is as follows:<br><br>  {category_id}_{set_id}_{set_row}_{attribute_id}<br><br>  This Category contains a normal text field, a multi-row text field, and a Set that contains two rows with one text field and one mutli-row field.<br><br>  Category: [15847_1]<br> text_field_1: [15847_2]<br> text_field_multi(3 rows): [15847_3]<br> Set: [15847_4]<br> - row 1<br> text_field_se: [15847_4_1_5]<br> text_field_set_multi: [15847_4_1_6]<br> - row 2<br> text_field_set: [15847_4_2_5]<br> text_field_set_multi: [15847_4_2_6]<br><br>  Set_id follows the same rules for attribute_id. Set_row is used to identify different rows if there is more than one row. Since there can be multiple attributes per row, attribute_id is used to  identify different attributes. In this example it needs to refer to row 2, so set_row is 2. Attributes inside a Set follow the same rules and in this example, as it is the fifth attribute in this category,  its id is 6. Therefore text_field_set_multi's specification is:<br><br> 15847_4_1_6<br><br>  V1 example to create a node with this category<br> Syntax<br> - POST api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]\":{\"[category_id]_[set_id]_[set_row]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}}<br><br>  Example:<br> - Post api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15847\":{\"15847_4_2_6\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}}<br><br>  V2 example to create a node with this category<br> Syntax<br> - POST api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]_[set_id]_[set_row]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}<br><br>  Example:<br> - Post api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15847_4_2_6\":[\"value 1\", \"value 2\", \"value 3\", ....]}}}<br><br>  V1 example to update a node that has this category already applied<br><br> Syntax <br> - PUT api/v1/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[set_id]_[set_row]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br>  Example:<br> - PUT api/v1/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_4_2_6\":[\"value 1\", \"value 2\", \"value 3\", ....]} <br><br>  V2 example to update a node that has this category already applied<br> Syntax <br> - PUT api/v2/nodes/{id}/categories/{category_id}/<br> - body = {\"category_id\":[category_id], \"[category_id]_[attribute_id]\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br>  Example:<br> - PUT api/v2/nodes/{node_id}/categories/{category_id}<br> - body = {\"category_id\":15384, \"15384_4_2_6\":[\"value 1\", \"value 2\", \"value 3\", ....]} <br><br>  To update or set multiple fields at once, use a comma to separate them in the body<br> - body = {...\"15847_4_2_5\":\"text field set in row 2\", \"15847_4_2_6\":[\"value 1\", \"value 2\", \"value 3\", ....]}<br><br> </code> </details> <details> <summary>Category with Disable Inheritance Attribute</summary> <code> (Category ID: 15847)<br><br>  The specification for the Disable Inheritance attribute is as follows:<br><br>  {category_id}_inheritance<br><br>  The category will look like this:<br><br>  Category: [15847_1]<br> text_field_1: [15847_2]<br> disable_inheritance: [15847_inheritance]<br><br>  {category_id}_inheritance is a boolean attribute and used to enable/disable the \"Disable Inheritance\" feature of a category. This attribute cannot be applied alone and requires at least one more category attribute to be specified with it. As shown in the example above a text attribute is also applied in addition to the disabled inheritance attribute. By default, {category_id}_inheritance attribute is disabled for a category applied to a node.<br><br> The specification for the Disable Inheritance attribute would be:<br><br>  15847_inheritance<br><br>  V1 example to create a node with this category<br><br> Syntax<br> - POST api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]\":{\"[category_id]_[attribute_id]\":\"Value goes here\", \"[category_id]_inheritance\": true/false}}}}<br><br>  Example:<br> - Post api/v1/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15384\":{\"15384_2\":\"test\", \"15384_inheritance\": false}}}}<br><br>  V2 example to create a node with this category<br> Syntax<br> - POST api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"[category_id]_[attribute_id]\":\"Value goes here\", \"[category_id]_inheritance\": true/false}}}<br><br>  Example:<br> - POST api/v2/nodes<br> - body = {\"name\":\"myName\",\"parent_id\":2000,\"type\":0,\"roles\":{\"categories\":{\"15384_2\":\"test\", \"15384_inheritance\": false}}}<br><br>  V1 example to copy a node that has this category applied<br> Syntax <br> - POST api/v1/nodes<br> - body = {\"original_id\":15847,\"parent_id\":2000,\"name\":\"myName\",\"roles\":{\"categories\":{\"[category_id]\":{\"[category_id]_[attribute_id]\":\"Value goes here\", \"[category_id]_inheritance\": true/false}}}}<br><br>  Example:<br> - POST api/v1/nodes<br> - body = {\"original_id\":15847,\"parent_id\":2000,\"name\":\"myName\",\"roles\":{\"categories\":{\"[category_id]\":{\"15384_2\":\"test\", \"15384_inheritance\": true}}}}<br><br>  V2 example to copy a node that has this category applied<br> Syntax <br> - PUT api/v2/nodes<br> - body = {\"original_id\":15847,\"parent_id\":2000,\"name\":\"myName\",\"roles\":{\"categories\":{\"[category_id]_[attribute_id]\":\"Value goes here\", \"[category_id]_inheritance\": true/false}}}<br><br>  Example:<br> - PUT api/v2/nodes<br> - body = {\"original_id\":15847,\"parent_id\":2000,\"name\":\"myName\",\"roles\":{\"categories\":{\"15384_2\":\"test\", \"15384_inheritance\": true}}}<br><br> </code> </details> </div> </details> <div id=\"swagger-ui-container\" class=\"swagger-ui-wrap\"> </div>",
    "version": "2.0.2"
  },
  "servers": [
    {
      "url": "/alpha/cs.exe/api"
    }
  ],
  "tags": [
    {
      "name": "apiinfo",
      "description": "API Information"
    },
    {
      "name": "auth",
      "description": "Authenticate user"
    },
    {
      "name": "bulkactions",
      "description": "Actions that can be performed on multiple nodes"
    },
    {
      "name": "categories",
      "description": "Categories and Attributes"
    },
    {
      "name": "csapplications",
      "description": "Content Server Applications"
    },
    {
      "name": "doctemplates",
      "description": "Document Templates"
    },
    {
      "name": "documentproperties",
      "description": "Document Properties Synchronization"
    },
    {
      "name": "draftprocesses",
      "description": "Manage draft processes"
    },
    {
      "name": "export",
      "description": "Export"
    },
    {
      "name": "facets",
      "description": "Get facets"
    },
    {
      "name": "forms",
      "description": "Use forms"
    },
    {
      "name": "intelligentfiling",
      "description": "Intelligent Filing"
    },
    {
      "name": "lladmin",
      "description": "Manage Admin Server related objects"
    },
    {
      "name": "members",
      "description": "Manage members"
    },
    {
      "name": "multipart",
      "description": "Manage Large File Uploads"
    },
    {
      "name": "nicknames",
      "description": "Manage nicknames"
    },
    {
      "name": "nodes",
      "description": "Manage nodes"
    },
    {
      "name": "notifications",
      "description": "Notifications"
    },
    {
      "name": "permissions",
      "description": "Permissions"
    },
    {
      "name": "perspectives",
      "description": "Perspectives"
    },
    {
      "name": "ping",
      "description": "Basic CS and REST API Information"
    },
    {
      "name": "processes",
      "description": "Manage processes / workflows"
    },
    {
      "name": "reservemanagement",
      "description": "Reserve Management"
    },
    {
      "name": "search",
      "description": "Search"
    },
    {
      "name": "server",
      "description": "Content Server details"
    },
    {
      "name": "serverinfo",
      "description": "Content Server information"
    },
    {
      "name": "tabs",
      "description": "Use tabs"
    },
    {
      "name": "tklattribute",
      "description": "TKL Attribute"
    },
    {
      "name": "validation",
      "description": "Validation"
    },
    {
      "name": "versions",
      "description": "Manage versions"
    },
    {
      "name": "volumes",
      "description": "Manage and query volumes"
    },
    {
      "name": "webreports",
      "description": "Manage WebReports"
    },
    {
      "name": "xmlimport",
      "description": "XML Import"
    },
    {
      "name": "resubmission",
      "description": "Related to followups and reminders"
    },
    {
      "name": "signaturerequests",
      "description": "Signature Requests"
    },
    {
      "name": "restructure",
      "description": "Restructures the list of nodes from source to destination"
    },
    {
      "name": "syndication",
      "description": "Syndication actions that can be performed on a given node"
    }
  ],
  "security": [
    {
      "OTCSTicket": []
    }
  ],
  "components": {
    "securitySchemes": {
      "OTCSTicket": {
        "type": "apiKey",
        "name": "OTCSTicket",
        "in": "header",
        "description": "Requests need to be authenticated. You can get an OTCS ticket by posting your credentials to /auth."
      }
    },
    "schemas": {
      "suppress_response_codes": {
        "type": "string",
        "description": "Forces the server to always return a HTTP Response of '200 OK'. The data returned from the call will have an additional integer feature named 'statusCode', which will contain the actual status code (the 'statusCode' feature will be added regardless of whether the REST API call was successful or not)."
      },
      "apiinfo": {
        "type": "object",
        "properties": {
          "DELETE": {
            "type": "string",
            "description": "If the DELETE method is available, information for this REST API call will be displayed.",
            "format": "string"
          },
          "GET": {
            "type": "string",
            "description": "If the GET method is available, information for this REST API call will be displayed.",
            "format": "string"
          },
          "POST": {
            "type": "string",
            "description": "If the POST method is available, information for this REST API call will be displayed.",
            "format": "string"
          },
          "PUT": {
            "type": "string",
            "description": "If the PUT method is available, information for this REST API call will be displayed.",
            "format": "string"
          }
        }
      },
      "auth_UserInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "User Data",
            "items": {
              "$ref": "#/components/schemas/auth_Data"
            }
          }
        }
      },
      "auth_Data": {
        "type": "object",
        "properties": {
          "birth_date": {
            "type": "string",
            "description": "The user's birthday"
          },
          "business_email": {
            "type": "string",
            "description": "The user's business e-mail address"
          },
          "business_fax": {
            "type": "string",
            "description": "The user's business fax number"
          },
          "business_phone": {
            "type": "string",
            "description": "The user's business phone number"
          },
          "cell_phone": {
            "type": "string",
            "description": "The user's personal cellphone number"
          },
          "deleted": {
            "type": "boolean",
            "description": "TRUE if the user has been deleted, FALSE otherwise"
          },
          "display_language": {
            "type": "string",
            "description": "The user's preferred language"
          },
          "display_name": {
            "type": "string",
            "description": "The user's displayed name"
          },
          "first_name": {
            "type": "string",
            "description": "The user's first name"
          },
          "gender": {
            "type": "integer",
            "description": "The user's gender. null = <gender not set>, 0 = male, 1 = female. Any integers greater than 1 refer to additional custom genders, which can be configured in Content Server under 'Configure Gender Settings'."
          },
          "group_id": {
            "type": "integer",
            "description": "The ID of the user's base group"
          },
          "home_address_1": {
            "type": "string",
            "description": "The user's first home address"
          },
          "home_address_2": {
            "type": "string",
            "description": "The user's second home address"
          },
          "home_fax": {
            "type": "string",
            "description": "The user's home fax number"
          },
          "home_phone": {
            "type": "string",
            "description": "The user's home phone number"
          },
          "id": {
            "type": "integer",
            "description": "A unique identifier for the user"
          },
          "initials": {
            "type": "string",
            "description": "The user's initials"
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name"
          },
          "middle_name": {
            "type": "string",
            "description": "The user's middle name"
          },
          "name": {
            "type": "string",
            "description": "The user's log-in name"
          },
          "office_location": {
            "type": "string",
            "description": "The full address of the user's office location"
          },
          "pager": {
            "type": "string",
            "description": "The user's pager number"
          },
          "personal_email": {
            "type": "string",
            "description": "The user's home email address"
          },
          "personal_interests": {
            "type": "string",
            "description": "The user's hobbies"
          },
          "personal_url_1": {
            "type": "string",
            "description": "The user's first favorite link"
          },
          "personal_url_2": {
            "type": "string",
            "description": "The user's second favorite link"
          },
          "personal_url_3": {
            "type": "string",
            "description": "The user's third favorite link"
          },
          "personal_website": {
            "type": "string",
            "description": "The user's homepage address"
          },
          "photo_id": {
            "type": "string",
            "description": "The user's photo ID"
          },
          "photo_url": {
            "type": "string",
            "description": "REST API URL to get the member's profile photo"
          },
          "privilege_content_manager": {
            "type": "boolean",
            "description": "TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_grant_discovery": {
            "type": "boolean",
            "description": "TRUE if the user has eDiscovery privileges, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_login": {
            "type": "boolean",
            "description": "TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_groups": {
            "type": "boolean",
            "description": "TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_users": {
            "type": "boolean",
            "description": "TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_public_access": {
            "type": "boolean",
            "description": "TRUE means the user can access to any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_system_admin_rights": {
            "type": "boolean",
            "description": "TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_user_admin_rights": {
            "type": "boolean",
            "description": "TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "time_zone": {
            "type": "integer",
            "description": "An offset of GMT"
          },
          "title": {
            "type": "string",
            "description": "The user's title"
          },
          "type": {
            "type": "integer",
            "description": "The type of user or user-related entity"
          },
          "type_name": {
            "type": "string",
            "description": "The type name of user or user-related entity"
          }
        }
      },
      "auth_AuthenticationInfo": {
        "type": "object",
        "properties": {
          "ticket": {
            "type": "string",
            "description": "The valid authentication ticket"
          }
        }
      },
      "auth_AuthenticationDelete": {
        "type": "object"
      },
      "bulkactions": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/bulkactions_ActionData"
          },
          "definitions": {
            "$ref": "#/components/schemas/bulkactions_Definitions"
          },
          "definitions_map": {
            "$ref": "#/components/schemas/bulkactions_DefinitionsMap"
          },
          "definitions_order": {
            "description": "The order in which actions should be displayed. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "bulkactions_ActionData": {
        "type": "object"
      },
      "bulkactions_Definitions": {
        "type": "object"
      },
      "bulkactions_DefinitionsMap": {
        "type": "object"
      },
      "categories_V2CategoriesResponseSingle": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataCategories"
            }
          }
        }
      },
      "categories_V2CategoriesResponse": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataCategories"
            }
          }
        }
      },
      "categories_V2CategoriesApplyResponse": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataCategoriesApplyResults"
            }
          }
        }
      },
      "categories_V2EmptyResponse": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2EmptyResults"
            }
          }
        }
      },
      "categories_V2DataCategories": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2Categories"
            }
          }
        }
      },
      "categories_V2Categories": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2EmptyResults"
            }
          }
        }
      },
      "categories_V2DataLinks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2Links"
            }
          }
        }
      },
      "categories_V2Links": {
        "type": "object",
        "properties": {
          "self": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2Link"
            }
          }
        }
      },
      "categories_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string"
          },
          "content_type": {
            "type": "string"
          },
          "href": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "categories_V2DataCategoriesApplyResults": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "processed": {
            "type": "integer"
          },
          "skipped": {
            "type": "integer"
          }
        }
      },
      "categories_V2EmptyResults": {
        "type": "object"
      },
      "categories_CategoriesInfo": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Category information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_CategoriesInfoData"
            }
          },
          "definitions": {
            "$ref": "#/components/schemas/categories_Definitions"
          },
          "definitions_order": {
            "description": "Default order of the fields defined in data",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "definitions_map": {
            "$ref": "#/components/schemas/categories_DefinitionsMap"
          }
        }
      },
      "categories_CategoriesInfoData": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Category ID",
            "type": "integer"
          },
          "name": {
            "description": "Display name",
            "type": "string"
          }
        }
      },
      "categories_CategoryInfo": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Category information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_CategoryInfoData"
            }
          },
          "definitions": {
            "$ref": "#/components/schemas/categories_Definitions"
          },
          "definitions_order": {
            "description": "Default order of the fields defined in data",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "definitions_map": {
            "$ref": "#/components/schemas/categories_DefinitionsMap"
          }
        }
      },
      "categories_CategoryInfoData": {
        "type": "object",
        "properties": {
          "{attribute_key}": {
            "description": "Attribute value",
            "type": "string"
          }
        }
      },
      "categories_ActionsCategoriesInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/categories_ActionData"
          },
          "definitions": {
            "$ref": "#/components/schemas/categories_Definitions"
          },
          "definitions_map": {
            "$ref": "#/components/schemas/categories_DefinitionsMap"
          },
          "definitions_order": {
            "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "categories_AddCategoryResponse": {
        "type": "object"
      },
      "categories_UpdateCategoryResponse": {
        "type": "object"
      },
      "categories_ActionData": {
        "type": "object"
      },
      "categories_Definitions": {
        "type": "object"
      },
      "categories_DefinitionsMap": {
        "type": "object"
      },
      "csapplications_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "csapplications_V2Results": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Content Server Applications Server Response"
          },
          "ok": {
            "type": "boolean",
            "description": "ok is true or false"
          }
        }
      },
      "csapplications_V2ResponseCSApplicationsPost": {
        "type": "object",
        "properties": {
          "links": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "self": {
                    "$ref": "#/components/schemas/csapplications_V2Link"
                  }
                }
              }
            }
          },
          "results": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "properties": {
                    "$ref": "#/components/schemas/csapplications_V2Results"
                  }
                }
              }
            }
          }
        }
      },
      "doctemplates_DocumentTemplateInstanceInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The valid document template InstanceID",
            "format": "integer"
          },
          "cacheId": {
            "type": "integer",
            "description": "The valid cacheID generated and used while instance creation",
            "format": "integer"
          }
        },
        "required": [
          "id",
          "cacheId"
        ]
      },
      "documentproperties_InsertablePropertiesRow": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The localized name of the insertable property.",
            "type": "string"
          },
          "property": {
            "description": "The name of the file property to write the value to.",
            "type": "string"
          },
          "value": {
            "description": "The value of the content server attribute the insertable property represents.",
            "type": "string"
          },
          "value_formatted": {
            "description": "The value with possible formatting or conversion applied.",
            "type": "string"
          }
        }
      },
      "draftprocesses_DraftProcess_V2EmptyResponse": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/draftprocesses_DraftProcess"
            }
          }
        }
      },
      "draftprocesses_DraftProcess_PutV2EmptyResponse": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/draftprocesses_DraftProcess_Put"
            }
          }
        }
      },
      "draftprocesses_DraftProcess": {
        "type": "object",
        "properties": {
          "draftprocess_id": {
            "type": "integer",
            "description": "The id of the created draft process"
          },
          "workflow_type": {
            "type": "string",
            "description": "String composition of  workData.type_workData.subtype , example  1_1"
          }
        },
        "required": [
          "draftprocess_id"
        ]
      },
      "draftprocesses_DraftProcess_Put": {
        "type": "object",
        "properties": {
          "custom_message": {
            "type": "string",
            "description": "custom_message,If exist"
          },
          "process_id": {
            "type": "integer",
            "description": "process_id"
          }
        },
        "required": [
          "custom_message",
          "process_id"
        ]
      },
      "draftprocesses_DraftProcess_Authentication": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Authentication Required"
          }
        },
        "required": [
          "error"
        ]
      },
      "draftprocesses_DraftProcess_NodeNotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "<ul><li>Could not Loadmap.</li><li>Workflow Map has no versions.</li><li>Error getting node from ID</li> <li>Could not retrieve specified version from map.</li></ul>"
          }
        },
        "required": [
          "error"
        ]
      },
      "export_Export": {
        "type": "object",
        "properties": {
          "includeDefaults": {
            "description": "Indicates report should include default values",
            "type": "boolean"
          },
          "fileFormat": {
            "description": "Extension of report format",
            "type": "string"
          }
        }
      },
      "facets_FacetResponse": {
        "type": "object",
        "properties": {
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/facets_DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/facets_Results"
            }
          }
        }
      },
      "facets_DataLinks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/facets_Links"
            }
          }
        }
      },
      "facets_Links": {
        "type": "object",
        "properties": {
          "self": {
            "type": "array",
            "description": "Self link",
            "items": {
              "$ref": "#/components/schemas/facets_Link"
            }
          }
        }
      },
      "facets_Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "facets_Results": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/facets_Data"
            }
          }
        }
      },
      "facets_Data": {
        "type": "object",
        "properties": {
          "facets": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/facets_Facet"
            }
          },
          "values": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/facets_Values"
            }
          }
        }
      },
      "facets_Values": {
        "type": "object",
        "properties": {
          "available": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/facets_Value"
            }
          },
          "selected": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/facets_Value"
            }
          }
        }
      },
      "facets_Facet": {
        "type": "object",
        "properties": {
          "display_count": {
            "type": "boolean",
            "description": "TRUE if count information is available and should be displayed; FALSE otherwise"
          },
          "id": {
            "type": "integer",
            "description": "The ID of the Facet"
          },
          "name": {
            "type": "string",
            "description": "The name of the Facet"
          },
          "total_displayable": {
            "type": "integer",
            "description": "The number of available options to display"
          }
        }
      },
      "facets_Value": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of matched objects for the given option"
          },
          "name": {
            "type": "string",
            "description": "The name of the option"
          },
          "percentage": {
            "type": "integer",
            "description": "The percentage of objects which contain this option"
          },
          "value": {
            "type": "string",
            "description": "The internal value of this option"
          }
        }
      },
      "forms_CategoriesCreateFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_CategoriesData"
          },
          "options": {
            "$ref": "#/components/schemas/forms_CategoriesCreateOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_CategoriesCreateSchema"
          }
        }
      },
      "forms_CategoriesUpdateFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Category attributes and their values for the category applied to the node"
          },
          "options": {
            "$ref": "#/components/schemas/forms_CategoriesUpdateOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_CategoriesUpdateSchema"
          }
        }
      },
      "forms_CopyFormInfo": {
        "type": "object",
        "properties": {
          "form": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_CopyInfo"
            },
            "description": "The array containing the information on the object being copied. The first element contains node data, the elements following contain optional data"
          }
        }
      },
      "forms_CreateFormInfo": {
        "type": "object",
        "properties": {
          "form": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_CreateInfo"
            },
            "description": "The array containing the information on the object being created. The first element contains node data, the elements following contain optional data"
          }
        }
      },
      "forms_GetFormFileNodeInfo": {
        "type": "object",
        "properties": {
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_FileNodeInfo"
            },
            "description": "The array containing the information on the object being filed. The first element contains node data, the elements following contain optional data"
          }
        }
      },
      "forms_RunPropertiesFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_RunPropertiesFormData"
          },
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_RunFormInfo"
            },
            "description": "The array containing the information on WebReport parameters to be displayed. The forms are displayed when a WebReport is run."
          }
        }
      },
      "forms_RunPropertiesFormData": {
        "type": "object",
        "properties": {
          "destination_data": {
            "description": "Destination data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_DestinationData"
            }
          },
          "parameters_data": {
            "description": "Parameters data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_ParametersData"
            }
          }
        }
      },
      "forms_UpdateFormInfo": {
        "type": "object",
        "properties": {
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_UpdateInfo"
            },
            "description": "The array containing the forms for updating the node. The first element contains node data, the elements following contain additional data"
          }
        }
      },
      "forms_DestinationData": {
        "type": "object",
        "properties": {
          "destination_specific": {
            "description": "Destination-specific data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_DestinationSpecific"
            }
          },
          "export_if_no_data": {
            "description": "Whether the WebReport is set to export if there is no data",
            "type": "boolean"
          },
          "export_mime_type": {
            "description": "The MIMEType that the WebReport output is written in",
            "type": "string"
          },
          "http_method": {
            "description": "The http method that should be used to run the WebReport based on the destination type",
            "type": "string"
          },
          "output_destination": {
            "description": "The WebReport destination type",
            "type": "string"
          },
          "run_in_background": {
            "description": "Whether the WebReport is set to run in the background",
            "type": "boolean"
          },
          "schedule_data": {
            "description": "Schedule data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_ScheduleData"
            }
          },
          "show_status_screen": {
            "description": "Whether the WebReport is set to display a status page after it is run",
            "type": "boolean"
          },
          "use_conversion_engine": {
            "description": "Whether the conversion engine is set to be used",
            "type": "boolean"
          },
          "xml_job_ticket_id": {
            "description": "ID of the XML job ticket",
            "type": "string"
          }
        }
      },
      "forms_DestinationSpecific": {
        "type": "object",
        "properties": {
          "category_names": {
            "description": "(Content Server Node destination only): The names of the categories that will be applied to the output node",
            "type": "string"
          },
          "create_in_id (*)": {
            "description": "(Content Server Node destination only): The node ID of the container that the WebReport output will be created in",
            "type": "string"
          },
          "duplicate_name_action": {
            "description": "(Content Server Node destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found in the destination container",
            "type": "string"
          },
          "export_type": {
            "description": "(Content Server Node destination only): Whether the WebReport is set to output to a new node or add a version to an existing node",
            "type": "string"
          },
          "node_description (*)": {
            "description": "(Content Server Node destination only): The description of the output node",
            "type": "string"
          },
          "node_name (*)": {
            "description": "(Content Server Node destination only): The name of the output node",
            "type": "string"
          },
          "node_type": {
            "description": "(Content Server Node destination only): Whether the node type of the output is set to Document or Custom View",
            "type": "string"
          },
          "add_version_to_id": {
            "description": "(Content Server Version destination only): The node to add a version to",
            "type": "string"
          },
          "append_data": {
            "description": "(Content Server Version destination only): Setting used to determine whether the WebReport output should be appended into the text of an existing document",
            "type": "string"
          },
          "end_tag": {
            "description": "(Content Server Version destination only): The end tag if the WebReport output is set to be appended into the text of an existing document between tags",
            "type": "string"
          },
          "overwrite_tags": {
            "description": "(Content Server Version destination only): Whether the output should overwrite tags in the destination text if the WebReport output is set to be appended into the text of an existing document between tags",
            "type": "string"
          },
          "start_tag": {
            "description": "(Content Server Version destination only): The start tag if the WebReport output is set to be appended into the text of an existing document between tags",
            "type": "string"
          },
          "version_description (*)": {
            "description": "(Content Server Version destination only): The description of the output version",
            "type": "string"
          },
          "version_handling": {
            "description": "(Content Server Version destination only): Whether the output should be added as a major or minor version",
            "type": "string"
          },
          "version_name (*)": {
            "description": "(Content Server Version destination only): The name of the output version",
            "type": "string"
          },
          "download_file_name (*)": {
            "description": "(Desktop destination only): The name of the file that the WebReport output is written to",
            "type": "string"
          },
          "attachment_name (*)": {
            "description": "(E-mail destination only): The name of the file attached to the e-mail",
            "type": "string"
          },
          "attach_results_to_email": {
            "description": "(E-mail destination only): Whether the WebReport output should be attached to the e-mail",
            "type": "boolean"
          },
          "email_address (*)": {
            "description": "(E-mail destination only): The e-mail address that the e-mail is being sent to",
            "type": "string"
          },
          "email_address_user_id (*)": {
            "description": "(E-mail destination only): The User ID of the Content Server user that the e-mail is being sent to",
            "type": "string"
          },
          "email_body_text (*)": {
            "description": "(E-mail destination only): The body text of the e-mail",
            "type": "string"
          },
          "email_mailing_list (*)": {
            "description": "(E-mail destination only): The node ID of the Content Server node containing the mailing list that the e-mail is being sent to",
            "type": "string"
          },
          "email_subject (*)": {
            "description": "(E-mail destination only): The Subject of the e-mail",
            "type": "string"
          },
          "append_form": {
            "description": "(Form destination only): Setting used to determine how the WebReport output affects existing form data",
            "type": "string"
          },
          "form_id (*)": {
            "description": "(Form destination only): The node ID of the Form being used as the destination of the WebReport",
            "type": "string"
          },
          "ftp_anonymous": {
            "description": "(FTP destination only): Whether the WebReport is set to login to the FTP Server anonymously",
            "type": "boolean"
          },
          "ftp_copy_options": {
            "description": "(FTP destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found on the destination FTP server",
            "type": "string"
          },
          "ftp_file_path (*)": {
            "description": "(FTP destination only): The relative path to the destination file from the FTP root folder",
            "type": "string"
          },
          "ftp_port": {
            "description": "(FTP destination only): The port on the FTP server to connect to",
            "type": "integer"
          },
          "ftp_server": {
            "description": "(FTP destination only): The IP Address or machine name of the FTP server",
            "type": "string"
          },
          "ftp_user_name": {
            "description": "(FTP destination only): The user name used for authentication on the FTP server",
            "type": "string"
          },
          "ftp_user_password": {
            "description": "(FTP destination only): The password used for authentication on the FTP server",
            "type": "string"
          },
          "server_file_path (*)": {
            "description": "(Server destination only): The file path that the output will be written to on the destination server",
            "type": "string"
          },
          "workflow_attach_output": {
            "description": "(Workflow destination only): Whether the WebReport output is attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_attachment_description (*)": {
            "description": "(Workflow destination only): The node description of the WebReport output to be attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_attachment_name (*)": {
            "description": "(Workflow destination only): The node name of the WebReport output to be attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_category_names": {
            "description": "(Workflow destination only): The names of the categories that will be applied to the output node to be attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_description (*)": {
            "description": "(Workflow destination only): The description of the initiated workflow",
            "type": "string"
          },
          "workflow_due": {
            "description": "(Workflow destination only): Setting used to determine whether the workflow will become due for completion",
            "type": "string"
          },
          "workflow_due_in": {
            "description": "(Workflow destination only): Number of days from initiation that the workflow will become due for completion",
            "type": "string"
          },
          "workflow_due_on": {
            "description": "(Workflow destination only): Date that the workflow will become due for completion",
            "type": "string"
          },
          "workflow_map_id (*)": {
            "description": "(Workflow destination only): The node ID of the Workflow map being used as the destination of the WebReport",
            "type": "string"
          },
          "workflow_title (*)": {
            "description": "(Workflow destination only): The title of the initiated workflow",
            "type": "string"
          }
        }
      },
      "forms_ScheduleData": {
        "type": "object",
        "properties": {
          "five_minute_increments": {
            "description": "Whether the '5-minute-increments' setting is set",
            "type": "boolean"
          },
          "next_run": {
            "description": "The date that the WebReport is scheduled to be next run",
            "type": "string",
            "format": "date"
          },
          "repeat_day": {
            "description": "The repeat interval number of days that the WebReport is scheduled for",
            "type": "integer"
          },
          "repeat_hour": {
            "description": "The repeat interval number of hours that the WebReport is scheduled for",
            "type": "integer"
          },
          "repeat_minute": {
            "description": "The repeat interval number of minutes that the WebReport is scheduled for",
            "type": "integer"
          },
          "repeat_week": {
            "description": "The repeat interval number of weeks that the WebReport is scheduled for",
            "type": "integer"
          },
          "run_condition": {
            "description": "'intervals' if the schedule is set to run using repeat intervals or 'specific' if the schedule is set to run on specific days of the month",
            "type": "string"
          },
          "run_on_dates": {
            "description": "List containing the dates of the month that the report is scheduled to run on",
            "type": "string"
          },
          "run_on_weeks_month": {
            "description": "List containing the weeks of the month that the report is scheduled to run on",
            "type": "string"
          },
          "run_on_days_month": {
            "description": "List containing the days of the month that the report is scheduled to run on",
            "type": "string"
          },
          "run_on_days_week": {
            "description": "List containing the days of the week that the report is scheduled to run on",
            "type": "string"
          },
          "run_times": {
            "description": "The specific number of times that the WebReport will run, or -1 for forever",
            "type": "integer"
          },
          "schedule_enabled": {
            "description": "Whether the schedule is enabled",
            "type": "boolean"
          },
          "user_id": {
            "description": "The User ID of the user that created the schedule",
            "type": "integer"
          }
        }
      },
      "forms_ParametersData": {
        "type": "object",
        "properties": {
          "prompt_file_id": {
            "description": "ID of the prompt file",
            "type": "string"
          },
          "show_descriptions": {
            "description": "Whether the parameter descriptions are set to be displayed",
            "type": "boolean"
          }
        }
      },
      "forms_RunFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Dynamic data for the WebReport parameters to be displayed"
          },
          "options": {
            "type": "object",
            "description": "Basic data about the alpaca form"
          },
          "schema": {
            "type": "object",
            "description": "Properties of the parameters being used for displaying WebReport parameters"
          }
        }
      },
      "forms_GeneralPropertiesFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_GeneralPropertiesInfo"
          },
          "options": {
            "$ref": "#/components/schemas/forms_PropertiesOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_PropertiesSchema"
          }
        }
      },
      "forms_VersionGeneralPropertiesFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_VersionGeneralPropertiesInfo"
          },
          "options": {
            "$ref": "#/components/schemas/forms_PropertiesOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_PropertiesSchema"
          }
        }
      },
      "forms_VersionSpecificPropertiesFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_VersionSpecificPropertiesInfo"
          },
          "options": {
            "$ref": "#/components/schemas/forms_PropertiesOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_PropertiesSchema"
          }
        }
      },
      "forms_SpecificPropertiesFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Dynamic data about the node"
          },
          "options": {
            "$ref": "#/components/schemas/forms_PropertiesOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_PropertiesSchema"
          }
        }
      },
      "forms_MoveFormInfo": {
        "type": "object",
        "properties": {
          "form": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_MoveInfo"
            },
            "description": "The array containing the information on the object being moved. The first element contains node data, the elements following contain optional data"
          }
        }
      },
      "forms_CopyInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Dynamic data for the node being copied"
          },
          "options": {
            "type": "object",
            "description": "Basic data about the alpaca form"
          },
          "schema": {
            "type": "object",
            "description": "Properties of the parameters being used for copying the node"
          }
        }
      },
      "forms_MoveInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Dynamic data for the node being moved"
          },
          "options": {
            "type": "object",
            "description": "Basic data about the alpaca form"
          },
          "schema": {
            "type": "object",
            "description": "Properties of the parameters being used for moving the node"
          }
        }
      },
      "forms_CreateInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Dynamic data for the node being created"
          },
          "options": {
            "type": "object",
            "description": "Basic data about the alpaca form"
          },
          "schema": {
            "type": "object",
            "description": "Properties of the parameters being used for creating the node"
          }
        }
      },
      "forms_FileNodeInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_FileNodeInfoData"
          },
          "options": {
            "$ref": "#/components/schemas/forms_FileNodeInfoOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_FileNodeInfoSchema"
          }
        }
      },
      "forms_FileNodeInfoData": {
        "type": "object",
        "properties": {
          "filing_destination_id": {
            "type": "integer",
            "description": "Always contains the Filing Destination ID set to null"
          },
          "filing_classification_id": {
            "type": "integer",
            "description": "Always contains the Filing Classification ID set to null"
          }
        }
      },
      "forms_FileNodeInfoOptions": {
        "type": "object",
        "properties": {
          "fields": {
            "$ref": "#/components/schemas/forms_FileNodeInfoOptionsFields"
          },
          "form": {
            "$ref": "#/components/schemas/forms_PropertiesForm"
          }
        }
      },
      "forms_FileNodeInfoOptionsFields": {
        "type": "object",
        "properties": {
          "filing_destination_id": {
            "$ref": "#/components/schemas/forms_FileNodeInfoFilingDestinationIDOptionsField"
          },
          "filing_classification_id": {
            "$ref": "#/components/schemas/forms_FileNodeInfoFilingClassificationIDOptionsField"
          }
        }
      },
      "forms_FileNodeInfoOptionsField": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean",
            "description": "True if alpaca field is hidden, false otherwise"
          },
          "hideInitValidationError": {
            "type": "boolean",
            "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
          },
          "label": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "select_types": {
            "type": "array",
            "description": "Integer values representing selectable node types ( ex.0 = Folders, 144 = Documents, 131 = Category etc. )",
            "items": {
              "type": "integer"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          },
          "type_control": {
            "$ref": "#/components/schemas/forms_type_control"
          }
        }
      },
      "forms_FileNodeInfoFilingDestinationIDOptionsField": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean",
            "description": "True if alpaca field is hidden, false otherwise"
          },
          "hideInitValidationError": {
            "type": "boolean",
            "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
          },
          "label": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          },
          "type_control": {
            "$ref": "#/components/schemas/file_FilingDestinationIDControl"
          }
        }
      },
      "file_FilingDestinationIDControl": {
        "type": "object",
        "properties": {
          "parameters": {
            "$ref": "#/components/schemas/file_FilingDestinationIDControlParameters"
          }
        }
      },
      "file_FilingDestinationIDControlParameters": {
        "type": "object",
        "properties": {
          "search_type": {
            "type": "string",
            "description": "The search type (ex. startsWith)"
          },
          "workspace_types": {
            "type": "array",
            "description": "Integer values representing Workspace Types",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "forms_FileNodeInfoFilingClassificationIDOptionsField": {
        "type": "object",
        "properties": {
          "businessWorkspaceId": {
            "type": "integer",
            "description": "The ID of the Business Workspace Template"
          },
          "hidden": {
            "type": "boolean",
            "description": "True if alpaca field is hidden, false otherwise"
          },
          "hideInitValidationError": {
            "type": "boolean",
            "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
          },
          "label": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          }
        }
      },
      "forms_FileNodeInfoSchema": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/forms_FileNodeInfoSchemaProperties"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "forms_FileNodeInfoSchemaProperties": {
        "type": "object",
        "properties": {
          "filing_destination_id": {
            "$ref": "#/components/schemas/forms_FilingDestinationIDSchemaProperties"
          },
          "filing_classification_id": {
            "$ref": "#/components/schemas/forms_FilingClassificationIDSchemaProperties"
          }
        }
      },
      "forms_FilingDestinationIDSchemaProperties": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the alpaca field"
          },
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "required": {
            "type": "boolean",
            "description": "True if the alpaca field is required, false otherwise"
          },
          "title": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          }
        }
      },
      "forms_FilingClassificationIDSchemaProperties": {
        "type": "object",
        "properties": {
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "required": {
            "type": "boolean",
            "description": "True if the alpaca field is required, false otherwise"
          },
          "title": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          }
        }
      },
      "forms_GeneralPropertiesInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the node"
          },
          "description": {
            "type": "string",
            "description": "Description of the node"
          },
          "create_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of node creation"
          },
          "create_user_id": {
            "type": "integer",
            "description": "User ID of the node's creator"
          },
          "type": {
            "type": "integer",
            "description": "Node data type"
          },
          "modified_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date the node was last modified"
          },
          "owner_user_id": {
            "type": "integer",
            "description": "User ID of the node's owner"
          }
        }
      },
      "forms_UpdateInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Dynamic data for the node being updated"
          },
          "options": {
            "type": "object",
            "description": "Basic data about the alpaca form"
          },
          "schema": {
            "type": "object",
            "description": "Properties of the parameters being used for updating the node"
          }
        }
      },
      "forms_VersionGeneralPropertiesInfo": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the version"
          },
          "version_number": {
            "type": "integer",
            "description": "Version number of the node"
          },
          "version_number_name": {
            "type": "string",
            "description": "Version number of the node"
          },
          "create_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date the version was created"
          },
          "owner_id": {
            "type": "integer",
            "description": "User ID of the versions's owner"
          },
          "modify_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date the version was last modified"
          },
          "provider_id": {
            "type": "string",
            "description": "Storage provider name"
          }
        }
      },
      "forms_VersionSpecificPropertiesInfo": {
        "type": "object",
        "properties": {
          "mime_type": {
            "type": "string",
            "description": "Mime type of the version"
          },
          "version_number": {
            "type": "integer",
            "description": "Version number of the node"
          },
          "file_name": {
            "type": "string",
            "description": "File name of the version"
          },
          "file_type": {
            "type": "string",
            "description": "File extension of the version"
          },
          "file_size_formatted": {
            "type": "string",
            "description": "Formatted file size of the versions"
          },
          "file_create_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date the file was created"
          },
          "file_modify_date": {
            "type": "string",
            "format": "date-time",
            "description": "Date the file was last modified"
          }
        }
      },
      "forms_VersionsCategoriesFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Attributes values for the categories applied to the version"
          },
          "options": {
            "type": "object",
            "description": "Display information for the categories applied to the version"
          },
          "schema": {
            "type": "object",
            "description": "Definitions for the categories applied to the version"
          }
        }
      },
      "forms_VersionsCreateFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_VersionsCreateInfo"
          },
          "options": {
            "$ref": "#/components/schemas/forms_VersionsCreateOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_VersionsCreateSchema"
          }
        }
      },
      "forms_VersionsCreateInfo": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description for the new version of the node"
          },
          "file": {
            "type": "string",
            "description": "File for the new version of the node"
          }
        }
      },
      "forms_VersionsCreateOptions": {
        "type": "object",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/forms_VersionCreateOptionsInfo"
          },
          "file": {
            "$ref": "#/components/schemas/forms_VersionCreateOptionsInfo"
          },
          "form": {
            "$ref": "#/components/schemas/forms_PropertiesForm"
          }
        }
      },
      "forms_VersionCreateOptionsInfo": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean",
            "description": "True if alpaca field is hidden, false otherwise"
          },
          "hideInitValidationError": {
            "type": "boolean",
            "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
          },
          "label": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          }
        }
      },
      "forms_VersionsCreateSchema": {
        "type": "object",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/forms_VersionCreateSchemaInfo"
          },
          "file": {
            "$ref": "#/components/schemas/forms_VersionCreateSchemaInfo"
          },
          "type": {
            "type": "string",
            "description": "Object type of the schema (always of type 'object')"
          }
        }
      },
      "forms_VersionCreateSchemaInfo": {
        "type": "object",
        "properties": {
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "required": {
            "type": "boolean",
            "description": "True if the alpaca field is required, false otherwise"
          },
          "title": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          }
        }
      },
      "forms_VersionsUpdateFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_VersionsUpdateInfo"
          },
          "options": {
            "$ref": "#/components/schemas/forms_VersionsUpdateOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_VersionsUpdateSchema"
          }
        }
      },
      "forms_VersionsUpdateInfo": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description for the new version of the node"
          },
          "version_number": {
            "type": "integer",
            "description": "The version number of the node to update"
          }
        }
      },
      "forms_VersionsUpdateOptions": {
        "type": "object",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/forms_VersionUpdateOptionsInfo"
          },
          "version_number": {
            "$ref": "#/components/schemas/forms_VersionUpdateOptionsInfo"
          },
          "form": {
            "$ref": "#/components/schemas/forms_PropertiesForm"
          }
        }
      },
      "forms_VersionUpdateOptionsInfo": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean",
            "description": "True if alpaca field is hidden, false otherwise"
          },
          "hideInitValidationError": {
            "type": "boolean",
            "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
          },
          "label": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          }
        }
      },
      "forms_VersionsUpdateSchema": {
        "type": "object",
        "properties": {
          "description": {
            "$ref": "#/components/schemas/forms_VersionUpdateSchemaInfo"
          },
          "version_number": {
            "$ref": "#/components/schemas/forms_VersionUpdateSchemaInfo2"
          },
          "type": {
            "type": "string",
            "description": "Object type of the schema (always of type 'object')"
          }
        }
      },
      "forms_VersionUpdateSchemaInfo": {
        "type": "object",
        "properties": {
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "required": {
            "type": "boolean",
            "description": "True if the alpaca field is required, false otherwise"
          },
          "title": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          }
        }
      },
      "forms_VersionUpdateSchemaInfo2": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string",
            "description": "Regex pattern for the field"
          },
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "required": {
            "type": "boolean",
            "description": "True if the alpaca field is required, false otherwise"
          },
          "title": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          }
        }
      },
      "forms_CategoriesCreateOptions": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/forms_category_id"
          },
          "form": {
            "$ref": "#/components/schemas/forms_PropertiesForm"
          }
        }
      },
      "forms_CategoriesUpdateOptions": {
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Properties data for the fields of the alpaca form"
          },
          "form": {
            "$ref": "#/components/schemas/forms_PropertiesForm"
          }
        }
      },
      "forms_CategoriesUpdateSchema": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "object",
            "description": "Schema of the data that will populate the alpaca form fields"
          },
          "type": {
            "type": "string",
            "description": "Object type of the schema (always of type 'object')"
          }
        }
      },
      "forms_category_id": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean",
            "description": "True if alpaca field is hidden, false otherwise"
          },
          "hideInitValidationError": {
            "type": "boolean",
            "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
          },
          "label": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_node_picker )"
          },
          "type_control": {
            "$ref": "#/components/schemas/forms_type_control"
          }
        }
      },
      "forms_type_control": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "method": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "parameters": {
            "$ref": "#/components/schemas/forms_parameters"
          }
        }
      },
      "forms_parameters": {
        "type": "object",
        "properties": {
          "filter_types": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Integer values representing node filter types ( ex. 0 = Folders, 144 = Documents, 131 = Category etc. )"
          },
          "select_types": {
            "type": "array",
            "description": "Integer values representing selectable node types ( ex.0 = Folders, 144 = Documents, 131 = Category etc. )",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "forms_CategoriesCreateSchema": {
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/components/schemas/forms_Schema"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "forms_CategoriesData": {
        "type": "object",
        "properties": {
          "categories_id": {
            "type": "integer",
            "description": "Always contains the categories ID set to null"
          }
        }
      },
      "forms_Options": {
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Contains dynamic field data for the alpaca form"
          }
        }
      },
      "forms_Schema": {
        "type": "object",
        "properties": {
          "schema": {
            "type": "object",
            "description": "Contains dynamic data for populating the alpaca form fields"
          }
        }
      },
      "forms_PropertiesForm": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/forms_PropertiesFormAttributes"
          },
          "renderForm": {
            "type": "boolean",
            "description": "True if the form will be rendered, false otherwise"
          }
        }
      },
      "forms_PropertiesFormAttributes": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Path of the action ( example: api/v1/nodes/{1} )"
          },
          "method": {
            "type": "string",
            "description": "Method of the action ( ex. GET, PUT etc. )"
          }
        }
      },
      "forms_PropertiesOptions": {
        "type": "object",
        "properties": {
          "options": {
            "$ref": "#/components/schemas/forms_Options"
          },
          "form": {
            "$ref": "#/components/schemas/forms_PropertiesForm"
          }
        }
      },
      "forms_PropertiesSchema": {
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/components/schemas/forms_Schema"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "forms_CategoryInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Data about the the category"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Data about the category options"
          },
          "role_name": {
            "type": "string",
            "description": "Name of the role being used"
          },
          "schema": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Schema of the category"
          }
        }
      },
      "forms_WorkflowPropertiesFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_WorkflowPropertiesInfo"
          },
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_WorkflowFormInfo"
            },
            "description": "The array containing the information on workflow attributes to be displayed. The forms are displayed in the workflow dialog."
          }
        }
      },
      "forms_WorkflowPropertiesInfo": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the workflow"
          },
          "instructions": {
            "type": "string",
            "description": "Instructions of the workflow task"
          },
          "priority": {
            "type": "integer",
            "description": "Priority of the workflow task"
          },
          "comments_on": {
            "type": "boolean",
            "description": "Flag indicating if comments are enabled for the workflow"
          },
          "attachments_on": {
            "type": "boolean",
            "description": "Flag indicating if attachments are enabled for the workflow"
          },
          "data_packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_WorkflowDataPackageInfo"
            },
            "description": "The array containing the information about the defined data packages (comments, attachments, ...)"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_WorkflowActionInfo"
            },
            "description": "The array containing the information about the standard actions for the workflow task. ( example: SendOn, SendForReview, Delegate)"
          },
          "custom_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_WorkflowActionInfo"
            },
            "description": "The array containing the information about the custom actions (dispositiions) for the workflow task."
          },
          "message": {
            "$ref": "#/components/schemas/forms_WorkflowPropertiesMessageInfo"
          },
          "member_accept": {
            "type": "boolean",
            "description": "Indicates if the step has to be accepted before the user can work with it"
          },
          "reply_performer_id": {
            "type": "integer",
            "description": "Contains in a subwork case, if available, the performerId of the step before this step. Used for the 'Reply' action in smartUI, but can be set in other cases as well. Is not there when the performerId is not available."
          },
          "task": {
            "$ref": "#/components/schemas/forms_WorkflowTaskInfo"
          },
          "authentication": {
            "type": "boolean",
            "description": "Flag indicating wether the authentication is set for this task."
          }
        }
      },
      "forms_WorkflowPropertiesMessageInfo": {
        "type": "object",
        "properties": {
          "performer": {
            "type": "integer",
            "description": "Performer that is responsible for the message"
          },
          "type": {
            "type": "string",
            "description": "The type of the message. Supported types are 'delegate', 'review' and 'review_return'"
          },
          "text": {
            "type": "string",
            "description": "The message text"
          }
        }
      },
      "forms_WorkflowTaskInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "description": "Task type"
          },
          "sub_type": {
            "type": "integer",
            "description": "Task sub_type"
          },
          "data": {
            "type": "object",
            "description": "Task specific data"
          }
        }
      },
      "forms_WorkflowFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Dynamic data for the workflow to be displayed"
          },
          "options": {
            "type": "object",
            "description": "Basic data about the alpaca form"
          },
          "schema": {
            "type": "object",
            "description": "Properties of the parameters being used for displaying workflow attributes"
          },
          "columns": {
            "type": "integer",
            "description": "Number of columns for the form, currently supported values: 1 or 2"
          }
        }
      },
      "forms_WorkflowActionInfo": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the action, has to be sent when executing the action"
          },
          "label": {
            "type": "string",
            "description": "Label of the action"
          }
        }
      },
      "forms_WorkflowDataPackageInfo": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "description": "Type of the data package, normally 1"
          },
          "sub_type": {
            "type": "integer",
            "description": "Sub type of the data package (attachments = 1, comments = 2, attributes = 3, ...)"
          },
          "data": {
            "type": "object",
            "description": "The structure of the data property depends on the data packages"
          }
        }
      },
      "forms_UserFormInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/forms_UserData"
          },
          "options": {
            "$ref": "#/components/schemas/forms_UserViewOptions"
          },
          "schema": {
            "$ref": "#/components/schemas/forms_UserViewSchema"
          }
        }
      },
      "forms_UserData": {
        "type": "object",
        "properties": {
          "reportsToID": {
            "type": "string",
            "description": "The user's manager id"
          },
          "OfficeLocation": {
            "type": "string",
            "description": "The user's office location"
          },
          "MailAddress": {
            "type": "string",
            "description": "The user's office email address"
          },
          "Contact": {
            "type": "string",
            "description": "The user's office phone number"
          },
          "CellularPhone": {
            "type": "string",
            "description": "The user's personal mobile phone number"
          }
        }
      },
      "forms_UserViewOptions": {
        "type": "object",
        "properties": {
          "fields": {
            "$ref": "#/components/schemas/forms_UserOptionFields"
          }
        }
      },
      "forms_UserOptionFields": {
        "type": "object",
        "properties": {
          "reportsToID": {
            "$ref": "#/components/schemas/forms_UserOptionFieldsInfo"
          },
          "OfficeLocation": {
            "$ref": "#/components/schemas/forms_UserOptionFieldsInfo"
          },
          "MailAddress": {
            "$ref": "#/components/schemas/forms_UserOptionFieldsInfo"
          },
          "Contact": {
            "$ref": "#/components/schemas/forms_UserOptionFieldsInfo"
          },
          "CellularPhone": {
            "$ref": "#/components/schemas/forms_UserOptionFieldsInfo"
          }
        }
      },
      "forms_UserOptionFieldsInfo": {
        "type": "object",
        "properties": {
          "hidden": {
            "type": "boolean",
            "description": "True if alpaca field is hidden, false otherwise"
          },
          "hideInitValidationError": {
            "type": "boolean",
            "description": "True if hideInitValidationError validation error is hidden for the alpaca field, false otherwise"
          },
          "label": {
            "type": "string",
            "description": "The label of the alpaca field"
          },
          "readonly": {
            "type": "boolean",
            "description": "True if the alpaca field is read only, false otherwise"
          },
          "type": {
            "type": "string",
            "description": "The type of alpaca field ( ex. otcs_user_picker )"
          }
        }
      },
      "forms_UserViewSchema": {
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/components/schemas/forms_Schema"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "forms_DoctemplatesCreateResponse": {
        "type": "object",
        "properties": {
          "forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/forms_DoctemplatesCreateFormsInfo"
            }
          }
        }
      },
      "forms_DoctemplatesCreateFormsInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Data about the the doctemplates create form"
          },
          "options": {
            "type": "array",
            "description": "Basic data about the alpaca form",
            "items": {
              "$ref": "#/components/schemas/forms_DoctemplatesCreateFormsOptions"
            }
          },
          "role_name": {
            "type": "string",
            "description": "Name of the role being used"
          },
          "schema": {
            "type": "array",
            "description": "Schema of the data that will populate the alpaca form fields",
            "items": {
              "$ref": "#/components/schemas/forms_DoctemplatesCreateFormsSchema"
            }
          }
        }
      },
      "forms_DoctemplatesCreateFormsOptions": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "object"
          }
        }
      },
      "forms_DoctemplatesCreateFormsSchema": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "object"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "forms_RenameFormInfo": {
        "type": "object"
      },
      "intelligentfiling_V2ResponseIntelligentFilingPost": {
        "type": "object",
        "properties": {
          "links": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "self": {
                    "$ref": "#/components/schemas/nodes_V2Link"
                  }
                }
              }
            }
          },
          "results": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "properties": {
                    "$ref": "#/components/schemas/nodes_V2Properties"
                  }
                }
              }
            }
          }
        }
      },
      "lladmin_setup": {
        "type": "object",
        "properties": {
          "links": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "self": {
                    "$ref": "#/components/schemas/nodes_V2Link"
                  }
                }
              }
            }
          },
          "results": {
            "type": "object",
            "properties": {
              "dbupgradeError": {
                "type": "boolean"
              },
              "ok": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "members_MemberInfo": {
        "type": "object",
        "properties": {
          "available_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_AvailableActions"
            }
          },
          "data": {
            "description": "User Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_Data"
            }
          },
          "definitions": {
            "description": "This describes the actions available for items in the data structure",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_ActionDefinitions"
            }
          },
          "definitions_order": {
            "description": "The order items should be displayed in. These items can be treated as keys to items in definitions_map",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_ActionDefinitionsOrder"
            }
          },
          "type": {
            "description": "The type of user, group or user-related entity",
            "type": "integer"
          },
          "type_name": {
            "description": "The type name of user, group or user-related entity",
            "type": "string"
          },
          "workflow_id": {
            "description": "The workflow ID",
            "type": "integer"
          },
          "workflow_subworkflow_id": {
            "description": "The sub-workflow ID",
            "type": "integer"
          },
          "workflow_subworkflow_task_id": {
            "description": "The task ID from the sub-workflow",
            "type": "integer"
          }
        }
      },
      "members_ActionDefinitions": {
        "type": "object"
      },
      "members_ActionDefinitionsOrder": {
        "type": "object"
      },
      "members_AvailableActions": {
        "type": "object",
        "properties": {
          "parameterless": {
            "type": "boolean",
            "description": "TRUE if this action has parameters, FALSE otherwise"
          },
          "read_only": {
            "type": "boolean",
            "description": "TRUE if this action does not modify data, FALSE otherwise"
          },
          "type": {
            "type": "string",
            "description": "The type of action"
          },
          "type_name": {
            "type": "string",
            "description": "The name of the action"
          },
          "webnode_signature": {
            "type": "string",
            "description": "A unique name for this action"
          }
        }
      },
      "members_Data": {
        "type": "object",
        "properties": {
          "business_email": {
            "type": "string",
            "description": "The user's business e-mail address"
          },
          "business_fax": {
            "type": "string",
            "description": "The user's business fax number"
          },
          "business_phone": {
            "type": "string",
            "description": "The user's business phone number"
          },
          "deleted": {
            "type": "boolean",
            "description": "TRUE if the user or group has been deleted, FALSE otherwise"
          },
          "first_name": {
            "type": "string",
            "description": "The user's first name"
          },
          "group_id": {
            "type": "integer",
            "description": "The ID of the user's base group"
          },
          "id": {
            "type": "integer",
            "description": "A unique identifier for the user or group"
          },
          "initials": {
            "type": "string",
            "description": "The user/group display initials (ex. 'JP', 'A')"
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name"
          },
          "middle_name": {
            "type": "string",
            "description": "The user's middle name"
          },
          "name": {
            "type": "string",
            "description": "The user or group name"
          },
          "office_location": {
            "type": "string",
            "description": "The full address of the user's office location"
          },
          "photo_url": {
            "type": "string",
            "description": "REST API URL to get the member's profile photo"
          },
          "display_language": {
            "type": "string",
            "description": "The user's preferred display language"
          },
          "privilege_content_manager": {
            "type": "boolean",
            "description": "TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_login": {
            "type": "boolean",
            "description": "TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_groups": {
            "type": "boolean",
            "description": "TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_users": {
            "type": "boolean",
            "description": "TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_public_access": {
            "type": "boolean",
            "description": "TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_system_admin_rights": {
            "type": "boolean",
            "description": "TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_user_admin_rights": {
            "type": "boolean",
            "description": "TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "time_zone": {
            "type": "integer",
            "description": "An offset of GMT"
          },
          "title": {
            "type": "string",
            "description": "The user's title"
          },
          "type": {
            "type": "integer",
            "description": "The type of user, group or user-related entity"
          },
          "type_name": {
            "type": "string",
            "description": "The type name of user, group or user-related entity"
          }
        }
      },
      "members_CreateMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique identifier for the user"
          }
        }
      },
      "members_DeleteMember": {
        "type": "object"
      },
      "members_AddFavorite": {
        "type": "object"
      },
      "members_EmptyResult": {
        "type": "object"
      },
      "members_RemoveFavorite": {
        "type": "object"
      },
      "members_Properties": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/members_PropertiesStandard"
            }
          }
        }
      },
      "members_PropertiesStandard": {
        "type": "object",
        "properties": {
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "create_date": {
            "description": "The date that the item was created",
            "type": "string"
          },
          "create_user_id": {
            "description": "The id of the user who created the item",
            "type": "integer"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "guid": {
            "description": "Globally unique id",
            "type": "string"
          },
          "icon": {
            "description": "The item's icon",
            "type": "string"
          },
          "icon_large": {
            "description": "The item's icon (large)",
            "type": "string"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "modify_date": {
            "description": "The date on which the item was last modified",
            "type": "string",
            "format": "date"
          },
          "modify_user_id": {
            "description": "The id of the user who modified the item",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "owner_group_id": {
            "description": "The group id of the owner of this item",
            "type": "integer"
          },
          "owner_user_id": {
            "description": "The user id of the owner of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "The object id of the item's parent",
            "type": "integer"
          },
          "reserved": {
            "description": "Whether or not this item has been reserved",
            "type": "boolean"
          },
          "reserved_date": {
            "description": "The date on which the item was reserved",
            "type": "string"
          },
          "reserved_user_id": {
            "description": "The id of the user who has this item reserved",
            "type": "integer"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "versions_control_advanced": {
            "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
            "type": "boolean"
          },
          "volume_id": {
            "description": "The id of the volume to which this item belongs",
            "type": "integer"
          }
        }
      },
      "members_SearchMember": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Search results",
            "items": {
              "$ref": "#/components/schemas/members_SearchResults"
            }
          }
        }
      },
      "members_SearchResults": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique identifier for the user or group"
          },
          "name": {
            "type": "string",
            "description": "The user or group name"
          },
          "first_name": {
            "type": "string",
            "description": "The user's first name"
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name"
          },
          "type": {
            "type": "string",
            "description": "The type of user, group or user-related entity"
          },
          "name_formatted": {
            "type": "string",
            "description": "The group name or user's display name"
          },
          "initials": {
            "type": "string",
            "description": "The user/group display initials (ex. 'JP', 'A')"
          }
        }
      },
      "members_UpdateMemberGroup": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean",
            "description": "TRUE if the group has been deleted, FALSE otherwise"
          },
          "id": {
            "description": "The group ID",
            "type": "integer"
          },
          "leader_id": {
            "description": "The id of the leader of the group",
            "type": "integer"
          },
          "name": {
            "description": "The group name",
            "type": "string"
          },
          "type": {
            "description": "Member Type of the user represented as an integer (0 for User, 1 for Group)",
            "type": "integer"
          },
          "type_name": {
            "description": "Member Type of the user in a human-readable format",
            "type": "string"
          }
        }
      },
      "members_UpdateMemberUser": {
        "type": "object",
        "properties": {
          "birth_date": {
            "description": "The user's birthday",
            "type": "string",
            "format": "date"
          },
          "business_email": {
            "description": "The user's office email address",
            "type": "string"
          },
          "business_fax": {
            "description": "The user's office fax number",
            "type": "string"
          },
          "business_phone": {
            "description": "The user's office phone number",
            "type": "string"
          },
          "cell_phone": {
            "description": "The user's personal mobile phone number",
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "description": "TRUE if the user or group has been deleted, FALSE otherwise"
          },
          "first_name": {
            "description": "The user's first name",
            "type": "string"
          },
          "gender": {
            "description": "The user's gender",
            "type": "string"
          },
          "group_id": {
            "description": "The user's group ID",
            "type": "integer"
          },
          "home_address_1": {
            "description": "The user's home address 1",
            "type": "string"
          },
          "home_address_2": {
            "description": "The user's home address 2",
            "type": "string"
          },
          "home_fax": {
            "description": "The user's personal fax number",
            "type": "string"
          },
          "home_phone": {
            "description": "The user's personal home phone number",
            "type": "string"
          },
          "id": {
            "description": "The user/group ID",
            "type": "integer"
          },
          "last_name": {
            "description": "The user's last name",
            "type": "string"
          },
          "middle_name": {
            "description": "The user's middle name",
            "type": "string"
          },
          "name": {
            "description": "The user's login name.  If this is a group, then it is the group name",
            "type": "string"
          },
          "office_location": {
            "description": "The user's office location",
            "type": "string"
          },
          "pager": {
            "description": "The user's office mobile phone number",
            "type": "string"
          },
          "personal_email": {
            "description": "The user's personal email address",
            "type": "string"
          },
          "personal_interests": {
            "description": "The user's personal interests and hobbies",
            "type": "string"
          },
          "personal_url_1": {
            "description": "The user's bookmarked url link 1",
            "type": "string"
          },
          "personal_url_2": {
            "description": "The user's bookmarked url link 2",
            "type": "string"
          },
          "personal_url_3": {
            "description": "The user's bookmarked url link 3",
            "type": "string"
          },
          "personal_website": {
            "description": "The user's personal home page",
            "type": "string"
          },
          "photo_id": {
            "description": "The ID of the node for the user's profile photo",
            "type": "integer"
          },
          "display_language": {
            "description": "The user's preferred display language",
            "type": "string"
          },
          "privilege_content_manager": {
            "type": "boolean",
            "description": "TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_login": {
            "type": "boolean",
            "description": "TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_groups": {
            "type": "boolean",
            "description": "TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_users": {
            "type": "boolean",
            "description": "TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_public_access": {
            "type": "boolean",
            "description": "TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_system_admin_rights": {
            "type": "boolean",
            "description": "TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_user_admin_rights": {
            "type": "boolean",
            "description": "TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "time_zone": {
            "description": "The user's time zone",
            "type": "integer"
          },
          "title": {
            "description": "The user's title",
            "type": "string"
          },
          "type": {
            "description": "Member Type of the user represented as an integer (0 for User, 1 for Group)",
            "type": "integer"
          },
          "type_name": {
            "description": "Member Type of the user in a human-readable format",
            "type": "string"
          }
        }
      },
      "members_V2UpdateMember": {
        "type": "object",
        "properties": {
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          },
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2UpdateMemberResults"
            }
          }
        }
      },
      "members_V2UpdateMemberResults": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/members_V2UpdateMemberData"
            }
          }
        }
      },
      "members_V2UpdateMemberData": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Members Information",
            "items": {
              "$ref": "#/components/schemas/members_V2UpdateMemberProperties"
            }
          }
        }
      },
      "members_V2UpdateMemberProperties": {
        "type": "object",
        "properties": {
          "birth_date": {
            "description": "The user's birthday",
            "type": "string",
            "format": "date"
          },
          "business_email": {
            "description": "The user's office email address",
            "type": "string"
          },
          "business_fax": {
            "description": "The user's office fax number",
            "type": "string"
          },
          "business_phone": {
            "description": "The user's office phone number",
            "type": "string"
          },
          "cell_phone": {
            "description": "The user's personal mobile phone number",
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "description": "TRUE if the user or group has been deleted, FALSE otherwise"
          },
          "first_name": {
            "description": "The user's first name",
            "type": "string"
          },
          "gender": {
            "description": "The user's gender",
            "type": "string"
          },
          "group_id": {
            "description": "The user's group ID",
            "type": "integer"
          },
          "home_address_1": {
            "description": "The user's home address 1",
            "type": "string"
          },
          "home_address_2": {
            "description": "The user's home address 2",
            "type": "string"
          },
          "home_fax": {
            "description": "The user's personal fax number",
            "type": "string"
          },
          "home_phone": {
            "description": "The user's personal home phone number",
            "type": "string"
          },
          "id": {
            "description": "The user/group ID",
            "type": "integer"
          },
          "initials": {
            "description": "The user/group display initials (ex. 'JP', 'A')",
            "type": "string"
          },
          "last_name": {
            "description": "The user's last name",
            "type": "string"
          },
          "middle_name": {
            "description": "The user's middle name",
            "type": "string"
          },
          "name": {
            "description": "The user's login name.  If this is a group, then it is the group name",
            "type": "string"
          },
          "name_formatted": {
            "description": "The user/group display name (ex. 'John Q. Public', 'AdminUserGroup')",
            "type": "string"
          },
          "office_location": {
            "description": "The user's office location",
            "type": "string"
          },
          "pager": {
            "description": "The user's office mobile phone number",
            "type": "string"
          },
          "personal_email": {
            "description": "The user's personal email address",
            "type": "string"
          },
          "personal_interests": {
            "description": "The user's personal interests and hobbies",
            "type": "string"
          },
          "personal_url_1": {
            "description": "The user's bookmarked url link 1",
            "type": "string"
          },
          "personal_url_2": {
            "description": "The user's bookmarked url link 2",
            "type": "string"
          },
          "personal_url_3": {
            "description": "The user's bookmarked url link 3",
            "type": "string"
          },
          "personal_website": {
            "description": "The user's personal home page",
            "type": "string"
          },
          "photo_id": {
            "description": "The ID of the node for the user's profile photo",
            "type": "integer"
          },
          "photo_url": {
            "description": "The user's photo url",
            "type": "string"
          },
          "time_zone": {
            "description": "The user's time zone",
            "type": "integer"
          },
          "display_language": {
            "description": "The user's preferred display language",
            "type": "string"
          },
          "privilege_content_manager": {
            "type": "boolean",
            "description": "TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_login": {
            "type": "boolean",
            "description": "TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_groups": {
            "type": "boolean",
            "description": "TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_users": {
            "type": "boolean",
            "description": "TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_public_access": {
            "type": "boolean",
            "description": "TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_system_admin_rights": {
            "type": "boolean",
            "description": "TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_user_admin_rights": {
            "type": "boolean",
            "description": "TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "title": {
            "description": "The user's title",
            "type": "string"
          },
          "type": {
            "description": "Member Type of the user represented as an integer (0 for User, 1 for Group)",
            "type": "integer"
          },
          "type_name": {
            "description": "Member Type of the user in a human-readable format",
            "type": "string"
          }
        }
      },
      "members_V2Data": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/members_V2Properties"
            }
          }
        }
      },
      "members_V2DataAccessed": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/members_V2Properties"
            }
          },
          "properties_user": {
            "type": "array",
            "description": "User Properties",
            "items": {
              "$ref": "#/components/schemas/members_V2PropertiesUser"
            }
          }
        }
      },
      "members_V2DataAssignments": {
        "type": "object",
        "properties": {
          "assignments": {
            "type": "array",
            "description": "Assignments",
            "items": {
              "$ref": "#/components/schemas/members_V2PropertiesAssignments"
            }
          }
        }
      },
      "members_V2DataMembersSearch": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Members Search",
            "items": {
              "$ref": "#/components/schemas/members_V2PropertiesMembersSearch"
            }
          }
        }
      },
      "members_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "members_V2Link_Self": {
        "type": "object",
        "properties": {
          "self": {
            "type": "array",
            "description": "Self link",
            "items": {
              "$ref": "#/components/schemas/members_V2Link"
            }
          }
        }
      },
      "members_V2Links": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data link",
            "items": {
              "$ref": "#/components/schemas/members_V2Link_Self"
            }
          }
        }
      },
      "members_V2Properties": {
        "type": "object",
        "properties": {
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "create_date": {
            "description": "(Can be time-zone aware) The date that the item was created",
            "type": "string"
          },
          "create_user_id": {
            "description": "The id of the user who created the item",
            "type": "integer"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/members_DescriptionMultilingual"
          },
          "favorite": {
            "description": "Indicates if this item has been favorited by the current user",
            "type": "boolean"
          },
          "guid": {
            "description": "Globally unique id",
            "type": "string"
          },
          "icon": {
            "description": "The item's icon",
            "type": "string"
          },
          "icon_large": {
            "description": "The item's icon (large)",
            "type": "string"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "modify_date": {
            "description": "(Can be time-zone aware) The date on which the item was last modified",
            "type": "string",
            "format": "date"
          },
          "modify_user_id": {
            "description": "The id of the user who modified the item",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/members_NameMultilingual"
          },
          "owner": {
            "description": "The name of the owner of this item",
            "type": "string"
          },
          "owner_group_id": {
            "description": "The group id of the owner of this item",
            "type": "integer"
          },
          "owner_user_id": {
            "description": "The user id of the owner of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "The object id of the item's parent",
            "type": "integer"
          },
          "reserved": {
            "description": "Whether or not this item has been reserved",
            "type": "boolean"
          },
          "reserved_date": {
            "description": "(Can be time-zone aware) The date on which the item was reserved",
            "type": "string"
          },
          "reserved_user_id": {
            "description": "The id of the user who has this item reserved",
            "type": "integer"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "versionable": {
            "description": "TRUE if this item has versionable content, FALSE otherwise",
            "type": "boolean"
          },
          "versions_control_advanced": {
            "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
            "type": "boolean"
          },
          "volume_id": {
            "description": "The id of the volume to which this item belongs",
            "type": "integer"
          }
        }
      },
      "members_V2PropertiesFavoritesTab": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the favorites tab",
            "type": "string"
          },
          "order": {
            "description": "The order of the favorites tab ",
            "type": "integer"
          },
          "tab_id": {
            "description": "The tab_id of the favorites tab",
            "type": "integer"
          }
        }
      },
      "members_V2PropertiesAssignments": {
        "type": "object",
        "properties": {
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "date_due": {
            "description": "(Can be time-zone aware) Assignment due date",
            "type": "string",
            "format": "date"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "favorite": {
            "description": "Indicates if the item is a favorite",
            "type": "boolean"
          },
          "followup_id": {
            "description": "The follow up ID",
            "type": "integer"
          },
          "from_user_id": {
            "description": "The id of the user who had sent this assignment",
            "type": "integer"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "instructions": {
            "description": "Instructions for the assignment if applicable",
            "type": "string"
          },
          "location_id": {
            "description": "The object id of the parent to which this assignment belongs",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "priority": {
            "description": "Integer representation of the assignment's priority",
            "type": "integer"
          },
          "priority_name": {
            "description": "Assignment priority",
            "type": "string"
          },
          "smartViewAttachmentsView": {
            "description": "Whether to open the workflow in the Smart View Attachment view",
            "type": "boolean"
          },
          "status": {
            "description": "Integer representation of the assignment's status",
            "type": "integer"
          },
          "status_name": {
            "description": "Assignment status",
            "type": "string"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "workflow_id": {
            "description": "The workflow ID",
            "type": "integer"
          },
          "workflow_open_in_smart_ui": {
            "description": "Whether to open the workflow in the Smart UI",
            "type": "boolean"
          },
          "workflow_subworkflow_id": {
            "description": "The sub-workflow ID",
            "type": "integer"
          },
          "workflow_subworkflow_task_id": {
            "description": "The sub-workflow task ID",
            "type": "integer"
          },
          "maptask_subtype": {
            "description": "The task subtype",
            "type": "integer"
          }
        }
      },
      "members_V2PropertiesMembersSearch": {
        "type": "object",
        "properties": {
          "birth_date": {
            "description": "The user's birthday",
            "type": "string",
            "format": "date"
          },
          "business_email": {
            "description": "The user's office email address",
            "type": "string"
          },
          "business_fax": {
            "description": "The user's office fax number",
            "type": "string"
          },
          "business_phone": {
            "description": "The user's office phone number",
            "type": "string"
          },
          "cell_phone": {
            "description": "The user's personal mobile phone number",
            "type": "string"
          },
          "first_name": {
            "description": "The user's first name",
            "type": "string"
          },
          "gender": {
            "description": "The user's gender",
            "type": "string"
          },
          "group_id": {
            "description": "The user's group ID",
            "type": "integer"
          },
          "home_address_1": {
            "description": "The user's home address 1",
            "type": "string"
          },
          "home_address_2": {
            "description": "The user's home address 2",
            "type": "string"
          },
          "home_fax": {
            "description": "The user's personal fax number",
            "type": "string"
          },
          "home_phone": {
            "description": "The user's personal home phone number",
            "type": "string"
          },
          "id": {
            "description": "The user/group ID",
            "type": "integer"
          },
          "initials": {
            "description": "The user/group display initials (ex. 'JP', 'A')",
            "type": "string"
          },
          "last_name": {
            "description": "The user's last name",
            "type": "string"
          },
          "leader_id": {
            "description": "The group leader's user ID",
            "type": "integer"
          },
          "middle_name": {
            "description": "The user's middle name",
            "type": "string"
          },
          "name": {
            "description": "The user's login name.  If this is a group, then it is the group name",
            "type": "string"
          },
          "name_formatted": {
            "description": "The user/group display name (ex. 'John Q. Public', 'AdminUserGroup')",
            "type": "string"
          },
          "office_location": {
            "description": "The user's office location",
            "type": "string"
          },
          "pager": {
            "description": "The user's office mobile phone number",
            "type": "string"
          },
          "personal_email": {
            "description": "The user's personal email address",
            "type": "string"
          },
          "personal_interests": {
            "description": "The user's personal interests and hobbies",
            "type": "string"
          },
          "personal_url_1": {
            "description": "The user's bookmarked url link 1",
            "type": "string"
          },
          "personal_url_2": {
            "description": "The user's bookmarked url link 2",
            "type": "string"
          },
          "personal_url_3": {
            "description": "The user's bookmarked url link 3",
            "type": "string"
          },
          "personal_website": {
            "description": "The user's personal home page",
            "type": "string"
          },
          "photo_id": {
            "description": "The ID of the node for the user's profile photo",
            "type": "integer"
          },
          "photo_url": {
            "description": "The user's photo url",
            "type": "string"
          },
          "time_zone": {
            "description": "The user's time zone",
            "type": "integer"
          },
          "display_language": {
            "description": "The user's preferred display language",
            "type": "string"
          },
          "privilege_content_manager": {
            "type": "boolean",
            "description": "TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_login": {
            "type": "boolean",
            "description": "TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_groups": {
            "type": "boolean",
            "description": "TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_modify_users": {
            "type": "boolean",
            "description": "TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_public_access": {
            "type": "boolean",
            "description": "TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_system_admin_rights": {
            "type": "boolean",
            "description": "TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "privilege_user_admin_rights": {
            "type": "boolean",
            "description": "TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators"
          },
          "title": {
            "description": "The user's title",
            "type": "string"
          },
          "type": {
            "description": "Member Type of the user represented as an integer (0 for User, 1 for Group)",
            "type": "integer"
          },
          "type_name": {
            "description": "Member Type of the user in a human-readable format",
            "type": "string"
          }
        }
      },
      "members_V2PropertiesUser": {
        "type": "object",
        "properties": {
          "access_date_last": {
            "description": "(Can be time-zone aware) The last time this item was accessed by this user",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "members_V2ResponseAccessed": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Collection_BrowseMembers"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          },
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2ResultAccessed"
            }
          }
        }
      },
      "members_V2ResponseAssignments": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2ResultAssignments"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResponseEmpty": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_EmptyResult"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResponseMembersCreate": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2ResultMembersSearch"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResponseMembersSearch": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Collection_BrowseMembers"
            }
          },
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2ResultMembersSearch"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResponseBrowseMembersSearch": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Collection_BrowseMembers"
            }
          },
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2ResultMembersSearch"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResponseMembersGet": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2ResultMembersSearch"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResponseCollection": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Result"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResponseCollectionFavorites": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Collection_ListFavorites"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          },
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Result"
            }
          }
        }
      },
      "members_V2ResponseCollectionReserved": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Collection_ListReserved"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          },
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Result"
            }
          }
        }
      },
      "members_V2ResponseCollectionFavoritesTab": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2ResultFavoritesTab"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResponseElement": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Result"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2Result": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/members_V2Data"
            }
          }
        }
      },
      "members_V2ResultFavoritesTab": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/members_V2PropertiesFavoritesTab"
            }
          }
        }
      },
      "members_V2ResultAccessed": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/members_V2DataAccessed"
            }
          }
        }
      },
      "members_V2ResultAssignments": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/members_V2DataAssignments"
            }
          }
        }
      },
      "members_V2ResultMembersSearch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/members_V2DataMembersSearch"
            }
          }
        }
      },
      "members_V2ResponseGroupsSearch": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2ResultGroupsSearch"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResultGroupsSearch": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/members_V2DataGroupsSearch"
            }
          }
        }
      },
      "members_V2DataGroupsSearch": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Group Search",
            "items": {
              "$ref": "#/components/schemas/members_V2PropertiesGroupsSearch"
            }
          }
        }
      },
      "members_V2PropertiesGroupsSearch": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean",
            "description": "TRUE if the user or group has been deleted, FALSE otherwise"
          },
          "id": {
            "description": "The user/group ID",
            "type": "integer"
          },
          "leader_id": {
            "description": "The group leader's user ID",
            "type": "integer"
          },
          "name": {
            "description": "The user's login name.  If this is a group, then it is the group name",
            "type": "string"
          },
          "name_formatted": {
            "description": "The user/group display name (ex. 'John Q. Public', 'AdminUserGroup')",
            "type": "string"
          },
          "initials": {
            "description": "The user/group display initials (ex. 'JP', 'A')",
            "type": "string"
          },
          "type": {
            "description": "Member Type of the user represented as an integer (0 for User, 1 for Group)",
            "type": "integer"
          },
          "type_name": {
            "description": "Member Type of the user in a human-readable format",
            "type": "string"
          }
        }
      },
      "members_V2ResponseObjectTypes": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2ResultObjectTypes"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "members_V2ResultObjectTypes": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/members_V2ListObjectTypes"
            }
          }
        }
      },
      "members_V2ListObjectTypes": {
        "type": "object",
        "properties": {
          "objects": {
            "type": "array",
            "description": "Objects",
            "items": {
              "$ref": "#/components/schemas/members_V2DataObjectType"
            }
          }
        }
      },
      "members_V2DataObjectType": {
        "type": "object",
        "properties": {
          "type": {
            "description": "The value of the Object Type",
            "type": "integer"
          },
          "type_name": {
            "description": "The display name of the Object Type",
            "type": "string"
          }
        }
      },
      "members_V2Collection": {
        "type": "object",
        "properties": {
          "paging": {
            "type": "array",
            "description": "Paging Information",
            "items": {
              "$ref": "#/components/schemas/members_V2Paging"
            }
          }
        }
      },
      "members_V2Collection_BrowseMembers": {
        "type": "object",
        "properties": {
          "paging": {
            "type": "array",
            "description": "Paging Information",
            "items": {
              "$ref": "#/components/schemas/members_V2Paging"
            }
          },
          "sorting": {
            "type": "array",
            "description": "Sorting information",
            "items": {
              "$ref": "#/components/schemas/members_V2Sorting"
            }
          }
        }
      },
      "members_V2Collection_ListFavorites": {
        "type": "object",
        "properties": {
          "paging": {
            "type": "array",
            "description": "Paging Information",
            "items": {
              "$ref": "#/components/schemas/members_V2Paging"
            }
          },
          "sorting": {
            "type": "array",
            "description": "Sorting information",
            "items": {
              "$ref": "#/components/schemas/members_V2Sorting"
            }
          }
        }
      },
      "members_V2Collection_ListReserved": {
        "type": "object",
        "properties": {
          "paging": {
            "type": "array",
            "description": "Paging Information",
            "items": {
              "$ref": "#/components/schemas/members_V2Paging"
            }
          },
          "sorting": {
            "type": "array",
            "description": "Sorting information",
            "items": {
              "$ref": "#/components/schemas/members_V2Sorting"
            }
          }
        }
      },
      "members_V2Paging": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "limit"
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "links"
          },
          "page": {
            "type": "integer",
            "description": "page"
          },
          "page_total": {
            "type": "integer",
            "description": "page total"
          },
          "range_max": {
            "type": "integer",
            "description": "range max"
          },
          "range_min": {
            "type": "integer",
            "description": "range min"
          },
          "total_count": {
            "type": "integer",
            "description": "total count"
          }
        }
      },
      "members_V2Sorting": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/members_V2Sort"
            }
          }
        }
      },
      "members_V2Sort": {
        "type": "object"
      },
      "members_DescriptionMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Description in English"
          },
          "de": {
            "type": "string",
            "description": "Beschreibung in Deutsch"
          }
        }
      },
      "members_NameMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Name in English"
          },
          "de": {
            "type": "string",
            "description": "Name auf Deutsch"
          }
        }
      },
      "multipart_GetSettings": {
        "type": "object",
        "properties": {
          "is_enabled": {
            "type": "boolean",
            "description": "Whether Large File Upload is enabled or not"
          },
          "max_size": {
            "type": "integer",
            "description": "Maximum allowed size in bytes"
          },
          "min_size": {
            "type": "integer",
            "description": "Minimum allowed size in bytes"
          }
        }
      },
      "multipart_StartUpload": {
        "type": "object",
        "properties": {
          "upload_key": {
            "type": "string",
            "description": "The key to identify the Large File Upload session"
          },
          "max_retries": {
            "type": "integer",
            "description": "Number of retries allowed per part"
          },
          "num_parts": {
            "type": "integer",
            "description": "Number of parts expected in Large File Upload session"
          },
          "part_size": {
            "type": "integer",
            "description": "Maximum size of each file part in bytes"
          }
        }
      },
      "members_V2GetSessions": {
        "type": "object",
        "properties": {
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          },
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2GetSessionsResults"
            }
          }
        }
      },
      "members_V2GetSessionsResults": {
        "type": "object",
        "properties": {
          "active_sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2SessionsActiveSessions"
            }
          },
          "previous_sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2SessionsPreviousSessions"
            }
          }
        }
      },
      "members_V2SessionsActiveSessions": {
        "type": "object",
        "properties": {
          "ok": {
            "description": "Whether or not the active session information was successfully retrieved.",
            "type": "boolean"
          },
          "recs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2SessionsActiveSessionsRecs"
            }
          }
        }
      },
      "members_V2SessionsActiveSessionsRecs": {
        "type": "array",
        "description": "The array of the active session information.",
        "items": {
          "$ref": "#/components/schemas/members_V2SessionsActiveSessionsRecsDatePairs"
        }
      },
      "members_V2SessionsActiveSessionsRecsDatePairs": {
        "type": "object",
        "properties": {
          "duration": {
            "description": "For how long the current session was active in minutes.",
            "type": "integer"
          },
          "create_time": {
            "description": "When the current session was created.",
            "type": "string",
            "format": "date-time"
          },
          "last_activity": {
            "description": "When the last activity of the current session happened.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "members_V2SessionsPreviousSessions": {
        "type": "object",
        "properties": {
          "ok": {
            "description": "Whether or not the previous session information was successfully retrieved.",
            "type": "boolean"
          },
          "recs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      },
      "nicknames_Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "nicknames_V2Empty": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "results",
            "items": {
              "$ref": "#/components/schemas/nicknames_V2EmptyResults"
            }
          },
          "links": {
            "type": "array",
            "description": "links",
            "items": {
              "$ref": "#/components/schemas/nicknames_V2DataLinks"
            }
          }
        }
      },
      "nicknames_V2EmptyResults": {
        "type": "object"
      },
      "nicknames_V2Links": {
        "type": "object",
        "properties": {
          "self": {
            "type": "array",
            "description": "Self link",
            "items": {
              "$ref": "#/components/schemas/nicknames_V2Link"
            }
          }
        }
      },
      "nicknames_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "nicknames_V2DataLinks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/nicknames_V2Links"
            }
          }
        }
      },
      "nicknames_V2Result": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/nicknames_V2Data"
            }
          }
        }
      },
      "nicknames_V2Data": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/nicknames_V2Properties"
            }
          }
        }
      },
      "nicknames_V2ResponseElement": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nicknames_V2Result"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nicknames_V2DataLinks"
            }
          }
        }
      },
      "nicknames_V2Properties": {
        "type": "object",
        "properties": {
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "create_date": {
            "description": "The date that the item was created",
            "type": "string"
          },
          "create_user_id": {
            "description": "The id of the user who created the item",
            "type": "integer"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/members_DescriptionMultilingual"
          },
          "external_create_date": {
            "description": "External create date",
            "type": "string",
            "format": "date"
          },
          "external_identity": {
            "description": "External identity",
            "type": "string"
          },
          "external_identity_type": {
            "description": "External identity type",
            "type": "string"
          },
          "external_modify_date": {
            "description": "External modify date",
            "type": "string",
            "format": "date"
          },
          "external_source": {
            "description": "External source",
            "type": "string"
          },
          "favorite": {
            "description": "Indicates if this item has been favorited by the current user",
            "type": "boolean"
          },
          "guid": {
            "description": "Globally unique id",
            "type": "string"
          },
          "icon": {
            "description": "The item's icon",
            "type": "string"
          },
          "icon_large": {
            "description": "The item's icon (large)",
            "type": "string"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "modify_date": {
            "description": "The date on which the item was last modified",
            "type": "string",
            "format": "date"
          },
          "modify_user_id": {
            "description": "The id of the user who modified the item",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/members_NameMultilingual"
          },
          "owner": {
            "description": "The name of the owner of this item",
            "type": "string"
          },
          "owner_group_id": {
            "description": "The group id of the owner of this item",
            "type": "integer"
          },
          "owner_user_id": {
            "description": "The user id of the owner of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "The object id of the item's parent",
            "type": "integer"
          },
          "reserved": {
            "description": "Whether or not this item has been reserved",
            "type": "boolean"
          },
          "reserved_date": {
            "description": "The date on which the item was reserved",
            "type": "string",
            "format": "date"
          },
          "reserved_user_id": {
            "description": "The id of the user who has this item reserved",
            "type": "integer"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "versions_control_advanced": {
            "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
            "type": "boolean"
          },
          "volume_id": {
            "description": "The id of the volume to which this item belongs",
            "type": "integer"
          }
        }
      },
      "nodes_bodyParam": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/nodes_bodyParam2"
          }
        }
      },
      "nodes_bodyParam2": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string"
          },
          "de_DE": {
            "type": "string"
          }
        }
      },
      "nodes_GetRequestStatus": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "num_users": {
                "type": "integer",
                "description": "the number of users that have requested for reservation, not including the current user"
              },
              "reserved_by": {
                "type": "string",
                "description": "the username of the user who is currently reserving the given node"
              },
              "reserved_date": {
                "type": "string",
                "format": "date-time",
                "description": "the datetime that the given node was reserved"
              },
              "already_requested": {
                "type": "boolean",
                "description": "Returns true if the current user has already requested"
              }
            }
          }
        }
      },
      "nodes_Tag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "nodes_AddableTypesInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/nodes_ActionData"
          },
          "definitions": {
            "$ref": "#/components/schemas/nodes_Definitions"
          },
          "definitions_map": {
            "$ref": "#/components/schemas/nodes_DefinitionsMap"
          },
          "definitions_order": {
            "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "nodes_AuditInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/nodes_ActionData"
          },
          "definitions": {
            "$ref": "#/components/schemas/nodes_Definitions"
          },
          "definitions_order": {
            "description": "The order items should be displayed in",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "description": "The max number of records that can be returned",
            "type": "integer"
          },
          "offset_key": {
            "$ref": "#/components/schemas/nodes_AuditOffsetKey"
          },
          "page": {
            "description": "Number of the current page",
            "type": "integer"
          },
          "page_total": {
            "description": "Total number of pages available",
            "type": "integer"
          },
          "total": {
            "description": "Total audit records available",
            "type": "integer"
          },
          "sort": {
            "description": "Order and column name on which the results are sorted",
            "type": "string"
          }
        }
      },
      "nodes_AuditResult2": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Collection"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2AuditResult"
            }
          }
        }
      },
      "nodes_V2AuditResult": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2AuditData"
            }
          }
        }
      },
      "nodes_V2AuditData": {
        "type": "object",
        "properties": {
          "audit": {
            "description": "The audit data fields",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2AuditDataFields"
            }
          }
        }
      },
      "nodes_V2AuditDataFields": {
        "type": "object",
        "properties": {
          "agent_id": {
            "description": "The ID of the agent which performed the audit event on behalf of a user",
            "type": "integer"
          },
          "audit_date": {
            "description": "(Can be time-zone aware) The audit date",
            "type": "string",
            "format": "date"
          },
          "id": {
            "description": "The node ID (which these audit records belong to)",
            "type": "integer"
          },
          "user_id": {
            "description": "The user ID associated with the audit event",
            "type": "integer"
          },
          "audit_language_code": {
            "description": "The audit language code",
            "type": "string"
          },
          "audit_name": {
            "description": "The audit name",
            "type": "string"
          }
        }
      },
      "nodes_AuditOffsetKey": {
        "type": "object",
        "properties": {
          "Identity": {
            "description": "EventID of last audit record returned",
            "type": "integer"
          },
          "NoMoreData": {
            "description": "Returns a false if not all audit records were returned in data, true if all were returned",
            "type": "boolean"
          }
        }
      },
      "nodes_BrowseResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_NodeInfo"
            }
          },
          "definitions": {
            "$ref": "#/components/schemas/nodes_Definitions"
          },
          "definitions_map": {
            "$ref": "#/components/schemas/nodes_DefinitionsMap"
          },
          "definitions_order": {
            "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "description": "Maximum number of items returned per page",
            "type": "integer"
          },
          "page": {
            "description": "Number of the current page",
            "type": "integer"
          },
          "page_total": {
            "description": "Total number of pages available",
            "type": "integer"
          },
          "range_max": {
            "description": "Number of the ending item for this page",
            "type": "integer"
          },
          "range_min": {
            "description": "Number of the starting item for this page",
            "type": "integer"
          },
          "sort": {
            "description": "Order and column name on which the results are sorted",
            "type": "string"
          },
          "total_count": {
            "description": "Total number of items available",
            "type": "integer"
          },
          "where_facet": {
            "description": "Facets on which results are filtered",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "where_name": {
            "description": "Name on which results are filtered",
            "type": "integer"
          },
          "where_type": {
            "description": "Types on which results are filtered",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "nodes_BrowseResult2": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Collection"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Result"
            }
          }
        }
      },
      "nodes_BrowseReleasesResult2": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Collection"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2ReleaseResult"
            }
          }
        }
      },
      "nodes_ListContents": {
        "type": "object",
        "properties": {
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_ListContentsResult"
            }
          }
        }
      },
      "nodes_CellMetadata": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/nodes_CellMetadataData"
          },
          "definitions": {
            "$ref": "#/components/schemas/nodes_CellMetadataDefinitions"
          }
        }
      },
      "nodes_CreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the node which was created"
          }
        }
      },
      "nodes_CopyResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Information about the node",
            "items": {
              "$ref": "#/components/schemas/nodes_V1DataPost"
            }
          }
        }
      },
      "nodes_MoveResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Information about the node",
            "items": {
              "$ref": "#/components/schemas/nodes_V1DataPost"
            }
          }
        }
      },
      "nodes_RolesInfo": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "object"
          }
        }
      },
      "nodes_CategoriesInfo": {
        "type": "object",
        "properties": {
          "{attribute_key}": {
            "type": "string",
            "description": "Attribute key in the format {category_id}_[{set_id}_{set_row}]_{attribute_id}"
          }
        }
      },
      "nodes_FacetInfo": {
        "type": "object",
        "properties": {
          "available_values": {
            "description": "Information on the available unselected facets.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "$ref": "#/components/schemas/nodes_FacetInfoProperties"
          },
          "selected_values": {
            "description": "Information on the selected facets from the query string's where_facets clause",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "nodes_FacetInfoProperties": {
        "type": "object"
      },
      "nodes_FacetsInfo": {
        "type": "object",
        "properties": {
          "facets": {
            "$ref": "#/components/schemas/nodes_FacetInfo"
          }
        }
      },
      "nodes_InfoResult": {
        "type": "object",
        "properties": {
          "addable_types": {
            "description": "The object types (including icon information) that can be added to this node",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_AddableTypes"
            }
          },
          "available_actions": {
            "description": "The actions that can be performed on this node",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_AvailableActions"
            }
          },
          "available_roles": {
            "description": "The available roles for this node",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_AvailableRoles"
            }
          },
          "data": {
            "$ref": "#/components/schemas/nodes_Data"
          },
          "definitions": {
            "$ref": "#/components/schemas/nodes_InfoDefinitions"
          },
          "definitions_base": {
            "description": "The definitions that are common to all nodes",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "definitions_order": {
            "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "description": "An ID representing the type of the object",
            "type": "integer"
          },
          "type_info": {
            "$ref": "#/components/schemas/nodes_TypeInfo"
          },
          "type_name": {
            "description": "The name of the node's object type",
            "type": "string"
          }
        }
      },
      "nodes_AddableTypes": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string",
            "description": "A relative URL to the object's icon"
          },
          "type": {
            "type": "integer",
            "description": "An ID representing the type of the object"
          },
          "type_name": {
            "type": "string",
            "description": "The name of the type of object"
          }
        }
      },
      "nodes_AvailableActions": {
        "type": "object",
        "properties": {
          "parameterless": {
            "type": "boolean",
            "description": "TRUE if this action has parameters, FALSE otherwise"
          },
          "read_only": {
            "type": "boolean",
            "description": "TRUE if this action does not modify data, FALSE otherwise"
          },
          "type": {
            "type": "string",
            "description": "The type of action"
          },
          "type_name": {
            "type": "string",
            "description": "The name of action"
          },
          "webnode_signature": {
            "type": "string",
            "description": "A unique name for this action"
          }
        }
      },
      "nodes_AvailableRoles": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of role"
          },
          "type_name": {
            "type": "string",
            "description": "The name of role"
          }
        }
      },
      "nodes_Data": {
        "type": "object",
        "properties": {
          "advanced_versioning": {
            "description": "Whether or not this item uses standard or advanced versioning",
            "type": "boolean"
          },
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "create_date": {
            "type": "string",
            "description": "(Can be time-zone aware) Creation date of this object"
          },
          "create_user_id": {
            "type": "integer",
            "description": "The ID of the user "
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/nodes_DescriptionMultilingual"
          },
          "external_create_date": {
            "type": "string",
            "format": "date",
            "description": "External create date"
          },
          "external_identity": {
            "type": "string",
            "description": "External identity"
          },
          "external_identity_type": {
            "type": "string",
            "description": "External identity type"
          },
          "external_modify_date": {
            "type": "string",
            "format": "date",
            "description": "External modify date"
          },
          "external_source": {
            "type": "string",
            "description": "External source"
          },
          "guid": {
            "type": "string",
            "description": "Global unique identifier"
          },
          "hidden": {
            "description": "Indicates if the item is hidden",
            "type": "boolean"
          },
          "icon": {
            "description": "Path to the type specific icon",
            "type": "string"
          },
          "icon_large": {
            "description": "Path to the type specific icon (larger sized)",
            "type": "string"
          },
          "id": {
            "type": "integer",
            "description": "A unique ID for this object"
          },
          "modify_date": {
            "type": "string",
            "description": "(Can be time-zone aware) Date when this object was modified"
          },
          "modify_user_id": {
            "type": "integer",
            "description": "The ID of the user who modified this object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/nodes_NameMultilingual"
          },
          "original_id": {
            "type": "integer",
            "description": "ID of original object if this object is a shortcut"
          },
          "owner_group_id": {
            "type": "integer",
            "description": "The ID of the group to which the owner of this object belongs"
          },
          "owner_user_id": {
            "type": "integer",
            "description": "The ID of the user who owns this object"
          },
          "parent_id": {
            "type": "integer",
            "description": "The ID of the parent object of which this object is a child"
          },
          "reserved": {
            "type": "boolean",
            "description": "TRUE if this object is reserved, FALSE otherwise"
          },
          "reserved_date": {
            "type": "string",
            "description": "(Can be time-zone aware) Date when this object was reserved"
          },
          "reserved_user_id": {
            "type": "integer",
            "description": "The ID of the user or group that has reserved this object"
          },
          "versionable": {
            "type": "boolean",
            "description": "TRUE if this object has versionable content, false otherwise"
          },
          "volume_id": {
            "type": "integer",
            "description": "The ID of the volume"
          }
        }
      },
      "nodes_Properties": {
        "type": "object",
        "properties": {
          "create_date": {
            "description": "Date of creation",
            "type": "string",
            "format": "date-time"
          },
          "modify_date": {
            "description": "Date of last modification",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "guid": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "parent_id": {
            "description": "Parent's ID",
            "type": "integer"
          },
          "volume_id": {
            "type": "integer"
          }
        }
      },
      "nodes_AncestorsInfo": {
        "type": "object",
        "properties": {
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_AncestorInfo"
            }
          }
        }
      },
      "nodes_AncestorInfo": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifer of an item, as number",
            "type": "integer"
          },
          "name": {
            "description": "Item name",
            "type": "string"
          },
          "volume_id": {
            "description": "ID of the volume under which the item is located",
            "type": "integer"
          },
          "parent_id": {
            "description": "Parent's ID",
            "type": "integer"
          },
          "type": {
            "description": "Item type",
            "type": "integer"
          },
          "type_name": {
            "description": "Item type name",
            "type": "string"
          }
        }
      },
      "nodes_ColumnsInfo": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_ColumnInfo"
            }
          }
        }
      },
      "nodes_ColumnInfo": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifer of column, as number",
            "type": "integer"
          },
          "locked": {
            "description": "Indicates if this is a non-modifiable column",
            "type": "integer"
          },
          "alignment": {
            "description": "Horizontal alignment",
            "type": "string",
            "enum": [
              "left",
              "center",
              "right"
            ]
          },
          "column_key": {
            "description": "Unique identifier of column as string, used for e.g. sorting or getting value",
            "type": "string"
          },
          "column_display_width": {
            "description": "Width of column in letters, maximum number of letters to display",
            "type": "integer"
          },
          "column_em_width": {
            "description": "Width of column in em units",
            "type": "integer"
          },
          "data_source": {
            "description": "Name of value provider, which gives value of this column",
            "type": "string"
          },
          "data_type": {
            "type": "integer",
            "description": "Data Type (5 = Boolean,-7 = Date,13 = DatePopup,401 = DateTime,2 = Integer,12 = IntegerPopup,-1 = String,10 = StringPopup,305 = SubType,14 = User,19 = UserPopup)",
            "enum": [
              5,
              -7,
              13,
              401,
              2,
              12,
              -1,
              10,
              305,
              14,
              19
            ]
          },
          "display_as_link": {
            "description": "Indicates display of this column as link",
            "type": "boolean"
          },
          "name": {
            "description": "Column name",
            "type": "string"
          },
          "display_value": {
            "description": "Display format string ('%value%' is to be replaced with the property value)",
            "type": "string"
          },
          "is_default": {
            "description": "Indicates if column is always displayed",
            "type": "boolean"
          },
          "is_system_column": {
            "description": "Indicates if this column is fixed system column (i.e. columns that come defined out of the box and can't be removed)",
            "type": "boolean"
          },
          "long_text": {
            "type": "integer",
            "description": "How to handle textual column values (Wrap = 0, NoWrap = 1, Truncate = 2)",
            "enum": [
              0,
              1,
              2
            ]
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/nodes_NameMultilingual"
          },
          "new_window": {
            "description": "Indicates, in case display_as_link is true, if the link has to be opened in new window",
            "type": "boolean"
          },
          "public_access": {
            "description": "Public access permissions",
            "type": "integer"
          },
          "ready": {
            "description": "Indicates if columns is ready to be displayed.",
            "type": "boolean"
          },
          "sortable": {
            "description": "Indicates if this column is sortable.",
            "type": "boolean"
          },
          "title_text": {
            "description": "<tooltip?>",
            "type": "string"
          },
          "url": {
            "description": "Gives, in case display_as_link is true, target URL",
            "type": "string"
          }
        }
      },
      "nodes_NodeInfo": {
        "type": "object",
        "properties": {
          "volume_id": {
            "description": "ID of the volume to which this item belongs",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "ID of the parent container",
            "type": "integer"
          },
          "name": {
            "description": "Item name",
            "type": "string"
          },
          "type": {
            "description": "Item type, as a number",
            "type": "integer"
          },
          "description": {
            "description": "Item description",
            "type": "string"
          },
          "create_date": {
            "description": "(Can be time-zone aware) Date of creation",
            "type": "string",
            "format": "date-time"
          },
          "modify_date": {
            "description": "(Can be time-zone aware) Date of last modification",
            "type": "string",
            "format": "date-time"
          },
          "reserved": {
            "description": "Is this item reserved",
            "type": "boolean"
          },
          "reserved_user_id": {
            "description": "ID of user that reserved this item",
            "type": "integer"
          },
          "reserved_date": {
            "description": "(Can be time-zone aware) Date this item was reserved",
            "type": "string",
            "format": "date-time"
          },
          "hidden": {
            "description": "Indicates if the item is hidden",
            "type": "boolean"
          },
          "icon": {
            "description": "Path to the icon for the type of this item",
            "type": "string"
          },
          "mime_type": {
            "description": "Mime type of the object",
            "type": "string"
          },
          "original_id": {
            "description": "ID of original item - used when this item is a shortcut",
            "type": "integer"
          },
          "type_name": {
            "description": "Item type, as a word",
            "type": "string"
          },
          "container": {
            "description": "Is this item a container",
            "type": "boolean"
          },
          "size": {
            "description": "Size of this item",
            "type": "integer"
          },
          "perm_see": {
            "type": "boolean"
          },
          "perm_see_contents": {
            "type": "boolean"
          },
          "perm_modify": {
            "type": "boolean"
          },
          "perm_modify_attributes": {
            "type": "boolean"
          },
          "perm_modify_permissions": {
            "type": "boolean"
          },
          "perm_create": {
            "type": "boolean"
          },
          "perm_delete": {
            "type": "boolean"
          },
          "perm_delete_versions": {
            "type": "boolean"
          },
          "perm_reserve": {
            "type": "boolean"
          },
          "perm_add_major_version": {
            "type": "boolean"
          },
          "cell_metadata": {
            "$ref": "#/components/schemas/nodes_CellMetadata"
          },
          "menu": {
            "type": "string",
            "description": ""
          },
          "favorite": {
            "description": "Whether this node has been favorited by the current user",
            "type": "boolean"
          },
          "size_formatted": {
            "description": "Size of this item with an appropriate units based on type (i.e. 11 items or 7 KB)",
            "type": "string"
          },
          "reserved_user_login": {
            "type": "string"
          },
          "action_url": {
            "description": "URL for getting available actions on this item",
            "type": "string"
          },
          "parent_id_url": {
            "description": "URL for getting metadata about this item's parent container",
            "type": "string"
          },
          "actions": {
            "type": "array",
            "description": "Actions possible on this node (only with query-parameter actions=true)",
            "items": {
              "$ref": "#/components/schemas/nodes_ActionInfo"
            }
          }
        }
      },
      "nodes_ActionsInfo": {
        "type": "object",
        "properties": {
          "actions": {
            "type": "array",
            "description": "Actions possible on this node. The returned actions also includes spacing (represented by dashes '-')",
            "items": {
              "type": "object",
              "$ref": "#/components/schemas/nodes_ActionInfo"
            }
          },
          "data": {
            "$ref": "#/components/schemas/nodes_ActionData"
          },
          "definitions": {
            "$ref": "#/components/schemas/nodes_Definitions"
          },
          "definitions_map": {
            "$ref": "#/components/schemas/nodes_DefinitionsMap"
          },
          "definitions_order": {
            "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "nodes_ActionInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The action's name (as shown in UI representation)"
          },
          "url": {
            "type": "string",
            "description": "The URL to be called on the action's execution"
          },
          "children": {
            "description": "List of sub-actions available. This appears when the action is a sub-menu",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_ActionInfoChild"
            }
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "nodes_ActionInfoChild": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The action's name (as shown in UI representation)"
          },
          "url": {
            "type": "string",
            "description": "The URL to be called on the action's execution"
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "nodes_ActionData": {
        "type": "object"
      },
      "nodes_InfoDefinitions": {
        "type": "object"
      },
      "nodes_Definitions": {
        "type": "object"
      },
      "nodes_DefinitionsBase": {
        "type": "object"
      },
      "nodes_DefinitionsMap": {
        "type": "object"
      },
      "nodes_DefinitionsOrder": {
        "type": "object"
      },
      "nodes_ThumbnailInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/nodes_ThumbnailInfoData"
          },
          "definitions": {
            "$ref": "#/components/schemas/nodes_ThumbnailInfoDefinitions"
          },
          "definitions_map": {
            "type": "object",
            "description": "This is populated with children of item(s) in definitions_order if applicable. These items will also be in definitions and data. Always returns empty for addablenodetypes"
          },
          "definitions_order": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order"
          }
        }
      },
      "nodes_ThumbnailInfoData": {
        "type": "object",
        "properties": {
          "medium": {
            "type": "string",
            "description": "Path of the thumbnail resource ( e.g. 'api/v1/nodes/{id}/thumbnails/medium/content' )"
          }
        }
      },
      "nodes_ThumbnailInfoDefinitions": {
        "type": "object",
        "properties": {
          "medium": {
            "$ref": "#/components/schemas/nodes_ThumbnailInfoDefinitionsSize"
          }
        }
      },
      "nodes_ThumbnailInfoDefinitionsSize": {
        "type": "object",
        "properties": {
          "file_size": {
            "type": "integer",
            "description": "Size of the thumbnail in bytes"
          },
          "mime_type": {
            "type": "string",
            "description": "MIME type of the thumbnail"
          },
          "type": {
            "type": "string",
            "description": "The thumbnail type (currently only the medium type is supported)"
          },
          "url": {
            "type": "string",
            "description": "Path of the thumbnail resource ( e.g. 'api/v1/nodes/{id}/thumbnails/medium/content' )"
          }
        }
      },
      "nodes_TypeInfo": {
        "type": "object",
        "properties": {
          "advanced_versioning": {
            "description": "True if this document has advanced versioning, false otherwise",
            "type": "boolean"
          },
          "container": {
            "description": "True if this object is a container",
            "type": "boolean"
          }
        }
      },
      "nodes_V2Collection": {
        "type": "object",
        "properties": {
          "paging": {
            "type": "array",
            "description": "Paging Information",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Paging"
            }
          },
          "sorting": {
            "type": "array",
            "description": "Sorting information",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Sorting"
            }
          }
        }
      },
      "nodes_V2Columns": {
        "type": "object",
        "properties": {
          "data_type": {
            "type": "integer",
            "description": "data type"
          },
          "key": {
            "type": "string",
            "description": "key"
          },
          "name": {
            "type": "string",
            "description": "name"
          },
          "sort_key": {
            "type": "string",
            "description": "sort_key"
          }
        }
      },
      "nodes_V2Data": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "description": "columns",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Columns"
            }
          },
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Properties"
            }
          }
        }
      },
      "nodes_V2ReleaseData": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "description": "columns",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Columns"
            }
          },
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/nodes_V2ReleaseProperties"
            }
          }
        }
      },
      "nodes_ListContentsData": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/nodes_ListContentsProperties"
            }
          }
        }
      },
      "nodes_V2DataPost": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Properties"
            }
          }
        }
      },
      "nodes_V2SystemAttributesDataPost": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Properties"
            }
          },
          "system_attributes": {
            "type": "array",
            "description": "System Attributes",
            "items": {
              "$ref": "#/components/schemas/nodes_V2SystemAttributes"
            }
          }
        }
      },
      "nodes_V2DataLinks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Links"
            }
          }
        }
      },
      "nodes_V2Empty": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "description": "results",
            "items": {
              "$ref": "#/components/schemas/nodes_V2EmptyResults"
            }
          },
          "links": {
            "type": "array",
            "description": "links",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          }
        }
      },
      "nodes_V2EmptyResults": {
        "type": "object"
      },
      "nodes_V2Links": {
        "type": "object",
        "properties": {
          "self": {
            "type": "array",
            "description": "Self link",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Link"
            }
          }
        }
      },
      "nodes_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "nodes_V2Paging": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "limit"
          },
          "links": {
            "type": "object",
            "description": "links"
          },
          "page": {
            "type": "integer",
            "description": "page"
          },
          "page_total": {
            "type": "integer",
            "description": "page total"
          },
          "range_max": {
            "type": "integer",
            "description": "range max"
          },
          "range_min": {
            "type": "integer",
            "description": "range min"
          },
          "total_count": {
            "type": "integer",
            "description": "total count"
          }
        }
      },
      "nodes_V2Properties": {
        "type": "object",
        "properties": {
          "advanced_versioning": {
            "description": "Whether or not this item uses standard or advanced versioning",
            "type": "boolean"
          },
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "create_date": {
            "description": "(Can be time-zone aware) The date that the item was created",
            "type": "string"
          },
          "create_user_id": {
            "description": "The id of the user who created the item",
            "type": "integer"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/nodes_DescriptionMultilingual"
          },
          "external_create_date": {
            "description": "External create date",
            "type": "string",
            "format": "date"
          },
          "external_identity": {
            "description": "External identity",
            "type": "string"
          },
          "external_identity_type": {
            "description": "External identity type",
            "type": "string"
          },
          "external_modify_date": {
            "description": "External modify date",
            "type": "string",
            "format": "date"
          },
          "external_source": {
            "description": "External source",
            "type": "string"
          },
          "favorite": {
            "description": "Indicates if this item has been favorited by the current user",
            "type": "boolean"
          },
          "guid": {
            "description": "Globally unique id",
            "type": "string"
          },
          "hidden": {
            "description": "Indicates if the item is hidden",
            "type": "boolean"
          },
          "icon": {
            "description": "The item's icon",
            "type": "string"
          },
          "icon_large": {
            "description": "The item's icon (large)",
            "type": "string"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "modify_date": {
            "description": "(Can be time-zone aware) The date on which the item was last modified",
            "type": "string",
            "format": "date"
          },
          "modify_user_id": {
            "description": "The id of the user who modified the item",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/nodes_NameMultilingual"
          },
          "owner": {
            "description": "The name of the owner of this item",
            "type": "string"
          },
          "owner_group_id": {
            "description": "The group id of the owner of this item",
            "type": "integer"
          },
          "owner_user_id": {
            "description": "The user id of the owner of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "The object id of the item's parent",
            "type": "integer"
          },
          "reserved": {
            "description": "Whether or not this item has been reserved",
            "type": "boolean"
          },
          "reserved_date": {
            "description": "(Can be time-zone aware) The date on which the item was reserved",
            "type": "string"
          },
          "reserved_user_id": {
            "description": "The id of the user who has this item reserved",
            "type": "integer"
          },
          "status": {
            "description": "The item's status",
            "type": "integer"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "versionable": {
            "description": "TRUE if this item has versionable content, FALSE otherwise",
            "type": "boolean"
          },
          "versions_control_advanced": {
            "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
            "type": "boolean"
          },
          "volume_id": {
            "description": "The id of the volume to which this item belongs",
            "type": "integer"
          }
        }
      },
      "nodes_V2ReleaseProperties": {
        "type": "object",
        "properties": {
          "advanced_versioning": {
            "description": "Whether or not this item uses standard or advanced versioning",
            "type": "boolean"
          },
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "create_date": {
            "description": "(Can be time-zone aware) The date that the item was created",
            "type": "string"
          },
          "create_user_id": {
            "description": "The id of the user who created the item",
            "type": "integer"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/nodes_DescriptionMultilingual"
          },
          "external_create_date": {
            "description": "External create date",
            "type": "string",
            "format": "date"
          },
          "external_identity": {
            "description": "External identity",
            "type": "string"
          },
          "external_identity_type": {
            "description": "External identity type",
            "type": "string"
          },
          "external_modify_date": {
            "description": "External modify date",
            "type": "string",
            "format": "date"
          },
          "external_source": {
            "description": "External source",
            "type": "string"
          },
          "favorite": {
            "description": "Indicates if this item has been favorited by the current user",
            "type": "boolean"
          },
          "guid": {
            "description": "Globally unique id",
            "type": "string"
          },
          "has_generation": {
            "description": "Indicates if the release/revision has an associated Generation",
            "type": "boolean"
          },
          "hidden": {
            "description": "Indicates if the item is hidden",
            "type": "boolean"
          },
          "icon": {
            "description": "The item's icon",
            "type": "string"
          },
          "icon_large": {
            "description": "The item's icon (large)",
            "type": "string"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "locked": {
            "type": "boolean",
            "description": "Indicates if this is a non-modifiable release/revision"
          },
          "locked_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date when the release/revision was locked"
          },
          "locked_user_id": {
            "type": "integer",
            "description": "The ID of the user who locked this release/revision"
          },
          "modify_date": {
            "description": "(Can be time-zone aware) The date on which the item was last modified",
            "type": "string",
            "format": "date"
          },
          "modify_user_id": {
            "description": "The id of the user who modified the item",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/nodes_NameMultilingual"
          },
          "owner": {
            "description": "The name of the owner of this item",
            "type": "string"
          },
          "owner_group_id": {
            "description": "The group id of the owner of this item",
            "type": "integer"
          },
          "owner_user_id": {
            "description": "The user id of the owner of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "The object id of the item's parent",
            "type": "integer"
          },
          "release": {
            "description": "The number of the release",
            "type": "integer"
          },
          "reserved": {
            "description": "Whether or not this item has been reserved",
            "type": "boolean"
          },
          "reserved_date": {
            "description": "(Can be time-zone aware) The date on which the item was reserved",
            "type": "string"
          },
          "reserved_user_id": {
            "description": "The id of the user who has this item reserved",
            "type": "integer"
          },
          "revision": {
            "description": "The number of the revision",
            "type": "integer"
          },
          "status": {
            "description": "The item's status",
            "type": "integer"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "versionable": {
            "description": "TRUE if this item has versionable content, FALSE otherwise",
            "type": "boolean"
          },
          "versions_control_advanced": {
            "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
            "type": "boolean"
          },
          "volume_id": {
            "description": "The id of the volume to which this item belongs",
            "type": "integer"
          }
        }
      },
      "nodes_ListContentsProperties": {
        "type": "object",
        "properties": {
          "volume_id": {
            "description": "The ID of the volume to which this item belongs",
            "type": "integer"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "parent_id": {
            "description": "The object ID of the item's parent",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "create_date": {
            "description": "(Can be time-zone aware) The date that the item was created",
            "type": "string"
          },
          "create_user_id": {
            "description": "The ID of the user who created the item",
            "type": "integer"
          },
          "modify_date": {
            "description": "(Can be time-zone aware) The date on which the item was last modified",
            "type": "string",
            "format": "date"
          },
          "modify_user_id": {
            "description": "The ID of the user who modified the item",
            "type": "integer"
          },
          "reserved": {
            "description": "Whether or not this item has been reserved",
            "type": "boolean"
          },
          "reserved_user_id": {
            "description": "The ID of the user who has this item reserved",
            "type": "integer"
          },
          "reserved_date": {
            "description": "(Can be time-zone aware) The date on which the item was reserved",
            "type": "string"
          },
          "order": {
            "description": "The item's order (order 0 is Master) ",
            "type": "integer"
          },
          "icon": {
            "description": "The item's icon",
            "type": "string"
          },
          "hidden": {
            "description": "Indicates if the item is hidden",
            "type": "boolean"
          },
          "size": {
            "description": "The item's file size (in bytes)",
            "type": "integer"
          },
          "mime_type": {
            "description": "The item's MIME type",
            "type": "string"
          },
          "original_id": {
            "description": "The item's original ID",
            "type": "integer"
          }
        }
      },
      "nodes_V2SystemAttributes": {
        "type": "object",
        "properties": {
          "attribute_key": {
            "description": "A sample System Attribute",
            "type": "string"
          }
        }
      },
      "nodes_V2ResponseCollection": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Result"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Links"
            }
          }
        }
      },
      "nodes_V2ResponseElement": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Result"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          }
        }
      },
      "nodes_V2ResponseElementPost": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2ResultPost"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          }
        }
      },
      "nodes_V2ResponseElementSystemAttributesPost": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2SystemAttributesResultPost"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          }
        }
      },
      "nodes_V2Result": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Data"
            }
          }
        }
      },
      "nodes_V2ReleaseResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/nodes_V2ReleaseData"
            }
          }
        }
      },
      "nodes_ListContentsResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/nodes_ListContentsData"
            }
          }
        }
      },
      "nodes_V2ResultPost": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataPost"
            }
          }
        }
      },
      "nodes_V2SystemAttributesResultPost": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/nodes_V2SystemAttributesDataPost"
            }
          }
        }
      },
      "nodes_V2Sort": {
        "type": "object"
      },
      "nodes_V2Sorting": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Sort"
            }
          }
        }
      },
      "nodes_V2ResponseNodesActions": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2NodeActionsId"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Links"
            }
          }
        }
      },
      "nodes_V2NodeActionsId": {
        "type": "object",
        "properties": {
          "<id>": {
            "description": "ID",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2NodeActionsData"
            }
          }
        }
      },
      "nodes_V2NodeActionsData": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Actions"
            }
          },
          "map": {
            "description": "Map",
            "type": "object"
          },
          "order": {
            "description": "Order",
            "type": "string"
          }
        }
      },
      "nodes_V2Actions": {
        "type": "object",
        "properties": {
          "<action>": {
            "type": "array",
            "description": "Self link",
            "items": {
              "$ref": "#/components/schemas/nodes_V2Link"
            }
          }
        }
      },
      "nodes_v2ResponseUpdateCollection": {
        "type": "object",
        "properties": {
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_v2ResponseUpdateCollectionData"
            }
          }
        }
      },
      "nodes_v2ResponseUpdateCollectionData": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Update collection results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2UpdateCollectionStatus"
            }
          }
        }
      },
      "nodes_V2UpdateCollectionStatus": {
        "type": "object",
        "properties": {
          "status": {
            "description": "Update collection results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2UpdateCollectionStatusDetails"
            }
          }
        }
      },
      "nodes_V2UpdateCollectionStatusDetails": {
        "type": "object",
        "properties": {
          "error_count": {
            "description": "No of items failed to add or remove from collection",
            "type": "integer"
          },
          "success_count": {
            "description": "No of items successfully added or removed from collection",
            "type": "integer"
          },
          "total_count": {
            "description": "Total number of items sent as apart of the request",
            "type": "integer"
          },
          "errors": {
            "description": "No of items failed to add or remove from collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2UpdateCollectionErrors"
            }
          }
        }
      },
      "nodes_V2UpdateCollectionErrors": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Id of node to added or removed from collection",
            "type": "integer"
          },
          "name": {
            "description": "name of node to added or removed from collectionn",
            "type": "string"
          },
          "error": {
            "description": "Error occurend while adding or removing the node in collection",
            "type": "string"
          }
        }
      },
      "nodes_DoctemplatesInfo": {
        "type": "object",
        "properties": {
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/nodes_TemplateTypeInfo"
            }
          }
        }
      },
      "nodes_TemplateTypeInfo": {
        "type": "object",
        "properties": {
          "container": {
            "type": "boolean",
            "description": "specifies whether template type is container or not"
          },
          "hasTemplates": {
            "type": "boolean",
            "description": "This parameter specifies whether templates are available or not. This parameter will be available only when group_by request parameter is available"
          },
          "name": {
            "type": "string",
            "description": "Name of the template type. For example: Document"
          },
          "recentlyUsedTemplates": {
            "type": "array",
            "description": "This response parameter specifies the list of recently used templates",
            "items": {
              "$ref": "#/components/schemas/nodes_TemplateInfo"
            }
          },
          "subtype": {
            "type": "integer",
            "description": "Subtype of the template type. For example: 144"
          },
          "templates": {
            "type": "array",
            "description": "This response parameter will be available only when group_by request parameter is not available",
            "items": {
              "$ref": "#/components/schemas/nodes_TemplateInfo"
            }
          },
          "templatesGroup": {
            "type": "array",
            "description": "This response parameter will be available only when group_by request parameter is available",
            "items": {
              "$ref": "#/components/schemas/nodes_TemplateTypeByClassInfo"
            }
          }
        }
      },
      "nodes_TemplateTypeByClassInfo": {
        "properties": {
          "id": {
            "type": "number",
            "description": "classification id"
          },
          "name": {
            "type": "string",
            "description": "Name of the Classification"
          },
          "templates": {
            "type": "array",
            "description": "Templates grouped by particular classification",
            "items": {
              "$ref": "#/components/schemas/nodes_TemplateInfo"
            }
          }
        }
      },
      "nodes_TemplateInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Data ID of the template"
          },
          "isDPWizardAvailable": {
            "type": "boolean",
            "description": "Specifies whether DPWizard module is available or not"
          },
          "mime_type": {
            "type": "string",
            "description": "mime type of the template"
          },
          "name": {
            "type": "string",
            "description": "Name of the template"
          },
          "recentlyUsedDate": {
            "type": "string",
            "format": "date",
            "description": "Recently used date ( This field will be available only for recently used templates)"
          },
          "size": {
            "type": "string",
            "description": "Exact size of the template"
          },
          "sizeformatted": {
            "type": "integer",
            "description": "Formatted size of the template"
          },
          "type": {
            "type": "integer",
            "description": "Subtype of the template. For example: 144"
          }
        }
      },
      "nodes_CellMetadataData": {
        "type": "object"
      },
      "nodes_CellMetadataDefinitions": {
        "type": "object"
      },
      "nodes_V1DataPost": {
        "type": "object",
        "properties": {
          "Properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/nodes_V1Properties"
            }
          }
        }
      },
      "nodes_V1Properties": {
        "type": "object",
        "properties": {
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "create_date": {
            "description": "(Can be time-zone aware) The date that the item was created",
            "type": "string"
          },
          "create_user_id": {
            "description": "The id of the user who created the item",
            "type": "integer"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/nodes_DescriptionMultilingual"
          },
          "external_create_date": {
            "description": "External create date",
            "type": "string",
            "format": "date"
          },
          "external_identity": {
            "description": "External identity",
            "type": "string"
          },
          "external_identity_type": {
            "description": "External identity type",
            "type": "string"
          },
          "external_modify_date": {
            "description": "External modify date",
            "type": "string",
            "format": "date"
          },
          "external_source": {
            "description": "External source",
            "type": "string"
          },
          "favorite": {
            "description": "Indicates if this item has been favorited by the current user",
            "type": "boolean"
          },
          "guid": {
            "description": "Globally unique id",
            "type": "string"
          },
          "icon": {
            "description": "The item's icon",
            "type": "string"
          },
          "icon_large": {
            "description": "The item's icon (large)",
            "type": "string"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "modify_date": {
            "description": "(Can be time-zone aware) The date on which the item was last modified",
            "type": "string",
            "format": "date"
          },
          "modify_user_id": {
            "description": "The id of the user who modified the item",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/nodes_NameMultilingual"
          },
          "owner": {
            "description": "The name of the owner of this item",
            "type": "string"
          },
          "owner_group_id": {
            "description": "The group id of the owner of this item",
            "type": "integer"
          },
          "owner_user_id": {
            "description": "The user id of the owner of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "The object id of the item's parent",
            "type": "integer"
          },
          "reserved": {
            "description": "Whether or not this item has been reserved",
            "type": "boolean"
          },
          "reserved_date": {
            "description": "(Can be time-zone aware) The date on which the item was reserved",
            "type": "string"
          },
          "reserved_user_id": {
            "description": "The id of the user who has this item reserved",
            "type": "integer"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "versionable": {
            "description": "TRUE if this item has versionable content, FALSE otherwise",
            "type": "boolean"
          },
          "versions_control_advanced": {
            "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
            "type": "boolean"
          },
          "volume_id": {
            "description": "The id of the volume to which this item belongs",
            "type": "integer"
          }
        }
      },
      "nodes_NameMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Name in English"
          },
          "de": {
            "type": "string",
            "description": "Name auf Deutsch"
          }
        }
      },
      "nodes_DescriptionMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Description in English"
          },
          "de": {
            "type": "string",
            "description": "Beschreibung in Deutsch"
          }
        }
      },
      "notifications_notification_interests_node": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notifications_V2Result"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notifications_V2DataLinks"
            }
          }
        }
      },
      "notifications_V2Result": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/notifications_datainterests"
            }
          }
        }
      },
      "notifications_datainterests": {
        "type": "object",
        "properties": {
          "interests": {
            "type": "array",
            "description": "interests",
            "items": {
              "$ref": "#/components/schemas/notifications_interests"
            }
          }
        }
      },
      "notifications_interests": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "interests"
          },
          "interest": {
            "type": "string",
            "description": "interests"
          },
          "report": {
            "type": "integer",
            "description": "interests"
          }
        }
      },
      "notifications_V2DataLinks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/notifications_V2Links"
            }
          }
        }
      },
      "notifications_V2Links": {
        "type": "object",
        "properties": {
          "self": {
            "type": "array",
            "description": "Self link",
            "items": {
              "$ref": "#/components/schemas/notifications_V2Link"
            }
          }
        }
      },
      "notifications_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "notifications_set_notification_interests_node": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notifications_V2EmptyResults"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/notifications_V2DataLinks"
            }
          }
        }
      },
      "notifications_V2EmptyResults": {
        "type": "object"
      },
      "permissions_V2DataPermissions": {
        "type": "object",
        "properties": {
          "permissions": {
            "type": "array",
            "description": "permissions",
            "items": {
              "$ref": "#/components/schemas/permissions_V2Permissions"
            }
          }
        }
      },
      "permissions_V2Permissions": {
        "type": "object",
        "properties": {
          "permissions": {
            "description": "The permissions associated with this right",
            "type": "string"
          },
          "right_id": {
            "description": "The ID of the user/group associated with this right",
            "type": "integer"
          },
          "type": {
            "description": "The type of right",
            "type": "string",
            "enum": [
              "owner",
              "group",
              "public",
              "custom"
            ]
          }
        }
      },
      "permissions_V2ResponsePermissions": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permissions_V2ResultPermissions"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permissions_V2DataLinks"
            }
          }
        }
      },
      "permissions_V2ResponsePermission": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permissions_V2ResultPermissions"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permissions_V2DataLinks"
            }
          }
        }
      },
      "permissions_V2ResultPermissions": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/permissions_V2DataPermissions"
            }
          }
        }
      },
      "permissions_V2DataLinks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/permissions_V2Links"
            }
          }
        }
      },
      "permissions_V2Links": {
        "type": "object",
        "properties": {
          "self": {
            "type": "array",
            "description": "Self link",
            "items": {
              "$ref": "#/components/schemas/permissions_V2Link"
            }
          }
        }
      },
      "permissions_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "permissions_V2EmptyResponse": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permissions_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/permissions_V2EmptyResults"
            }
          }
        }
      },
      "permissions_V2EmptyResults": {
        "type": "object"
      },
      "ping_rest_api": {
        "type": "object",
        "properties": {
          "build": {
            "type": "integer",
            "description": "The build number of the REST API"
          },
          "href": {
            "type": "string",
            "description": "The base HREF URL"
          },
          "version": {
            "type": "integer",
            "description": "The version of the REST API"
          }
        }
      },
      "processes_ProcessInfo": {
        "type": "object",
        "properties": {
          "process_id": {
            "type": "integer",
            "description": "The id of the initiated process"
          }
        },
        "required": [
          "process_id"
        ]
      },
      "processes_WorkflowDefinitionInfo": {
        "type": "object",
        "properties": {
          "results": {
            "$ref": "#/components/schemas/processes_WorkflowDefinitionResults"
          }
        }
      },
      "workflow_Process_TaskListResults": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/workflow_Process_TaskListDefinition"
          }
        }
      },
      "workflow_Process_TaskListDefinition": {
        "type": "object",
        "properties": {
          "attachments": {
            "type": "object",
            "$ref": "#/components/schemas/workflow_Process_TaskList_attachments",
            "description": "The array contains the attachment details of the workflow instance"
          },
          "data_packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/workflow_Process_TaskList_WorkflowDefinitionDataPackage"
            },
            "description": "The array contains the data packages activated for the workflow map"
          },
          "step_list": {
            "type": "object",
            "properties": {
              "completed": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/workFlow_Process_TaskInfo"
                }
              },
              "current": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/workFlow_Process_TaskInfo"
                }
              },
              "next": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/workFlow_Process_TaskInfo"
                }
              }
            }
          },
          "wf_details": {
            "type": "object",
            "$ref": "#/components/schemas/workFlow_Details"
          },
          "permissions": {
            "type": "object",
            "$ref": "#/components/schemas/workflow_Permissions"
          }
        }
      },
      "workflow_Permissions": {
        "type": "object",
        "properties": {
          "Archive": {
            "type": "boolean",
            "description": "check if logged in user have permission to archive the workflow"
          },
          "ChangeAttr": {
            "type": "boolean",
            "description": "check if logged in user have permission to change attributes of the workflow"
          },
          "Delete": {
            "type": "boolean",
            "description": "check if logged in user have permission to Delete the workflow"
          },
          "ChangeRoute": {
            "type": "boolean",
            "description": "check if logged in user have permission to change route of the workflow"
          },
          "ManagerPerms": {
            "type": "boolean",
            "description": "check if logged in user have permission to manage permissions of the workflow"
          },
          "SeeDetail": {
            "type": "boolean",
            "description": "check if logged in user have permission to see details the workflow"
          },
          "Stop": {
            "type": "boolean",
            "description": "check if logged in user have permission to stop the workflow"
          },
          "Suspend": {
            "type": "boolean",
            "description": "check if logged in user have permission to suspend the workflow"
          }
        },
        "description": "Contains Permisions that logged in user have on the Workflow"
      },
      "workflow_Process_TaskList_attachments": {
        "type": "object",
        "properties": {
          "attachment_folder_id": {
            "type": "integer",
            "description": "attachment id"
          }
        }
      },
      "workflow_StatusListInfo": {
        "type": "object",
        "properties": {
          "results": {
            "$ref": "#/components/schemas/workflow_StatusListResults"
          }
        }
      },
      "workflow_StatusListResults": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/workflow_StatusData"
        }
      },
      "workflow_StatusData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/workflow_StatusData_Info"
          },
          "definitions": {
            "type": "object",
            "properties": {
              "wfstatus": {
                "type": "object",
                "$ref": "#/components/schemas/workflowstatus_nodeDefinitions"
              }
            }
          },
          "definitions_map": {
            "type": "object",
            "properties": {
              "wfstatus": {
                "type": "object"
              }
            }
          },
          "definitions_order": {
            "type": "object",
            "properties": {
              "wfstatus": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "permissions": {
            "type": "object",
            "$ref": "#/components/schemas/workflow_Permissions"
          }
        }
      },
      "workflowstatus_nodeDefinitions": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "object",
            "$ref": "#/components/schemas/workflowstatus_nodeDefinitions_properties"
          },
          "date_initiated": {
            "type": "object",
            "$ref": "#/components/schemas/workflowstatus_nodeDefinitions_properties"
          },
          "due_date": {
            "type": "object",
            "$ref": "#/components/schemas/workflowstatus_nodeDefinitions_properties"
          },
          "status_key": {
            "type": "object",
            "$ref": "#/components/schemas/workflowstatus_nodeDefinitions_properties"
          },
          "step_name": {
            "type": "object",
            "$ref": "#/components/schemas/workflowstatus_nodeDefinitions_properties"
          },
          "wf_name": {
            "type": "object",
            "$ref": "#/components/schemas/workflowstatus_nodeDefinitions_properties"
          }
        }
      },
      "workflowstatus_nodeDefinitions_properties": {
        "type": "object",
        "properties": {
          "allow_undefined": {
            "type": "boolean"
          },
          "bulk_shared": {
            "type": "boolean"
          },
          "default_value": {
            "type": "object"
          },
          "hidden": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "max_value": {
            "type": "object"
          },
          "min_value": {
            "type": "object"
          },
          "multi_value": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "read_only": {
            "type": "boolean"
          },
          "required": {
            "type": "boolean"
          },
          "type": {
            "type": "integer"
          },
          "type_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "persona": {
            "type": "string"
          },
          "valid_values": {
            "type": "object"
          },
          "valid_values_name": {
            "type": "object"
          }
        }
      },
      "workflow_StatusData_Info": {
        "type": "object",
        "properties": {
          "wfstatus": {
            "type": "object",
            "$ref": "#/components/schemas/workflow_StatusData_Properties"
          }
        }
      },
      "workflow_StatusData_Properties": {
        "type": "object",
        "properties": {
          "process_id": {
            "type": "integer"
          },
          "assignee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/workflow_Process_TaskAssigneeInfo"
            }
          },
          "parallel_steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/workFlow_Process_TaskInfo"
            }
          },
          "assignee_count": {
            "type": "integer"
          },
          "comments_on": {
            "type": "boolean"
          },
          "current_assignee": {
            "type": "string"
          },
          "date_initiated": {
            "type": "string",
            "format": "date-time",
            "description": "Date Initiated of workflow"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of workflow"
          },
          "status_key": {
            "type": "string"
          },
          "step_name": {
            "type": "string"
          },
          "steps_count": {
            "type": "integer"
          },
          "subprocess_id": {
            "type": "integer"
          },
          "wf_name": {
            "type": "string",
            "description": "Name of the Workflow"
          },
          "task_id": {
            "type": "integer",
            "description": "Workflow task id"
          }
        }
      },
      "workflow_Process_TaskListInfo": {
        "type": "object",
        "properties": {
          "results": {
            "$ref": "#/components/schemas/workflow_Process_TaskListDefinition"
          }
        }
      },
      "workflow_Process_TaskAssigneeInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "user ID of the assignee"
          },
          "loginName": {
            "type": "string",
            "description": "login name of the assignee"
          },
          "firstName": {
            "type": "string",
            "description": "First Name of the assignee"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name of the assignee"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address of the assignee"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the assignee"
          }
        }
      },
      "workflow_InitiatorInfo": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First Name of the Initiator"
          },
          "lastName": {
            "type": "string",
            "description": "Last Name of the Initiator"
          },
          "loginName": {
            "type": "string",
            "description": "login Name of the Initiator"
          },
          "userId": {
            "type": "integer",
            "description": "user Id the assignee"
          }
        }
      },
      "workFlow_Process_TaskInfo": {
        "type": "object",
        "properties": {
          "process_id": {
            "type": "integer",
            "description": "process ID"
          },
          "subprocess_id": {
            "type": "integer",
            "description": "Sub process ID"
          },
          "task_id": {
            "type": "integer",
            "description": "Task Id of the Workflow"
          },
          "task_name": {
            "type": "string",
            "description": "Task Name of the Workflow"
          },
          "task_due_date": {
            "type": "string",
            "format": "date-time",
            "description": "Task Due date"
          },
          "task_start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Task Start date"
          },
          "task_status": {
            "type": "string",
            "description": "Task Status"
          },
          "task_assignees": {
            "type": "object",
            "$ref": "#/components/schemas/workflow_Process_TaskAssigneeInfoObject",
            "description": "The array containing the information collected for one task of the workflow"
          }
        }
      },
      "workflow_Process_TaskAssigneeInfoObject": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/workflow_Process_TaskAssigneeInfo"
            }
          },
          "assigneeCount": {
            "type": "integer",
            "description": "count of assignees"
          },
          "currentAssignee": {
            "type": "string",
            "description": "Current Assignee"
          }
        }
      },
      "workFlow_Details": {
        "type": "object",
        "properties": {
          "date_initiated": {
            "type": "string",
            "format": "date-time",
            "description": "Date Initiated of workflow"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of workflow"
          },
          "initiator": {
            "type": "object",
            "$ref": "#/components/schemas/workflow_InitiatorInfo",
            "description": "Initiator Details of Workflow"
          },
          "status": {
            "type": "string",
            "description": "Status of the workdflow"
          },
          "wf_name": {
            "type": "string",
            "description": "Name of the Workflow"
          },
          "work_workID": {
            "type": "integer",
            "description": "WorkFlow Instance ID"
          }
        }
      },
      "processes_AuthenticationInfo": {
        "type": "object",
        "properties": {
          "authentication_id": {
            "type": "integer",
            "description": "This is cache id which filled will be validated at server."
          },
          "password": {
            "type": "string",
            "description": "password of the assigned user, will be used for validation if authentication_id is not available."
          }
        }
      },
      "processes_WorkflowActivitiesResults": {
        "type": "object",
        "properties": {
          "results": {
            "$ref": "#/components/schemas/processes_WorkflowActivitiesData"
          }
        }
      },
      "processes_WorkflowActivitiesData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/processes_WorkflowActivitiesInfo"
            },
            "description": "The array containing the information collected for one task of the workflow"
          }
        }
      },
      "processes_WorkflowActivitiesInfo": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "Taken task action"
          },
          "action_properties": {
            "$ref": "#/components/schemas/processes_ActionPropertiesInfo"
          },
          "comment": {
            "type": "string",
            "description": "Comment of task performer"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of task action"
          },
          "user_id": {
            "type": "integer",
            "description": "ID of task performer"
          }
        }
      },
      "processes_ActionPropertiesInfo": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "Event property when disposition or attachment was performed"
          },
          "label": {
            "type": "string",
            "description": "Disposition label"
          },
          "node": {
            "$ref": "#/components/schemas/processes_NodeInfo"
          },
          "user_id": {
            "type": "integer",
            "description": "ID of assignee when send for review or forward was performed"
          }
        }
      },
      "processes_NodeInfo": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Attachment description"
          },
          "id": {
            "type": "integer",
            "description": "Attachment node ID"
          },
          "mime-type": {
            "type": "string",
            "description": "Attachment mime-type"
          },
          "name": {
            "type": "string",
            "description": "Attachment name"
          },
          "type": {
            "type": "integer",
            "description": "Attachment type"
          }
        }
      },
      "workflow_Process_TaskList_WorkflowDefinitionDataPackage": {
        "type": "object",
        "properties": {
          "USERDATA": {
            "type": "integer",
            "description": "Data Package ID"
          },
          "DESCRIPTION": {
            "type": "string",
            "description": "Description of the workflow package"
          },
          "TYPE": {
            "type": "integer",
            "description": "Workflow package type id"
          },
          "SUBTYPE": {
            "type": "integer",
            "description": "Workflow package sub-type id"
          }
        }
      },
      "processes_WorkflowDefinitionResults": {
        "type": "object",
        "properties": {
          "definition": {
            "$ref": "#/components/schemas/processes_WorkflowDefinition"
          }
        }
      },
      "processes_WorkflowDefinition": {
        "type": "object",
        "properties": {
          "data_packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/processes_WorkflowDefinitionDataPackage"
            },
            "description": "The array contains the data packages activated for the workflow map"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/processes_WorkflowDefinitionTask"
            },
            "description": "The array contains the tasks available in the workflow map"
          },
          "workflow_id": {
            "type": "integer",
            "description": "This is the workflow map id"
          }
        }
      },
      "processes_WorkflowDefinitionDataPackage": {
        "type": "object",
        "properties": {
          "data": {
            "type": "integer",
            "description": "Workflow data package specific properties"
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow package"
          },
          "type": {
            "type": "integer",
            "description": "Workflow package type id"
          },
          "sub_type": {
            "type": "integer",
            "description": "Workflow package sub-type id"
          }
        }
      },
      "processes_WorkflowDefinitionTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "integer",
            "description": "Workflow task specific properties"
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow task"
          },
          "instructions": {
            "type": "string",
            "description": "Instructions of the workflow task"
          },
          "sub_type": {
            "type": "integer",
            "description": "Workflow task sub-type id"
          },
          "task_id": {
            "type": "integer",
            "description": "Workflow task id"
          },
          "title": {
            "type": "string",
            "description": "Title of the workflow task"
          },
          "type": {
            "type": "integer",
            "description": "Workflow task type id"
          }
        }
      },
      "search_RegionInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Regions Data",
            "items": {
              "$ref": "#/components/schemas/search_RegionData"
            }
          }
        }
      },
      "search_RegionData": {
        "type": "object",
        "properties": {
          "displayable": {
            "type": "boolean",
            "description": "Whether the region is displayable, which allows users to display regions on the Search Results page"
          },
          "display_name": {
            "type": "string",
            "description": "The region's display name"
          },
          "facet": {
            "type": "boolean",
            "description": "Whether the region is a facet"
          },
          "name": {
            "type": "string",
            "description": "The name of the region"
          },
          "queryable": {
            "type": "boolean",
            "description": "Whether the region is queryable, which allows users to choose the regions that appear as System Attributes on the Advanced Search Page"
          },
          "search_by_default": {
            "type": "boolean",
            "description": "Whether the region is searched automatically"
          },
          "sortable": {
            "type": "boolean",
            "description": "Whether the region is sortable"
          }
        }
      },
      "search_SliceInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Slices Data",
            "items": {
              "$ref": "#/components/schemas/search_SliceData"
            }
          }
        }
      },
      "search_SliceData": {
        "type": "object",
        "properties": {
          "default_slice": {
            "type": "boolean",
            "description": "Whether the slice is a default slice"
          },
          "id": {
            "type": "integer",
            "description": "ID of the slice"
          },
          "name": {
            "type": "string",
            "description": "Name of the slice"
          }
        }
      },
      "search_SearchInfo": {
        "type": "object",
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/search_collectionData"
          },
          "links": {
            "$ref": "#/components/schemas/search_linksData"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_resultsData"
            }
          }
        }
      },
      "search_collectionData": {
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/search_pagingData"
          },
          "searching": {
            "$ref": "#/components/schemas/search_searchingData"
          },
          "sorting": {
            "$ref": "#/components/schemas/search_sortingData"
          }
        }
      },
      "search_sortingData": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/search_linksSortingData"
          },
          "sort": {
            "type": "array",
            "description": "A list of region names prepended with sort direction specifying the order in which the results are sorted",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "search_linksSortingData": {
        "type": "object",
        "properties": {
          "asc_OTObjectDate": {
            "$ref": "#/components/schemas/search_searchLinksSelfData"
          },
          "asc_OTObjectSize": {
            "$ref": "#/components/schemas/search_searchLinksSelfData"
          },
          "desc_OTObjectDate": {
            "$ref": "#/components/schemas/search_searchLinksSelfData"
          },
          "desc_OTObjectSize": {
            "$ref": "#/components/schemas/search_searchLinksSelfData"
          },
          "relevance": {
            "$ref": "#/components/schemas/search_searchLinksSelfData"
          }
        }
      },
      "search_resultsData": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/search_dataResultsData"
          },
          "links": {
            "$ref": "#/components/schemas/search_linksResultsData"
          },
          "metadata": {
            "type": "string"
          },
          "search_result_metadata": {
            "$ref": "#/components/schemas/search_searchMetadataResultsData"
          }
        }
      },
      "search_searchMetadataResultsData": {
        "type": "object",
        "properties": {
          "current_version": {
            "type": "boolean",
            "description": "Indicates if this is a versioned object or not"
          },
          "object_href": {
            "type": "string",
            "description": "URL mapped location to access the result"
          },
          "object_id": {
            "type": "string",
            "description": "The unique identifier in the search index the result came from"
          },
          "result_type": {
            "type": "integer",
            "description": "result style ( 264 indicates an Enterprise style result )"
          },
          "source_id": {
            "type": "integer",
            "description": "The node ID of the search engine that generated the result"
          },
          "version_type": {
            "type": "string",
            "description": "Representing the type of the version"
          }
        }
      },
      "search_dataResultsData": {
        "type": "object",
        "properties": {
          "properties": {
            "$ref": "#/components/schemas/search_propertiesDataResultsData"
          },
          "regions": {
            "type": "string"
          },
          "versions": {
            "$ref": "#/components/schemas/search_versionsDataResultsData"
          }
        }
      },
      "search_versionsDataResultsData": {
        "type": "object",
        "properties": {
          "create_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date that the version was created"
          },
          "description": {
            "type": "string",
            "description": "A description of the version"
          },
          "file_create_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the file was created"
          },
          "file_modify_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date the file was last modified"
          },
          "file_name": {
            "type": "string",
            "description": "The file name of the version"
          },
          "file_size": {
            "type": "integer",
            "description": "The file size of the version"
          },
          "file_type": {
            "type": "string",
            "description": "The file extension of the version"
          },
          "id": {
            "type": "integer",
            "description": "The ID of the version"
          },
          "locked": {
            "type": "boolean",
            "description": "Indicates if this is a non-modifiable version"
          },
          "locked_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date of the version where locked"
          },
          "locked_user_id": {
            "type": "integer",
            "description": "The ID of the user who locked this version"
          },
          "mime_type": {
            "type": "string",
            "description": "The mime type of the object"
          },
          "modify_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date on which the item was last modified"
          },
          "name": {
            "type": "string",
            "description": "The name of the file"
          },
          "owner_id": {
            "type": "integer",
            "description": "The user ID of the versionâ€™s owner"
          },
          "provider_id": {
            "type": "integer",
            "description": "The storage provider ID"
          },
          "version_id": {
            "type": "integer",
            "description": "The version ID"
          },
          "version_number": {
            "type": "integer",
            "description": "The version number of the node"
          },
          "version_number_major": {
            "type": "integer",
            "description": "The number of the source version"
          },
          "version_number_minor": {
            "type": "integer",
            "description": "The number of the edited version"
          },
          "version_number_name": {
            "type": "string",
            "description": "Version number of the node"
          }
        }
      },
      "search_propertiesDataResultsData": {
        "type": "object",
        "properties": {
          "container": {
            "type": "boolean",
            "description": "Whether or not this item is a container"
          },
          "container_size": {
            "type": "integer",
            "description": "The number of items in this container"
          },
          "create_date": {
            "type": "string",
            "format": "data-time",
            "description": "The date that the item was created"
          },
          "create_user_id": {
            "type": "integer",
            "description": "The ID of the user who created the item"
          },
          "description": {
            "type": "string",
            "description": "A description of the item"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/search_descriptionMultilingual"
          },
          "external_create_date": {
            "type": "string",
            "format": "date",
            "description": "The external create date"
          },
          "external_identity": {
            "type": "string",
            "description": "The external identity"
          },
          "external_identity_type": {
            "type": "string",
            "description": "The external identity type"
          },
          "external_modify_date": {
            "type": "string",
            "format": "date",
            "description": "The external modify date"
          },
          "external_source": {
            "type": "string",
            "description": "The external source"
          },
          "favorite": {
            "type": "boolean",
            "description": "Indicates if this item has been favorited by the current user"
          },
          "id": {
            "type": "integer",
            "description": "The item's unique object ID"
          },
          "mime_type": {
            "type": "string",
            "description": "The mime type of the object"
          },
          "modify_date": {
            "type": "string",
            "format": "date-time",
            "description": "The date on which the item was last modified"
          },
          "modify_user_id": {
            "type": "integer",
            "description": "The ID of the user who modified the item"
          },
          "name": {
            "type": "string",
            "description": " The name of the item"
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/search_nameMultilingual"
          },
          "owner": {
            "type": "string",
            "description": "The name of the owner of this item"
          },
          "owner_group_id": {
            "type": "integer",
            "description": " The group ID of the owner of this item"
          },
          "owner_user_id": {
            "type": "integer",
            "description": "The user ID of the owner of this item"
          },
          "parent_id": {
            "type": "integer",
            "description": "The object ID of the item's parent"
          },
          "permissions_model": {
            "type": "string",
            "description": "This is the permissions level"
          },
          "reserved": {
            "type": "boolean",
            "description": "Whether or not this item has been reserved"
          },
          "reserved_date": {
            "type": "string",
            "format": "date",
            "description": "The date on which the item was reserved"
          },
          "reserved_shared_collaboration": {
            "type": "boolean",
            "description": "Indicates if this item is shared externally or not"
          },
          "reserved_user_id": {
            "type": "integer",
            "description": "The ID of the user who has this item reserved"
          },
          "short_summary": {
            "type": "string",
            "description": "A short description of the item"
          },
          "size": {
            "type": "integer",
            "description": "The size of this item"
          },
          "size_formatted": {
            "type": "string",
            "description": "The size of this item with an appropriate units based on type"
          },
          "summary": {
            "type": "string",
            "description": "A description of the item"
          },
          "type": {
            "type": "integer",
            "description": "An ID representing the type of the object"
          },
          "type_name": {
            "type": "string",
            "description": "The name of the node's object type"
          },
          "versions_control_advanced": {
            "type": "boolean",
            "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)"
          },
          "volume_id": {
            "type": "integer",
            "description": "ID of the volume to which this item belongs"
          }
        }
      },
      "search_formData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the form"
          },
          "name": {
            "type": "string",
            "description": "The display name of the form"
          },
          "read_only": {
            "type": "boolean",
            "description": "Whether or not the form is writeable by the user"
          }
        }
      },
      "search_recentFormData": {
        "type": "object",
        "properties": {
          "accessed": {
            "type": "string",
            "format": "date-time",
            "description": "The date the form was last accessed by the user"
          },
          "id": {
            "type": "integer",
            "description": "The ID of the form"
          },
          "name": {
            "type": "string",
            "description": "The display name of the form"
          }
        }
      },
      "search_searchbarData": {
        "type": "object",
        "properties": {
          "full_text": {
            "$ref": "#/components/schemas/search_fulltextData"
          }
        }
      },
      "search_fulltextData": {
        "type": "object",
        "properties": {
          "lookfor": {
            "type": "string",
            "description": "Search Mode options"
          },
          "modifier": {
            "type": "string",
            "description": "The kind of related terms included in the search"
          }
        }
      },
      "search_sliceData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the slice. Typically a number, but can be a 'From here' slice, which has a number that represents the slice ID, a vertical bar, then a number than represents the container ID the search is constrained to, eg: '3423|2000'"
          },
          "name": {
            "type": "string",
            "description": "The display name of the slice"
          },
          "selected": {
            "type": "boolean",
            "description": "Whether or not the slice is the default selected for UI dropdowns"
          }
        }
      },
      "search_descriptionMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Description in English"
          },
          "de": {
            "type": "string",
            "description": "Beschreibung in Deutsch"
          }
        }
      },
      "search_nameMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Name in English"
          },
          "de": {
            "type": "string",
            "description": "Name auf Deutsch"
          }
        }
      },
      "search_linksResultsData": {
        "type": "object",
        "properties": {
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_allLinksResultsData"
            }
          },
          "ancestors_nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_allLinksResultsData"
            }
          },
          "parent": {
            "$ref": "#/components/schemas/search_allLinksResultsData"
          },
          "parent_nodes": {
            "$ref": "#/components/schemas/search_allLinksResultsData"
          }
        }
      },
      "search_allLinksResultsData": {
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "search_searchingData": {
        "type": "object",
        "properties": {
          "cache_id": {
            "type": "integer",
            "description": "The search cacheID for the result set"
          },
          "facets": {
            "$ref": "#/components/schemas/search_facetsSearchingData"
          },
          "result_title": {
            "type": "string",
            "description": "A title for the result set"
          },
          "regions_order": {
            "type": "array",
            "description": "A list of region names specifying the order in which to display the regions. There can be duplicates",
            "items": {
              "type": "string"
            }
          },
          "regions_metadata": {
            "$ref": "#/components/schemas/search_regionsMetadataData"
          }
        }
      },
      "search_regionsMetadataData": {
        "type": "object",
        "properties": {
          "OTObjectDate": {
            "$ref": "#/components/schemas/search_regionsMetadataSelfData"
          },
          "OTLocation": {
            "$ref": "#/components/schemas/search_regionsMetadataSelfData"
          },
          "OTMIMEType": {
            "$ref": "#/components/schemas/search_regionsMetadataSelfData"
          },
          "OTName": {
            "$ref": "#/components/schemas/search_regionsMetadataSelfData"
          },
          "OTObjectSize": {
            "$ref": "#/components/schemas/search_regionsMetadataSelfData"
          }
        }
      },
      "search_regionsMetadataSelfData": {
        "type": "object",
        "properties": {
          "persona": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "integer"
          }
        }
      },
      "search_facetsSearchingData": {
        "type": "object",
        "properties": {
          "available": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_availableFacetsSearchingData"
            }
          }
        }
      },
      "search_availableFacetsSearchingData": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "count_exceeded": {
            "type": "boolean"
          },
          "display_name": {
            "type": "string"
          },
          "facet_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_facetItems"
            }
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "search_facetItems": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer"
          },
          "display_name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "search_pagingData": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Maximum number of items returned per page"
          },
          "page": {
            "type": "integer",
            "description": "Number of the current page"
          },
          "page_total": {
            "type": "integer",
            "description": "Total number of pages available"
          },
          "range_max": {
            "type": "integer",
            "description": "Number of the ending item for this page"
          },
          "range_min": {
            "type": "integer",
            "description": "Number of the starting item for this page"
          },
          "result_header_string": {
            "type": "string",
            "description": "The header for the result page"
          },
          "total_count": {
            "type": "integer",
            "description": "Total number of items available"
          }
        }
      },
      "search_searchLinksData": {
        "type": "object",
        "properties": {
          "self": {
            "$ref": "#/components/schemas/search_searchLinksSelfData"
          }
        }
      },
      "search_searchLinksSelfData": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "search_linksData": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/search_searchLinksData"
          }
        }
      },
      "search_membersInfoData": {
        "type": "object",
        "properties": {
          "personal_search_forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_formData"
            }
          },
          "recent_search_forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_recentFormData"
            }
          },
          "search_bar_settings": {
            "$ref": "#/components/schemas/search_searchbarData"
          },
          "system_search_forms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_formData"
            }
          },
          "slices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_sliceData"
            }
          }
        }
      },
      "search_templateDisplayData": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/search_templateDisplayDataData"
          }
        }
      },
      "search_templateDisplaySettings": {
        "type": "object",
        "properties": {
          "page_size": {
            "type": "integer",
            "description": "Number of results to return per page"
          },
          "show_keywords": {
            "type": "boolean",
            "description": "Whether or not to show the result's keywords"
          },
          "show_location_path": {
            "type": "boolean",
            "description": "Whether or not to show the result's location path"
          },
          "style_id": {
            "type": "integer",
            "description": "Key value indicating which display style to use"
          },
          "display_regions": {
            "$ref": "#/components/schemas/search_displayRegionsObject"
          },
          "facet_regions": {
            "$ref": "#/components/schemas/search_facetRegionsObject"
          },
          "sort_regions": {
            "$ref": "#/components/schemas/search_sortRegionsObject"
          },
          "summary_description": {
            "$ref": "#/components/schemas/search_summDescObject"
          }
        }
      },
      "search_templateProperties": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "dataID of the template"
          },
          "name": {
            "type": "string",
            "description": "Display name of the template"
          },
          "type": {
            "type": "integer",
            "description": "ID of the data type of the template"
          },
          "type_name": {
            "type": "string",
            "description": "Display name of the data type of the template"
          }
        }
      },
      "search_templateDisplayDataData": {
        "type": "object",
        "properties": {
          "display": {
            "$ref": "#/components/schemas/search_templateDisplaySettings"
          },
          "properties": {
            "$ref": "#/components/schemas/search_templateProperties"
          }
        }
      },
      "search_availableSelectedObject": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "ID string for the option"
          },
          "name": {
            "type": "string",
            "description": "Display name for the option"
          }
        }
      },
      "search_displayRegionsObject": {
        "type": "object",
        "properties": {
          "available": {
            "type": "array",
            "description": "List of available display regions for the template",
            "items": {
              "$ref": "#/components/schemas/search_availableSelectedObject"
            }
          },
          "selected": {
            "type": "array",
            "description": "Ordered list of selected display regions for the template",
            "items": {
              "$ref": "#/components/schemas/search_availableSelectedObject"
            }
          }
        }
      },
      "search_facetRegionsObject": {
        "type": "object",
        "properties": {
          "available": {
            "type": "array",
            "description": "List of available facet regions for the template",
            "items": {
              "$ref": "#/components/schemas/search_availableSelectedObject"
            }
          },
          "selected": {
            "type": "array",
            "description": "Ordered list of selected facet regions for the template",
            "items": {
              "$ref": "#/components/schemas/search_availableSelectedObject"
            }
          }
        }
      },
      "search_sortRegionsObject": {
        "type": "object",
        "properties": {
          "available": {
            "type": "array",
            "description": "List of available sort regions for the template",
            "items": {
              "$ref": "#/components/schemas/search_availableSelectedObject"
            }
          },
          "selected": {
            "type": "array",
            "description": "Ordered list of selected sort regions for the template",
            "items": {
              "$ref": "#/components/schemas/search_availableSelectedObject"
            }
          }
        }
      },
      "search_summDescObject": {
        "type": "object",
        "properties": {
          "available": {
            "type": "array",
            "description": "List of available summary and description options",
            "items": {
              "$ref": "#/components/schemas/search_availableSelectedObject"
            }
          },
          "selected": {
            "description": "The selected summary and description option",
            "type": "string"
          }
        }
      },
      "search_MembersInfo": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/search_linksData"
          },
          "results": {
            "$ref": "#/components/schemas/search_membersInfoData"
          }
        }
      },
      "search_TemplateDisplayInfo": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/search_linksData"
          },
          "results": {
            "$ref": "#/components/schemas/search_templateDisplayData"
          }
        }
      },
      "search_WorkflowDefinitionResults": {
        "type": "object",
        "properties": {
          "definition": {
            "$ref": "#/components/schemas/search_WorkflowDefinition"
          }
        }
      },
      "search_WorkflowDefinition": {
        "type": "object",
        "properties": {
          "data_packages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_WorkflowDefinitionDataPackage"
            },
            "description": "The array contains the data packages activated for the workflow map"
          },
          "tasks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/search_WorkflowDefinitionTask"
            },
            "description": "The array contains the tasks available in the workflow map"
          },
          "workflow_id": {
            "type": "integer",
            "description": "This is the workflow map id"
          }
        }
      },
      "search_WorkflowDefinitionDataPackage": {
        "type": "object",
        "properties": {
          "data": {
            "type": "integer",
            "description": "Workflow data package specific properties"
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow package"
          },
          "type": {
            "type": "integer",
            "description": "Workflow package type id"
          },
          "sub_type": {
            "type": "integer",
            "description": "Workflow package sub-type id"
          }
        }
      },
      "search_WorkflowDefinitionTask": {
        "type": "object",
        "properties": {
          "data": {
            "type": "integer",
            "description": "Workflow task specific properties"
          },
          "description": {
            "type": "string",
            "description": "Description of the workflow task"
          },
          "instructions": {
            "type": "string",
            "description": "Instructions of the workflow task"
          },
          "sub_type": {
            "type": "integer",
            "description": "Workflow task sub-type id"
          },
          "task_id": {
            "type": "integer",
            "description": "Workflow task id"
          },
          "title": {
            "type": "string",
            "description": "Title of the workflow task"
          },
          "type": {
            "type": "integer",
            "description": "Workflow task type id"
          }
        }
      },
      "servermessages_results": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/servermessages_message"
            }
          },
          "display_interval": {
            "type": "integer",
            "description": "The amount of time a message should appear on screen (in milliseconds)"
          },
          "relative_url": {
            "type": "boolean",
            "description": "A flag that indicates if message URLs are relative"
          }
        }
      },
      "servermessages_message": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The text of the system message to be displayed"
          },
          "url": {
            "type": "string",
            "description": "(Optional) The URL to accompany the message"
          }
        }
      },
      "serverinfo_results": {
        "type": "object",
        "properties": {
          "mobile": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/serverinfo_mobile"
            }
          },
          "server": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/serverinfo_server"
            }
          },
          "viewer": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/serverinfo_viewer"
            }
          },
          "sessions": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/serverinfo_sessions"
            }
          }
        }
      },
      "server_PrivilegeV2Collection": {
        "type": "object",
        "properties": {
          "filtering": {
            "type": "object",
            "description": "Filtering information",
            "properties": {
              "filter": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/volumes_V2FilterObj"
                }
              }
            }
          },
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/server_V2Privilege"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "server_PrivilegeV2UpdateCollection": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/server_V2PrivilegeUpdateResults"
            }
          }
        }
      },
      "server_V2PrivilegeUpdateResults": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/server_V2PrivilegeUpdateData"
            }
          }
        }
      },
      "server_V2PrivilegeUpdateData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID to be used when making /v2/members/* calls. Will be null if the privilege is unrestricted"
          }
        }
      },
      "server_V2Privilege": {
        "type": "object",
        "properties": {
          "deleted": {
            "type": "boolean",
            "description": "A flag that indicates if the privilege was deleted"
          },
          "id": {
            "type": "integer",
            "description": "The ID to be used when making /v2/members/* calls. Will be null if the privilege is unrestricted"
          },
          "name": {
            "type": "string",
            "description": "The name of the privilege"
          },
          "object_icon": {
            "type": "string",
            "description": "If the privilege is an object privilege, this will be the path to the icon. If the privilege is a usage privilege, the value will be null"
          },
          "object_name": {
            "type": "string",
            "description": "If the privilege is an object privilege, this will be the name of the associate subtype. If the privilege is a usage privilege, the value will be null"
          },
          "object_type": {
            "type": "integer",
            "description": "If the privilege is an object privilege, this will be the associate subtype. If the privilege is a usage privilege, the value will be null"
          },
          "type": {
            "type": "integer",
            "description": "The UAPI type of the privilege. This will be the value of UAPI.FACTORY"
          },
          "type_name": {
            "type": "string",
            "description": "The name of the UAPI type of the privilege."
          },
          "usage_id": {
            "type": "string",
            "description": "If the privilege is a usage privilege, this will be the internal ID of the privilege. If the privilege is an object privilege, the value will be null"
          },
          "usage_name": {
            "type": "string",
            "description": "If the privilege is a usage privilege, this will be the name of the privilege. If the privilege is an object privilege, the value will be null"
          },
          "usage_type": {
            "type": "string",
            "description": "If the privilege is a usage privilege, this will be the internal ID of the privilege's usage type. If the privilege is an object privilege, the value will be null"
          },
          "object_type_name": {
            "type": "string",
            "description": "If the privilege is a usage privilege, this will be the name of the usage type of the privilege. If the privilege is an object privilege, the value will be null"
          }
        }
      },
      "serverinfo_language": {
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean",
            "description": "A flag that indicates if this the default language"
          },
          "language_code": {
            "type": "string",
            "description": "The internal language code for the language"
          },
          "display_name": {
            "type": "string",
            "description": "The display name of the language"
          }
        }
      },
      "serverinfo_sessions": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "A flag that indicates if this the session expiration is enabled"
          },
          "expire_after_last_request": {
            "type": "boolean",
            "description": "A flag that indicates if the session should expire after a set time after the last request has been made"
          },
          "expire_after_last_login": {
            "type": "boolean",
            "description": "A flag that indicates if the session should expire after a set time after logging in"
          },
          "session_timeout": {
            "type": "integer",
            "description": "When the session should expire (in milliseconds)"
          },
          "session_inactivity": {
            "type": "integer",
            "description": "The amount of time a session can be inactive before an alert should appear (in milliseconds)"
          },
          "session_reaction_time": {
            "type": "integer",
            "description": "The amount of time that the user has to continue or end their session in the session timeout alert (in milliseconds)"
          },
          "logout_url": {
            "type": "string",
            "description": "A portion of the URL to be used in order to allow the user to log out"
          }
        }
      },
      "serverinfo_mobile": {
        "type": "object",
        "properties": {
          "offline_use": {
            "type": "boolean",
            "description": "A flag that indicates if users can download objects to their mobile device"
          }
        }
      },
      "serverinfo_server": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The base Content Server URL"
          },
          "character_encoding": {
            "type": "integer",
            "description": "Indicates the type of character encoding used by Content Server, as specified by one of the Character Encoding Constants"
          },
          "version": {
            "type": "string",
            "description": "The release and update version of Content Server (for example, 16.2.3)"
          },
          "current_locale_suffix": {
            "type": "string",
            "description": "Indicates the locale suffix used by Content Server, for example, _en_US"
          },
          "domain_access_enabled": {
            "type": "boolean",
            "description": "A flag that indicates if domain access is enabled in Content Server"
          },
          "time_zone_offset_enabled": {
            "type": "boolean",
            "description": "A flag which indicates if the time zone offset setting is enabled in Content Server"
          },
          "language_code": {
            "type": "string",
            "description": "Indicates the language code in use in Content Server"
          },
          "languages": {
            "type": "array",
            "description": "List of all display languages currently enabled in Content Server",
            "items": {
              "$ref": "#/components/schemas/serverinfo_language"
            }
          },
          "metadata_languages": {
            "type": "array",
            "description": "List of all metadata languages currently enabled in Content Server",
            "items": {
              "$ref": "#/components/schemas/serverinfo_language"
            }
          },
          "current_date": {
            "type": "string",
            "format": "date-time",
            "description": "Content Server's current date and time that follows ISO 8601 format, which is YYYY-MM-DDThh:mm:ss"
          },
          "force_download_for_mime_types": {
            "type": "array",
            "description": "List of MIME types which are forced to be downloaded before they are opened in the browser window",
            "items": {
              "type": "string"
            }
          },
          "advanced_versioning": {
            "type": "boolean",
            "description": "A flag which indicates if the Advanced Versioning setting is enabled in Content Server"
          },
          "enhanced_advanced_versioning": {
            "type": "boolean",
            "description": "A flag which indicates if the Enhanced Advanced Versioning setting is enabled in Content Server"
          },
          "xecmgovInstalled": {
            "type": "boolean",
            "description": "A flag which indicates if the Extended ECM for Government setting for mobile is enabled in Content Server"
          }
        }
      },
      "serverinfo_viewer": {
        "type": "object",
        "properties": {
          "content_suite": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/serverinfo_cs_viewer"
            }
          }
        }
      },
      "serverinfo_cs_viewer": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Boolean indicating if the Content Suite Viewer is enabled"
          },
          "supported_mime_types": {
            "type": "array",
            "description": "List of MIME types which are supported by the Content Suite Viewer",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "tabs_CategoriesTabInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/tabs_Data"
          },
          "definitions": {
            "$ref": "#/components/schemas/tabs_Definitions"
          },
          "definitions_map": {
            "$ref": "#/components/schemas/tabs_DefinitionsMap"
          },
          "definitions_order": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ordering of the categories in the categories tab"
          }
        }
      },
      "tabs_Data": {
        "type": "object"
      },
      "tabs_Definitions": {
        "type": "object"
      },
      "tabs_DefinitionsMap": {
        "type": "object"
      },
      "tklattribute_ValidValues": {
        "type": "object",
        "properties": {
          "attribute_key": {
            "description": "Attribute Key",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "tklattribute_DefaultValue": {
        "type": "object",
        "properties": {
          "attribute_key": {
            "description": "Attribute Value",
            "type": "string"
          }
        }
      },
      "tklattribute_V2ResponseElement": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tklattribute_V2Result"
            }
          }
        }
      },
      "tklattribute_V2Result": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "DefaultValues",
            "items": {
              "$ref": "#/components/schemas/tklattribute_DefaultValue"
            }
          }
        }
      },
      "validation_CheckCategoriesInfo": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/validation_CheckCategoriesItem"
            }
          }
        }
      },
      "validation_CheckCategoriesItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the node whose subtype enforces required attributes"
          }
        }
      },
      "validation_CheckNodesInfo": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/validation_CheckNodesItem"
            }
          }
        }
      },
      "validation_CheckNamesInfo": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/validation_CheckNamesItem"
            }
          }
        }
      },
      "validation_CheckNamesItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the node which was matched on the parent by name"
          },
          "name": {
            "type": "string",
            "description": "The name of the node which was matched on the parent by name"
          }
        }
      },
      "validation_CheckNodesItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "If the node exists (ie. there was a name collision), this is the node's ID, otherwise it is null"
          },
          "name": {
            "type": "string",
            "description": "The name that was input as part of the body parameter to this call"
          },
          "type": {
            "type": "integer",
            "description": "If the node exists (ie. there was a name collision), this is the node's subtype, otherwise it is the suggested subtype for the name (based on file extension)"
          },
          "versioned": {
            "type": "boolean",
            "description": "Whether the node supports versions"
          }
        }
      },
      "versions_VersionsInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_VersionInfo"
            }
          },
          "definitions": {
            "$ref": "#/components/schemas/versions_Definitions"
          }
        }
      },
      "versions_OneVersionInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_VersionInfo"
            }
          },
          "definitions": {
            "$ref": "#/components/schemas/versions_Definitions"
          }
        }
      },
      "versions_CategoryInfo": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Category information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_CategoryInfoData"
            }
          },
          "definitions": {
            "$ref": "#/components/schemas/versions_Definitions"
          },
          "definitions_order": {
            "description": "Default order of the fields defined in data",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "definitions_map": {
            "$ref": "#/components/schemas/versions_DefinitionsMap"
          }
        }
      },
      "versions_LatestVersionInfo": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_VersionInfo"
            }
          },
          "definitions": {
            "$ref": "#/components/schemas/versions_Definitions"
          }
        }
      },
      "versions_DownloadVersion": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The contents of the given version of the given node",
            "type": "string"
          }
        }
      },
      "versions_DownloadNamedVersion": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The contents of the given version of the given node",
            "type": "string"
          }
        }
      },
      "versions_VersionThumbnails": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Image size information"
          },
          "definitions": {
            "$ref": "#/components/schemas/versions_Definitions"
          },
          "definitions_map": {
            "$ref": "#/components/schemas/versions_DefinitionsMap"
          },
          "definitions_order": {
            "description": "The order items should be displayed in.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "versions_DownloadVersionThumbnail": {
        "type": "object",
        "properties": {
          "data": {
            "description": "The given image of the given node version",
            "type": "string"
          }
        }
      },
      "versions_VersionInfo": {
        "type": "object",
        "properties": {
          "create_date": {
            "type": "string",
            "format": "date-time",
            "description": "(Can be time-zone aware) The version's creation date"
          },
          "description": {
            "type": "string",
            "description": "The version's description"
          },
          "external_create_date": {
            "type": "string",
            "format": "date",
            "description": "External create date. This property will not be returned if the node is a Category."
          },
          "external_identity": {
            "type": "string",
            "description": "External identity. This property will not be returned if the node is a Category."
          },
          "external_identity_type": {
            "type": "string",
            "description": "External identity type. This property will not be returned if the node is a Category."
          },
          "external_modify_date": {
            "type": "string",
            "format": "date",
            "description": "External modify date. This property will not be returned if the node is a Category."
          },
          "external_source": {
            "type": "string",
            "description": "External source. This property will not be returned if the node is a Category."
          },
          "file_create_date": {
            "type": "string",
            "format": "date-time",
            "description": "(Can be time-zone aware) The creation date of the file used for the version. This property will not be returned if the node is a Category."
          },
          "file_modify_date": {
            "type": "string",
            "format": "date-time",
            "description": "(Can be time-zone aware) The modification date of the file used for the version. This property will not be returned if the node is a Category."
          },
          "file_name": {
            "type": "string",
            "description": "The name of the file used for the version"
          },
          "file_size": {
            "type": "integer",
            "description": "The data size of the file used for the version"
          },
          "file_type": {
            "type": "string",
            "description": "The extension from the name of the file used for the version"
          },
          "has_generation": {
            "type": "boolean",
            "description": "Indicates if there is a Generation associated with this version"
          },
          "id": {
            "type": "integer",
            "description": "The ID of the version"
          },
          "locked": {
            "type": "integer",
            "description": "Legacy"
          },
          "locked_date": {
            "type": "string",
            "format": "date-time",
            "description": "(Can be time-zone aware) Legacy"
          },
          "locked_user_id": {
            "type": "integer",
            "description": "Legacy"
          },
          "mime_type": {
            "type": "string",
            "description": "The MIME type for the version"
          },
          "modify_date": {
            "type": "string",
            "format": "date-time",
            "description": "(Can be time-zone aware) The modification date of the version"
          },
          "owner_id": {
            "type": "integer",
            "description": "The ID of the owner of the version"
          },
          "provider_name": {
            "type": "string",
            "description": "The name of the storage provider"
          },
          "version_id": {
            "type": "integer",
            "description": "The ID of the version"
          },
          "version_number": {
            "type": "integer",
            "description": "The version number"
          },
          "version_major_number": {
            "type": "integer",
            "description": "The major version number. This property will not be returned if the node is a Category."
          },
          "version_minor_number": {
            "type": "integer",
            "description": "The minor version number. This property will not be returned if the node is a Category."
          }
        }
      },
      "versions_VersionActionsInfo": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/versions_ActionData"
          },
          "definitions": {
            "$ref": "#/components/schemas/versions_Definitions"
          },
          "definitions_map": {
            "$ref": "#/components/schemas/versions_DefinitionsMap"
          },
          "definitions_order": {
            "description": "The order items should be displayed in. Note: An item in definitions_order may be a key in definitions_map. If so, that indicates there are related sub-items and they are considered higher in order than the next item in definitions_order",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "versions_NewVersionInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the version"
          },
          "version_number": {
            "type": "integer",
            "description": "The version number"
          }
        }
      },
      "versions_ActionData": {
        "type": "object"
      },
      "versions_Definitions": {
        "type": "object"
      },
      "versions_DefinitionsMap": {
        "type": "object"
      },
      "versions_V2CategoriesResponse": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2DataCategories"
            }
          }
        }
      },
      "versions_V2DataCategories": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Categories"
            }
          }
        }
      },
      "versions_V2Categories": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2EmptyResults"
            }
          }
        }
      },
      "versions_V2DataVersions": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "description": "Versions",
            "items": {
              "$ref": "#/components/schemas/versions_VersionInfo"
            }
          }
        }
      },
      "versions_V2DataVersionsSingle": {
        "type": "object",
        "properties": {
          "versions": {
            "type": "array",
            "description": "Versions",
            "items": {
              "$ref": "#/components/schemas/versions_VersionInfo"
            }
          }
        }
      },
      "versions_V2DataVersionsAdd": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/versions_V2Properties"
            }
          },
          "versions": {
            "type": "array",
            "description": "Versions",
            "items": {
              "$ref": "#/components/schemas/versions_VersionInfo"
            }
          }
        }
      },
      "versions_V2EmptyResults": {
        "type": "object"
      },
      "versions_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "versions_V2Paging": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Limit"
          },
          "page": {
            "type": "integer",
            "description": "Page"
          },
          "page_total": {
            "type": "integer",
            "description": "Page Total"
          }
        }
      },
      "versions_V2Links": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Links data",
            "type": "object",
            "properties": {
              "self": {
                "type": "array",
                "description": "self link",
                "items": {
                  "$ref": "#/components/schemas/versions_V2Link"
                }
              }
            }
          }
        }
      },
      "versions_V2Collection": {
        "type": "object",
        "properties": {
          "paging": {
            "description": "Collection paging",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Paging"
            }
          }
        }
      },
      "versions_V2ResponseVersions": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2ResultVersions"
            }
          },
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Collection"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          }
        }
      },
      "versions_V2ResponseVersionsSingle": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2ResultVersionsSingle"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          }
        }
      },
      "versions_V2ResponseVersionsAdd": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2ResultVersionsAdd"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          }
        }
      },
      "versions_V2ResponseVersionsDelete": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2EmptyResults"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          }
        }
      },
      "versions_V2ResponseVersionsPurge": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2EmptyResults"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          }
        }
      },
      "versions_V2ResultVersions": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/versions_V2DataVersions"
            }
          }
        }
      },
      "versions_V2ResultVersionsSingle": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/versions_V2DataVersionsSingle"
            }
          }
        }
      },
      "versions_V2ResultVersionsAdd": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/versions_V2DataVersionsAdd"
            }
          }
        }
      },
      "versions_V2Properties": {
        "type": "object",
        "properties": {
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "create_date": {
            "description": "(Can be time-zone aware) The date that the item was created",
            "type": "string"
          },
          "create_user_id": {
            "description": "The id of the user who created the item",
            "type": "integer"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/versions_DescriptionMultilingual"
          },
          "external_create_date": {
            "description": "External create date",
            "type": "string",
            "format": "date"
          },
          "external_identity": {
            "description": "External identity",
            "type": "string"
          },
          "external_identity_type": {
            "description": "External identity type",
            "type": "string"
          },
          "external_modify_date": {
            "description": "External modify date",
            "type": "string",
            "format": "date"
          },
          "external_source": {
            "description": "External source",
            "type": "string"
          },
          "favorite": {
            "description": "Indicates if this item has been favorited by the current user",
            "type": "boolean"
          },
          "guid": {
            "description": "Globally unique id",
            "type": "string"
          },
          "icon": {
            "description": "The item's icon",
            "type": "string"
          },
          "icon_large": {
            "description": "The item's icon (large)",
            "type": "string"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "modify_date": {
            "description": "(Can be time-zone aware) The date on which the item was last modified",
            "type": "string",
            "format": "date"
          },
          "modify_user_id": {
            "description": "The id of the user who modified the item",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/versions_NameMultilingual"
          },
          "owner_group_id": {
            "description": "The group id of the owner of this item",
            "type": "integer"
          },
          "owner_user_id": {
            "description": "The user id of the owner of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "The object id of the item's parent",
            "type": "integer"
          },
          "reserved": {
            "description": "Whether or not this item has been reserved",
            "type": "boolean"
          },
          "reserved_date": {
            "description": "(Can be time-zone aware) The date on which the item was reserved",
            "type": "string"
          },
          "reserved_user_id": {
            "description": "The id of the user who has this item reserved",
            "type": "integer"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "versionable": {
            "description": "TRUE if this item has versionable content, FALSE otherwise",
            "type": "boolean"
          },
          "versions_control_advanced": {
            "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
            "type": "boolean"
          },
          "volume_id": {
            "description": "The id of the volume to which this item belongs",
            "type": "integer"
          }
        }
      },
      "versions_V2ResultRenditionsListAll": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/versions_V2ResultRenditionsByVersion"
          }
        }
      },
      "versions_V2ResultRenditionsByVersion": {
        "type": "object",
        "properties": {
          "<version_number>": {
            "type": "array",
            "description": "Renditions information for each version",
            "items": {
              "$ref": "#/components/schemas/versions_RenditionInfo"
            }
          }
        }
      },
      "versions_V2ResultRenditions": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/versions_RenditionInfo"
            }
          }
        }
      },
      "versions_V2ResponseRenditions": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2ResultRenditions"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          }
        }
      },
      "versions_V2ResponseRenditionsAdd": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2ResultRenditionsAdd"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          }
        }
      },
      "versions_V2ResultRenditionsAdd": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_RenditionInfo"
            }
          }
        }
      },
      "versions_V2ResponseRenditionsReplace": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2ResultRenditionsReplace"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          }
        }
      },
      "versions_V2ResultRenditionsReplace": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_RenditionInfo"
            }
          }
        }
      },
      "versions_RenditionInfo": {
        "type": "object",
        "properties": {
          "create_date": {
            "type": "string",
            "format": "date-time",
            "description": "(Can be time-zone aware) The rendition's creation date"
          },
          "external_create_date": {
            "type": "string",
            "format": "date",
            "description": "External create date. This property will not be returned if the node is a Category."
          },
          "external_identity": {
            "type": "string",
            "description": "External identity. This property will not be returned if the node is a Category."
          },
          "external_identity_type": {
            "type": "string",
            "description": "External identity type. This property will not be returned if the node is a Category."
          },
          "external_modify_date": {
            "type": "string",
            "format": "date",
            "description": "External modify date. This property will not be returned if the node is a Category."
          },
          "external_source": {
            "type": "string",
            "description": "External source. This property will not be returned if the node is a Category."
          },
          "file_create_date": {
            "type": "string",
            "format": "date-time",
            "description": "(Can be time-zone aware) The creation date of the file used for the rendition. This property will not be returned if the node is a Category."
          },
          "file_modify_date": {
            "type": "string",
            "format": "date-time",
            "description": "(Can be time-zone aware) The modification date of the file used for the rendition. This property will not be returned if the node is a Category."
          },
          "file_name": {
            "type": "string",
            "description": "The name of the file used for the rendition"
          },
          "file_size": {
            "type": "integer",
            "description": "The data size of the file used for the rendition"
          },
          "file_type": {
            "type": "string",
            "description": "The extension from the name of the file used for the rendition"
          },
          "id": {
            "type": "integer",
            "description": "The ID of the rendition"
          },
          "mime_type": {
            "type": "string",
            "description": "The MIME type for the rendition"
          },
          "modify_date": {
            "type": "string",
            "format": "date-time",
            "description": "(Can be time-zone aware) The modification date of the rendition"
          },
          "rendition_type": {
            "type": "string",
            "description": "The type of the rendition"
          },
          "owner_id": {
            "type": "integer",
            "description": "The ID of the owner of the rendition"
          },
          "version_number": {
            "type": "integer",
            "description": "The version number of the rendition"
          },
          "version_major_number": {
            "type": "integer",
            "description": "The major version number. This property will not be returned if the node is a Category."
          },
          "version_minor_number": {
            "type": "integer",
            "description": "The minor version number. This property will not be returned if the node is a Category."
          },
          "version_number_name": {
            "type": "string",
            "description": "The name of the version number. This property will not be returned if the node is a Category."
          }
        }
      },
      "versions_V2ResponseRenditionsDelete": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2EmptyResults"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/versions_V2Links"
            }
          }
        }
      },
      "versions_CategoryInfoData": {
        "type": "object",
        "properties": {
          "{attribute_key}": {
            "description": "Attribute value",
            "type": "string"
          }
        }
      },
      "versions_DescriptionMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Description in English"
          },
          "de": {
            "type": "string",
            "description": "Beschreibung in Deutsch"
          }
        }
      },
      "versions_NameMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Name in English"
          },
          "de": {
            "type": "string",
            "description": "Name auf Deutsch"
          }
        }
      },
      "volumes_NodeInfo": {
        "type": "object",
        "properties": {
          "volume_id": {
            "description": "ID of the volume to which this item belongs",
            "type": "integer"
          },
          "id": {
            "description": "Unique identifier of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "ID of the parent container",
            "type": "integer"
          },
          "name": {
            "description": "Item name",
            "type": "string"
          },
          "type": {
            "description": "Item type, as a number",
            "type": "integer"
          },
          "description": {
            "description": "Item description",
            "type": "string"
          },
          "create_date": {
            "description": "Date of creation",
            "type": "string",
            "format": "date-time"
          },
          "modify_date": {
            "description": "Date of last modification",
            "type": "string",
            "format": "date-time"
          },
          "reserved": {
            "description": "Is this item reserved",
            "type": "boolean"
          },
          "reserved_user_id": {
            "description": "ID of user that reserved this item",
            "type": "integer"
          },
          "reserved_date": {
            "description": "Date this item was reserved",
            "type": "string",
            "format": "date-time"
          },
          "icon": {
            "description": "Path to the icon for the type of this item",
            "type": "string"
          },
          "mime_type": {
            "description": "Mime type of the object",
            "type": "string"
          },
          "original_id": {
            "description": "ID of original item - used when this item is a shortcut",
            "type": "integer"
          },
          "wnd_owner": {
            "description": "ID of user who is this item's owner",
            "type": "integer"
          },
          "wnd_createdby": {
            "description": "ID of user who created this item",
            "type": "integer"
          },
          "wnd_createdate": {
            "description": "Date item was created",
            "type": "string",
            "format": "date-time"
          },
          "wnd_modifiedby": {
            "description": "ID of user who last modified this item",
            "type": "integer"
          },
          "wnd_version": {
            "description": "Version of this item",
            "type": "integer"
          },
          "type_name": {
            "description": "Item type, as a word",
            "type": "string"
          },
          "container": {
            "description": "Is this item a container",
            "type": "boolean"
          },
          "size": {
            "description": "Size of this item",
            "type": "integer"
          },
          "perm_see": {
            "type": "boolean"
          },
          "perm_see_contents": {
            "type": "boolean"
          },
          "perm_modify": {
            "type": "boolean"
          },
          "perm_modify_attributes": {
            "type": "boolean"
          },
          "perm_modify_permissions": {
            "type": "boolean"
          },
          "perm_create": {
            "type": "boolean"
          },
          "perm_delete": {
            "type": "boolean"
          },
          "perm_delete_versions": {
            "type": "boolean"
          },
          "perm_reserve": {
            "type": "boolean"
          },
          "perm_add_major_version": {
            "type": "boolean"
          },
          "cell_metadata": {
            "$ref": "#/components/schemas/volumes_CellMetadata"
          },
          "menu": {
            "type": "string",
            "description": ""
          },
          "size_formatted": {
            "description": "Size of this item with an appropriate units based on type (i.e. 11 items or 7 KB)",
            "type": "string"
          },
          "reserved_user_login": {
            "type": "string"
          },
          "action_url": {
            "description": "URL for getting available actions on this item",
            "type": "string"
          },
          "parent_id_url": {
            "description": "URL for getting metadata about this item's parent container",
            "type": "string"
          },
          "actions": {
            "type": "array",
            "description": "Actions possible on this node (only with query-parameter actions=true)",
            "items": {
              "$ref": "#/components/schemas/volumes_ActionInfo"
            }
          }
        }
      },
      "volumes_CellMetadata": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/volumes_CellMetadataData"
          },
          "definitions": {
            "$ref": "#/components/schemas/volumes_CellMetadataDefinitions"
          }
        }
      },
      "volumes_InfoResults": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_Data"
            }
          },
          "definitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_InfoDefinitions"
            }
          },
          "definitions_map": {
            "$ref": "#/components/schemas/volumes_DefinitionsMap"
          },
          "definitions_order": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The suggested order in which data for each item should be displayed"
          },
          "limit": {
            "description": "The maximum number of records that can be returned",
            "type": "integer"
          },
          "page": {
            "description": "Number of the current page",
            "type": "integer"
          },
          "sort": {
            "description": "Order by named column. Format can be sort=name, or sort=asc_name, or sort=desc_name.",
            "type": "string"
          },
          "where_facet": {
            "description": "Facets on which results are filtered",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "where_name": {
            "description": "Name on which results are filtered",
            "type": "integer"
          },
          "where_type": {
            "description": "Types on which results are filtered",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "volumes_DefinitionsMap": {
        "type": "object"
      },
      "volumes_InfoResult": {
        "type": "object",
        "properties": {
          "addable_types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_AddableTypes"
            }
          },
          "available_actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_AvailableActions"
            }
          },
          "available_roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_AvailableRoles"
            }
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_Data"
            }
          },
          "definitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_InfoDefinitions"
            }
          },
          "definitions_base": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The definitions that are common to all nodes"
          },
          "definitions_order": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The suggested order in which data for each item should be displayed"
          },
          "type": {
            "description": "An id representing the type of the object",
            "type": "integer"
          },
          "type_info": {
            "$ref": "#/components/schemas/volumes_TypeInfo"
          },
          "type_name": {
            "description": "The name of the type of object",
            "type": "string"
          }
        }
      },
      "volumes_AddableTypes": {
        "type": "object",
        "properties": {
          "icon": {
            "type": "string",
            "description": "A relative URL to the object's icon"
          },
          "type": {
            "type": "integer",
            "description": "An ID representing the type of the object"
          },
          "type_name": {
            "type": "string",
            "description": "The name of the type of object"
          }
        }
      },
      "volumes_AvailableActions": {
        "type": "object",
        "properties": {
          "parameterless": {
            "type": "boolean",
            "description": "TRUE if this action has parameters, FALSE otherwise"
          },
          "read_only": {
            "type": "boolean",
            "description": "TRUE if this action does not modify data, FALSE otherwise"
          },
          "type": {
            "type": "string",
            "description": "The type of action"
          },
          "type_name": {
            "type": "string",
            "description": "The name of action"
          },
          "webnode_signature": {
            "type": "string",
            "description": "A unique name for this action"
          }
        }
      },
      "volumes_AvailableRoles": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of role"
          },
          "type_name": {
            "type": "string",
            "description": "The name of role"
          }
        }
      },
      "volumes_Data": {
        "type": "object",
        "properties": {
          "create_date": {
            "type": "string",
            "description": "Creation date of this object"
          },
          "create_user_id": {
            "type": "integer",
            "description": "The id of the user "
          },
          "description": {
            "type": "string",
            "description": "Description of the object"
          },
          "description_multilingual": {
            "description": "Locale specific item description",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_DescriptionMultilingual"
            }
          },
          "guid": {
            "type": "string",
            "description": "Global unique identifier"
          },
          "icon": {
            "description": "Path to the type specific icon",
            "type": "string"
          },
          "icon_large": {
            "description": "Path to the type specific large icon",
            "type": "string"
          },
          "id": {
            "type": "integer",
            "description": "A unique id for this object"
          },
          "modify_date": {
            "type": "string",
            "description": "Date when this object was modified"
          },
          "modify_user_id": {
            "type": "integer",
            "description": "The id of the user who modified this object"
          },
          "name": {
            "type": "string",
            "description": "Name of the object"
          },
          "name_multilingual": {
            "description": "Locale specific item name",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_NameMultilingual"
            }
          },
          "owner_group_id": {
            "type": "integer",
            "description": "The id of the group to which the owner of this object belongs"
          },
          "owner_user_id": {
            "type": "integer",
            "description": "The id of the user who owns this object"
          },
          "parent_id": {
            "type": "integer",
            "description": "The id of the parent object of which this object is a child"
          },
          "reserved": {
            "type": "boolean",
            "description": "TRUE if this object is reserved, FALSE otherwise"
          },
          "reserved_date": {
            "type": "string",
            "description": "Date when this object was reserved"
          },
          "reserved_user_id": {
            "type": "integer",
            "description": "The id of the user who has reserved this object"
          },
          "type": {
            "type": "integer",
            "description": "An ID representing the type of the object"
          },
          "type_name": {
            "type": "string",
            "description": "The name of the type of object"
          },
          "versions_control_advanced": {
            "type": "boolean",
            "description": "True if Advanced Versioning is enabled on this object, false otherwise"
          },
          "volume_id": {
            "type": "integer",
            "description": "The ID of the volume"
          }
        }
      },
      "volumes_VolumeBrowse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_NodeInfo"
            }
          },
          "definitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_InfoDefinitions"
            }
          },
          "definitions_map": {
            "$ref": "#/components/schemas/volumes_DefinitionsMap"
          },
          "definitions_order": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The suggested order in which data for each item should be displayed"
          },
          "limit": {
            "description": "Maximum number of items returned per page",
            "type": "integer"
          },
          "page": {
            "description": "Number of the current page",
            "type": "integer"
          },
          "page_total": {
            "description": "Total number of pages available",
            "type": "integer"
          },
          "range_max": {
            "description": "Number of the ending item for this page",
            "type": "integer"
          },
          "range_min": {
            "description": "Number of the starting item for this page",
            "type": "integer"
          },
          "sort": {
            "description": "Direction and column name on which the results are sorted",
            "type": "string"
          },
          "total_count": {
            "description": "Total number of items available",
            "type": "integer"
          },
          "where_facet": {
            "description": "Facets on which results are filtered",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "where_name": {
            "description": "Name on which results are filtered",
            "type": "integer"
          },
          "where_type": {
            "description": "Types on which results are filtered",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "volumes_ActionInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The action's name (as shown in UI representation)"
          },
          "url": {
            "type": "string",
            "description": "The url to be called on the action's execution"
          },
          "children": {
            "description": "List of sub-actions available.  This appears when the action is a sub-menu",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_ActionInfoChild"
            }
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "volumes_ActionInfoChild": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The action's name (as shown in UI representation)"
          },
          "url": {
            "type": "string",
            "description": "The url to be called on the action's execution"
          },
          "signature": {
            "type": "string"
          }
        }
      },
      "volumes_TypeInfo": {
        "type": "object",
        "properties": {
          "advanced_versioning": {
            "description": "True if this document has advanced versioning, false otherwise",
            "type": "boolean"
          },
          "container": {
            "description": "True if this object is a container",
            "type": "boolean"
          }
        }
      },
      "volumes_InfoDefinitions": {
        "type": "object"
      },
      "volumes_V2ResponseElement": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Result"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2DataLinks"
            }
          }
        }
      },
      "volumes_V2BrowseRecycleBinResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/volumes_V2BrowseRecycleBinData"
            }
          }
        }
      },
      "volumes_V2BrowseRecycleBinData": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/volumes_V2BrowseRecycleBinProperties"
            }
          }
        }
      },
      "volumes_V2Result": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Data"
            }
          }
        }
      },
      "volumes_V2Data": {
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "description": "columns",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Columns"
            }
          },
          "properties": {
            "type": "array",
            "description": "Properites",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Properties"
            }
          }
        }
      },
      "volumes_V2Columns": {
        "type": "object",
        "properties": {
          "data_type": {
            "type": "integer",
            "description": "data type"
          },
          "key": {
            "type": "string",
            "description": "key"
          },
          "name": {
            "type": "string",
            "description": "name"
          },
          "sort_key": {
            "type": "string",
            "description": "sort_key"
          }
        }
      },
      "volumes_V2DataLinks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Links"
            }
          }
        }
      },
      "volumes_V2Links": {
        "type": "object",
        "properties": {
          "self": {
            "type": "array",
            "description": "Self link",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Link"
            }
          }
        }
      },
      "volumes_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "volumes_V2Properties": {
        "type": "object",
        "properties": {
          "container": {
            "description": "Whether or not this item is a container",
            "type": "boolean"
          },
          "container_size": {
            "description": "The number of items in this container",
            "type": "integer"
          },
          "create_date": {
            "description": "The date that the item was created",
            "type": "string"
          },
          "create_user_id": {
            "description": "The id of the user who created the item",
            "type": "integer"
          },
          "description": {
            "description": "Description of the item",
            "type": "string"
          },
          "description_multilingual": {
            "$ref": "#/components/schemas/volumes_DescriptionMultilingual"
          },
          "external_create_date": {
            "description": "External create date",
            "type": "string",
            "format": "date"
          },
          "external_identity": {
            "description": "External identity",
            "type": "string"
          },
          "external_identity_type": {
            "description": "External identity type",
            "type": "string"
          },
          "external_modify_date": {
            "description": "External modify date",
            "type": "string",
            "format": "date"
          },
          "external_source": {
            "description": "External source",
            "type": "string"
          },
          "favorite": {
            "description": "Indicates if this item has been favorited by the current user",
            "type": "boolean"
          },
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "mime_type": {
            "description": "Mime type of the object",
            "type": "string"
          },
          "modify_date": {
            "description": "The date on which the item was last modified",
            "type": "string",
            "format": "date"
          },
          "modify_user_id": {
            "description": "The id of the user who modified the item",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "name_multilingual": {
            "$ref": "#/components/schemas/volumes_NameMultilingual"
          },
          "owner": {
            "description": "The name of the owner of this item",
            "type": "string"
          },
          "owner_group_id": {
            "description": "The group id of the owner of this item",
            "type": "integer"
          },
          "owner_user_id": {
            "description": "The user id of the owner of this item",
            "type": "integer"
          },
          "parent_id": {
            "description": "The object id of the item's parent",
            "type": "integer"
          },
          "reserved": {
            "description": "Whether or not this item has been reserved",
            "type": "boolean"
          },
          "reserved_date": {
            "description": "The date on which the item was reserved",
            "type": "string"
          },
          "reserved_user_id": {
            "description": "The id of the user who has this item reserved",
            "type": "integer"
          },
          "size": {
            "description": "Size of this item",
            "type": "integer"
          },
          "size_formatted": {
            "description": "Size of this item with an appropriate units based on type (i.e. 11 items or 7 KB)",
            "type": "string"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "type_name": {
            "description": "The item's type",
            "type": "string"
          },
          "versions_control_advanced": {
            "description": "Whether or not newly added items to this item are added as advanced versioning (major/minor versioning)",
            "type": "boolean"
          },
          "volume_id": {
            "description": "The id of the volume to which this item belongs",
            "type": "integer"
          }
        }
      },
      "volumes_V2BrowseRecycleBinProperties": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The item's unique object ID",
            "type": "integer"
          },
          "type": {
            "description": "The item's type (unique number)",
            "type": "integer"
          },
          "name": {
            "description": "The name of the item",
            "type": "string"
          },
          "deleted_user_id": {
            "description": "The ID of the user who deleted the item",
            "type": "integer"
          },
          "purged_date": {
            "description": "The date when the item will be purged (default setting is 60 days from the deleted_date, but can be changed in Content Server Admin settings to any other value)",
            "type": "string",
            "format": "date"
          },
          "deleted_date": {
            "description": "The date on which the item was deleted",
            "type": "string",
            "format": "date"
          },
          "parent_id": {
            "description": "The object ID of the item's parent (before it was deleted, a.k.a. the location)",
            "type": "integer"
          }
        }
      },
      "volumes_BrowseResult2": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Collection"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Result"
            }
          }
        }
      },
      "volumes_BrowseRecyleBinResult2": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_BrowseRecycleBinV2Collection"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2BrowseRecycleBinResult"
            }
          }
        }
      },
      "volumes_BrowseRecycleBinV2Collection": {
        "type": "object",
        "properties": {
          "filtering": {
            "type": "object",
            "description": "Filtering information",
            "properties": {
              "filter": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/volumes_V2FilterObj"
                }
              }
            }
          },
          "paging": {
            "type": "array",
            "description": "Paging Information",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Paging"
            }
          },
          "sorting": {
            "type": "array",
            "description": "Sorting information",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Sorting"
            }
          }
        }
      },
      "volumes_V2Collection": {
        "type": "object",
        "properties": {
          "paging": {
            "type": "array",
            "description": "Paging Information",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Paging"
            }
          },
          "sorting": {
            "type": "array",
            "description": "Sorting information",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Sorting"
            }
          }
        }
      },
      "volumes_V2Paging": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "limit"
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "links"
          },
          "page": {
            "type": "integer",
            "description": "page"
          },
          "page_total": {
            "type": "integer",
            "description": "page total"
          },
          "range_max": {
            "type": "integer",
            "description": "range max"
          },
          "range_min": {
            "type": "integer",
            "description": "range min"
          },
          "total_count": {
            "type": "integer",
            "description": "total count"
          }
        }
      },
      "volumes_V2FilterObj": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "volumes_V2Mode": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/volumes_V2ModeObj"
            }
          }
        }
      },
      "volumes_V2ModeObj": {
        "type": "object"
      },
      "volumes_V2Sorting": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Sort"
            }
          }
        }
      },
      "volumes_V2Sort": {
        "type": "object"
      },
      "volumes_BrowseVolumes2": {
        "type": "object",
        "properties": {
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2Result"
            }
          }
        }
      },
      "volumes_CellMetadataData": {
        "type": "object"
      },
      "volumes_CellMetadataDefinitions": {
        "type": "object"
      },
      "volumes_NameMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Name in English"
          },
          "de": {
            "type": "string",
            "description": "Name auf Deutsch"
          }
        }
      },
      "volumes_DescriptionMultilingual": {
        "type": "object",
        "properties": {
          "en": {
            "type": "string",
            "description": "Description in English"
          },
          "de": {
            "type": "string",
            "description": "Beschreibung in Deutsch"
          }
        }
      },
      "volumes_PurgeRestoreRecycleBinResult": {
        "type": "object",
        "properties": {
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2DataLinks"
            }
          },
          "results": {
            "description": "results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/volumes_V2PurgeRecycleBinResults"
            }
          }
        }
      },
      "volumes_V2PurgeRecycleBinResults": {
        "type": "object",
        "properties": {
          "failure": {
            "type": "array",
            "description": "Failure",
            "items": {
              "$ref": "#/components/schemas/volumes_V2PurgeRecycleBinFailure"
            }
          },
          "success": {
            "type": "array",
            "description": "Success",
            "items": {
              "$ref": "#/components/schemas/volumes_V2PurgeRecycleBinSuccess"
            }
          }
        }
      },
      "volumes_V2PurgeRecycleBinFailure": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "description": "Failure error messages",
            "items": {
              "$ref": "#/components/schemas/volumes_V2PurgeRecycleBinFailureMessage"
            }
          },
          "ids": {
            "type": "array",
            "description": "Failure IDs",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "volumes_V2PurgeRecycleBinFailureMessage": {
        "type": "object",
        "properties": {
          "<ID>": {
            "type": "array",
            "description": "Failure error messages",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "volumes_V2PurgeRecycleBinSuccess": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "Success IDs",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "webreports_ParametersListing": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Parameter data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_ParameterData"
            }
          }
        }
      },
      "webreports_ParameterData": {
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of parameter field. Possible types are: 'User', 'ObjectID', 'Number', 'Object', 'String', 'Date', 'Custom'",
            "type": "string"
          },
          "parm_name": {
            "description": "The unique name for the parameter",
            "type": "string"
          },
          "display_text": {
            "description": "The display name associated with parm_name",
            "type": "string"
          },
          "prompt": {
            "description": "Whether the parameter is set to prompt or not",
            "type": "boolean"
          },
          "prompt_order": {
            "description": "The defined order for the parameter relative to other parameters",
            "type": "integer"
          },
          "default_value": {
            "description": "A default value for the parameter"
          },
          "description": {
            "description": "The parameter description",
            "type": "string"
          },
          "mandatory": {
            "description": "Whether the parameter is mandatory or not",
            "type": "boolean"
          },
          "type_specific": {
            "description": "Additional data which is not common to all parameter types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_TypeSpecificData"
            }
          }
        }
      },
      "webreports_TypeSpecificData": {
        "type": "object",
        "properties": {
          "groups_enabled": {
            "description": "Whether groups are enabled for the field. Supported only for the 'User' field type",
            "type": "boolean"
          },
          "users_enabled": {
            "description": "Whether users are enabled for the field. Supported only for the 'User' field type",
            "type": "boolean"
          },
          "user_name": {
            "description": "The display name for the default_value user, if defined. Supported only for the 'User' field type",
            "type": "string"
          },
          "node_name": {
            "description": "The display name for the default_value node, if defined. Supported only for the 'ObjectID' field type",
            "type": "string"
          },
          "node_path": {
            "description": "The path display name for the default_value node, if defined. Supported only for the 'ObjectID' field type",
            "type": "string"
          },
          "subtype_list": {
            "description": "A list of all subtypes in the system. Supported only for the 'ObjectID' field type",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_SubTypeData"
            }
          },
          "valid_subtype_list": {
            "description": "A list of subtypes defined as valid for this parameter. Supported only for the 'ObjectID' field type",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_SubTypeData"
            }
          },
          "subtype_name": {
            "description": "The display name for the default_value subtype, if defined. Supported only for the 'Object' field type",
            "type": "string"
          },
          "time_enabled": {
            "description": "Whether time is enabled for the date field. Supported only for the 'Date' field type",
            "type": "boolean"
          },
          "use_current": {
            "description": "Whether the current time should be used for the date field. Supported only for the 'Date' field type",
            "type": "boolean"
          },
          "content": {
            "description": "A string of HTML code representing the custom form element. Supported only for the 'Custom' field type ",
            "type": "string"
          }
        }
      },
      "webreports_SubTypeData": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the subtype in the list",
            "type": "string"
          },
          "subtype": {
            "description": "The unique ID for the subtype in the list",
            "type": "integer"
          }
        }
      },
      "webreports_OutputResponse": {
        "type": "object",
        "properties": {
          "destination_data": {
            "description": "Destination data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_OutputData"
            }
          },
          "node_id": {
            "description": "(Content Server Node destination only) The node ID of the output",
            "type": "integer"
          },
          "work_id": {
            "description": "(Workflow destination only) The work ID of the initiated workflow",
            "type": "integer"
          }
        }
      },
      "webreports_DestinationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Destination data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_DestinationData"
            }
          }
        }
      },
      "webreports_DestinationData": {
        "type": "object",
        "properties": {
          "destination_specific": {
            "description": "Destination-specific data. Note that the keys in this object will vary based on the Destination tab and permission settings for the WebReport",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_DestinationSpecific"
            }
          },
          "export_if_no_data": {
            "description": "Whether the WebReport is set to export if there is no data",
            "type": "boolean"
          },
          "export_mime_type": {
            "description": "The MIMEType that the WebReport output is written in",
            "type": "string"
          },
          "http_method": {
            "description": "The http method that should be used to run the WebReport based on the destination type",
            "type": "string"
          },
          "output_destination": {
            "description": "The WebReport destination type",
            "type": "string"
          },
          "run_in_background": {
            "description": "Whether the WebReport is set to run in the background",
            "type": "boolean"
          },
          "schedule_data": {
            "description": "Schedule data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_ScheduleData"
            }
          },
          "show_status_screen": {
            "description": "Whether the WebReport is set to display a status page after it is run",
            "type": "boolean"
          },
          "use_conversion_engine": {
            "description": "Whether the conversion engine is set to be used",
            "type": "boolean"
          },
          "xml_job_ticket_id": {
            "description": "ID of the XML job ticket",
            "type": "string"
          }
        }
      },
      "webreports_OutputData": {
        "type": "object",
        "properties": {
          "destination_specific": {
            "description": "Destination-specific data. Note that the keys in this object will vary based on the Destination tab and permission settings for the WebReport",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_OutputSpecific"
            }
          },
          "export_if_no_data": {
            "description": "Whether the WebReport is set to export if there is no data",
            "type": "boolean"
          },
          "export_mime_type": {
            "description": "The MIMEType that the WebReport output is written in",
            "type": "string"
          },
          "http_method": {
            "description": "The http method that should be used to run the WebReport based on the destination type",
            "type": "string"
          },
          "output_destination": {
            "description": "The WebReport destination type",
            "type": "string"
          },
          "run_in_background": {
            "description": "Whether the WebReport is set to run in the background",
            "type": "boolean"
          },
          "schedule_data": {
            "description": "Schedule data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/webreports_ScheduleData"
            }
          },
          "show_status_screen": {
            "description": "Whether the WebReport is set to display a status page after it is run",
            "type": "boolean"
          },
          "use_conversion_engine": {
            "description": "Whether the conversion engine is set to be used",
            "type": "boolean"
          },
          "xml_job_ticket_id": {
            "description": "ID of the XML job ticket",
            "type": "integer"
          }
        }
      },
      "webreports_DestinationSpecific": {
        "type": "object",
        "properties": {
          "category_names": {
            "description": "(Content Server Node destination only): The names of the categories that will be applied to the output node",
            "type": "string"
          },
          "create_in_id (*)": {
            "description": "(Content Server Node destination only): The node ID of the container that the WebReport output will be created in",
            "type": "string"
          },
          "duplicate_name_action": {
            "description": "(Content Server Node destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found in the destination container",
            "type": "string"
          },
          "export_type": {
            "description": "(Content Server Node destination only): Whether the WebReport is set to output to a new node or add a version to an existing node",
            "type": "string"
          },
          "node_description (*)": {
            "description": "(Content Server Node destination only): The description of the output node",
            "type": "string"
          },
          "node_name (*)": {
            "description": "(Content Server Node destination only): The name of the output node",
            "type": "string"
          },
          "node_type": {
            "description": "(Content Server Node destination only): Whether the node type of the output is set to Document or Custom View",
            "type": "string"
          },
          "add_version_to_id": {
            "description": "(Content Server Version destination only): The node to add a version to",
            "type": "string"
          },
          "append_data": {
            "description": "(Content Server Version destination only): Setting used to determine whether the WebReport output should be appended into the text of an existing document",
            "type": "string"
          },
          "end_tag": {
            "description": "(Content Server Version destination only): The end tag if the WebReport output is set to be appended into the text of an existing document between tags",
            "type": "string"
          },
          "overwrite_tags": {
            "description": "(Content Server Version destination only): Whether the output should overwrite tags in the destination text if the WebReport output is set to be appended into the text of an existing document between tags",
            "type": "string"
          },
          "start_tag": {
            "description": "(Content Server Version destination only): The start tag if the WebReport output is set to be appended into the text of an existing document between tags",
            "type": "string"
          },
          "version_description (*)": {
            "description": "(Content Server Version destination only): The description of the output version",
            "type": "string"
          },
          "version_handling": {
            "description": "(Content Server Version destination only): Whether the output should be added as a major or minor version",
            "type": "string"
          },
          "version_name (*)": {
            "description": "(Content Server Version destination only): The name of the output version",
            "type": "string"
          },
          "download_file_name (*)": {
            "description": "(Desktop destination only): The name of the file that the WebReport output is written to",
            "type": "string"
          },
          "attachment_name (*)": {
            "description": "(E-mail destination only): The name of the file attached to the e-mail",
            "type": "string"
          },
          "attach_results_to_email": {
            "description": "(E-mail destination only): Whether the WebReport output should be attached to the e-mail",
            "type": "boolean"
          },
          "email_address (*)": {
            "description": "(E-mail destination only): The e-mail address that the e-mail is being sent to",
            "type": "string"
          },
          "email_address_user_id (*)": {
            "description": "(E-mail destination only): The User ID of the Content Server user that the e-mail is being sent to",
            "type": "string"
          },
          "email_body_text (*)": {
            "description": "(E-mail destination only): The body text of the e-mail",
            "type": "string"
          },
          "email_mailing_list (*)": {
            "description": "(E-mail destination only): The node ID of the Content Server node containing the mailing list that the e-mail is being sent to",
            "type": "string"
          },
          "email_subject (*)": {
            "description": "(E-mail destination only): The Subject of the e-mail",
            "type": "string"
          },
          "append_form": {
            "description": "(Form destination only): Setting used to determine how the WebReport output affects existing form data",
            "type": "string"
          },
          "form_id (*)": {
            "description": "(Form destination only): The node ID of the Form being used as the destination of the WebReport",
            "type": "string"
          },
          "ftp_anonymous": {
            "description": "(FTP destination only): Whether the WebReport is set to login to the FTP Server anonymously",
            "type": "boolean"
          },
          "ftp_copy_options": {
            "description": "(FTP destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found on the destination FTP server",
            "type": "string"
          },
          "ftp_file_path (*)": {
            "description": "(FTP destination only): The relative path to the destination file from the FTP root folder",
            "type": "string"
          },
          "ftp_port": {
            "description": "(FTP destination only): The port on the FTP server to connect to",
            "type": "integer"
          },
          "ftp_server": {
            "description": "(FTP destination only): The IP Address or machine name of the FTP server",
            "type": "string"
          },
          "ftp_user_name": {
            "description": "(FTP destination only): The user name used for authentication on the FTP server",
            "type": "string"
          },
          "ftp_password_set": {
            "description": "(FTP destination only): Whether the password has been set for the FTP user yet",
            "type": "boolean"
          },
          "server_file_path (*)": {
            "description": "(Server destination only): The file path that the output will be written to on the destination server",
            "type": "string"
          },
          "workflow_attach_output": {
            "description": "(Workflow destination only): Whether the WebReport output is attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_attachment_description (*)": {
            "description": "(Workflow destination only): The node description of the WebReport output to be attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_attachment_name (*)": {
            "description": "(Workflow destination only): The node name of the WebReport output to be attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_category_names": {
            "description": "(Workflow destination only): The names of the categories that will be applied to the output node to be attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_description (*)": {
            "description": "(Workflow destination only): The description of the initiated workflow",
            "type": "string"
          },
          "workflow_due": {
            "description": "(Workflow destination only): Setting used to determine whether the workflow will become due for completion",
            "type": "string"
          },
          "workflow_due_in": {
            "description": "(Workflow destination only): Number of days from initiation that the workflow will become due for completion",
            "type": "string"
          },
          "workflow_due_on": {
            "description": "(Workflow destination only): Date that the workflow will become due for completion",
            "type": "string"
          },
          "workflow_map_id (*)": {
            "description": "(Workflow destination only): The node ID of the Workflow map being used as the destination of the WebReport",
            "type": "string"
          },
          "workflow_title (*)": {
            "description": "(Workflow destination only): The title of the initiated workflow",
            "type": "string"
          }
        }
      },
      "webreports_OutputSpecific": {
        "type": "object",
        "properties": {
          "category_names": {
            "description": "(Content Server Node destination only): The names of the categories that will be applied to the output node",
            "type": "string"
          },
          "create_in_id": {
            "description": "(Content Server Node destination only): The node ID of the container that the WebReport output will be created in",
            "type": "integer"
          },
          "duplicate_name_action": {
            "description": "(Content Server Node destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found in the destination container",
            "type": "string"
          },
          "export_type": {
            "description": "(Content Server Node destination only): Whether the WebReport is set to output to a new node or add a version to an existing node",
            "type": "string"
          },
          "node_description": {
            "description": "(Content Server Node destination only): The description of the output node",
            "type": "string"
          },
          "node_name": {
            "description": "(Content Server Node destination only): The name of the output node",
            "type": "string"
          },
          "node_type": {
            "description": "(Content Server Node destination only): Whether the node type of the output is set to Document or Custom View",
            "type": "string"
          },
          "add_version_to_id": {
            "description": "(Content Server Version destination only): The node to add a version to",
            "type": "integer"
          },
          "append_data": {
            "description": "(Content Server Version destination only): Setting used to determine whether the WebReport output should be appended into the text of an existing document",
            "type": "string"
          },
          "end_tag": {
            "description": "(Content Server Version destination only): The end tag if the WebReport output is set to be appended into the text of an existing document between tags",
            "type": "string"
          },
          "overwrite_tags": {
            "description": "(Content Server Version destination only): Whether the output should overwrite tags in the destination text if the WebReport output is set to be appended into the text of an existing document between tags",
            "type": "string"
          },
          "start_tag": {
            "description": "(Content Server Version destination only): The start tag if the WebReport output is set to be appended into the text of an existing document between tags",
            "type": "string"
          },
          "version_handling": {
            "description": "(Content Server Version destination only): Whether the output should be added as a major or minor version",
            "type": "string"
          },
          "version_name": {
            "description": "(Content Server Version destination only): The name of the output node",
            "type": "string"
          },
          "download_file_name": {
            "description": "(Desktop destination only): The name of the file that the WebReport output is written to",
            "type": "string"
          },
          "attachment_name": {
            "description": "(E-mail destination only): The name of the file attached to the e-mail",
            "type": "string"
          },
          "attach_results_to_email": {
            "description": "(E-mail destination only): Whether the WebReport output should be attached to the e-mail",
            "type": "boolean"
          },
          "email_address": {
            "description": "(E-mail destination only): The e-mail address that the e-mail is being sent to",
            "type": "string"
          },
          "email_address_user_id": {
            "description": "(E-mail destination only): The User ID of the Content Server user that the e-mail is being sent to",
            "type": "integer"
          },
          "email_body_text": {
            "description": "(E-mail destination only): The body text of the e-mail",
            "type": "string"
          },
          "email_mailing_list": {
            "description": "(E-mail destination only): The node ID of the Content Server node containing the mailing list that the e-mail is being sent to",
            "type": "integer"
          },
          "email_subject": {
            "description": "(E-mail destination only): The Subject of the e-mail",
            "type": "string"
          },
          "append_form": {
            "description": "(Form destination only): Setting used to determine how the WebReport output affects existing form data",
            "type": "string"
          },
          "form_id": {
            "description": "(Form destination only): The node ID of the Form being used as the destination of the WebReport",
            "type": "integer"
          },
          "rows_affected": {
            "description": "(Form destination only): The number of rows of form data affected when the WebReport is run",
            "type": "integer"
          },
          "ftp_anonymous": {
            "description": "(FTP destination only): Whether the WebReport is set to login to the FTP Server anonymously",
            "type": "boolean"
          },
          "ftp_copy_options": {
            "description": "(FTP destination only): The action that the WebReport will take if a file of the same name as the WebReport output file is found on the destination FTP server",
            "type": "string"
          },
          "ftp_file_path": {
            "description": "(FTP destination only): The relative path to the destination file from the FTP root folder",
            "type": "string"
          },
          "ftp_port": {
            "description": "(FTP destination only): The port on the FTP server to connect to",
            "type": "integer"
          },
          "ftp_server": {
            "description": "(FTP destination only): The IP Address or machine name of the FTP server",
            "type": "string"
          },
          "ftp_user_name": {
            "description": "(FTP destination only): The user name used for authentication on the FTP server",
            "type": "string"
          },
          "ftp_user_password": {
            "description": "(FTP destination only): The password used for authentication on the FTP server",
            "type": "string"
          },
          "server_file_path": {
            "description": "(Server destination only): The file path that the output will be written to on the destination server",
            "type": "string"
          },
          "workflow_attach_output": {
            "description": "(Workflow destination only): Whether the WebReport output is attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_attachment_description": {
            "description": "(Workflow destination only): The node description of the WebReport output attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_attachment_name": {
            "description": "(Workflow destination only): The node name of the WebReport output attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_category_names": {
            "description": "(Workflow destination only): The names of the categories applied to the output node attached to the initiated workflow",
            "type": "boolean"
          },
          "workflow_description": {
            "description": "(Workflow destination only): The description of the initiated workflow",
            "type": "string"
          },
          "workflow_due": {
            "description": "(Workflow destination only): Setting used to determine whether the workflow will become due for completion",
            "type": "string"
          },
          "workflow_due_in": {
            "description": "(Workflow destination only): Number of days from initiation that the workflow will become due for completion",
            "type": "string"
          },
          "workflow_due_on": {
            "description": "(Workflow destination only): Date that the workflow will become due for completion",
            "type": "string",
            "format": "date"
          },
          "workflow_map_id": {
            "description": "(Workflow destination only): The node ID of the Workflow map being used as the destination of the WebReport",
            "type": "integer"
          },
          "workflow_title": {
            "description": "(Workflow destination only): The title of the initiated workflow",
            "type": "string"
          }
        }
      },
      "webreports_ScheduleData": {
        "type": "object",
        "properties": {
          "five_minute_increments": {
            "description": "Whether the '5-minute-increments' setting is set",
            "type": "boolean"
          },
          "next_run": {
            "description": "The date that the WebReport is scheduled to be next run",
            "type": "string",
            "format": "date"
          },
          "repeat_day": {
            "description": "The repeat interval number of days that the WebReport is scheduled for",
            "type": "integer"
          },
          "repeat_hour": {
            "description": "The repeat interval number of hours that the WebReport is scheduled for",
            "type": "integer"
          },
          "repeat_minute": {
            "description": "The repeat interval number of minutes that the WebReport is scheduled for",
            "type": "integer"
          },
          "repeat_week": {
            "description": "The repeat interval number of weeks that the WebReport is scheduled for",
            "type": "integer"
          },
          "run_condition": {
            "description": "'intervals' if the schedule is set to run using repeat intervals or 'specific' if the schedule is set to run on specific days of the month",
            "type": "string"
          },
          "run_on_dates": {
            "description": "List containing the dates of the month that the report is scheduled to run on",
            "type": "string"
          },
          "run_on_weeks_month": {
            "description": "List containing the weeks of the month that the report is scheduled to run on",
            "type": "string"
          },
          "run_on_days_month": {
            "description": "List containing the days of the month that the report is scheduled to run on",
            "type": "string"
          },
          "run_on_days_week": {
            "description": "List containing the days of the week that the report is scheduled to run on",
            "type": "string"
          },
          "run_times": {
            "description": "The specific number of times that the WebReport will run, or -1 for forever",
            "type": "integer"
          },
          "schedule_enabled": {
            "description": "Whether the schedule is enabled",
            "type": "boolean"
          },
          "user_id": {
            "description": "The User ID of the user that created the schedule",
            "type": "integer"
          }
        }
      },
      "xmlimport_response_200": {
        "type": "object",
        "properties": {
          "links": {
            "type": "object",
            "description": "Nested json with content-type, href, request-method, etc."
          },
          "results": {
            "type": "object",
            "properties": {
              "data": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Successful import message: {filename} successfully imported"
                  },
                  "restart": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        }
      },
      "xmlimport_response_400": {
        "type": "object",
        "properties": {
          "error": {
            "description": "Error message",
            "type": "string"
          }
        }
      },
      "xmlimport_response_500": {
        "type": "object",
        "properties": {
          "error": {
            "description": "Error message - {filename} import failed: system error",
            "type": "string"
          },
          "errorDetail": {
            "description": "List of errors as a string",
            "type": "string"
          }
        }
      },
      "V2FollowUps": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V2FollowUpsResults"
            }
          },
          "links": {
            "description": "Links",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/resubmission_V2DataLinks"
            }
          }
        }
      },
      "V2FollowUpInfo": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V2FollowUpsFollowups"
            }
          },
          "links": {
            "description": "Links",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/resubmission_V2DataLinks"
            }
          }
        }
      },
      "V2FollowUpsResults": {
        "type": "object",
        "properties": {
          "followups": {
            "description": "FollowUps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/V2FollowUpsFollowups"
            }
          }
        }
      },
      "V2FollowUpsFollowups": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Data",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V2FollowUpsData"
            }
          }
        }
      },
      "V2FollowUpsData": {
        "type": "object",
        "properties": {
          "followup": {
            "description": "FollowUp",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V2FollowUpsFollowup"
            }
          }
        }
      },
      "V2FollowUpsFollowup": {
        "type": "object",
        "properties": {
          "activation_by_day": {
            "description": "Move Follow Up activation date to the previous business day, if it falls on a weekend; 0: Don't move the date. 1: Move the date to the previous business day.",
            "type": "integer"
          },
          "activation_date": {
            "description": "The calculated activation date",
            "type": "string",
            "format": "date"
          },
          "assignees": {
            "description": "list of integer assignee id values",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "create_date": {
            "description": "The date and time the Follow Up was created",
            "type": "string",
            "format": "date"
          },
          "create_user_id": {
            "description": "ID of the user who created the Follow Up",
            "type": "integer"
          },
          "data_id": {
            "description": "Data Id of the node",
            "type": "integer"
          },
          "description": {
            "description": "Description of the folloup",
            "type": "string"
          },
          "due_date": {
            "description": "The date on which the Follow Up must be executed",
            "type": "string",
            "format": "date"
          },
          "end_sequence_date": {
            "description": "End date of the period in which the resubmission has to be executed. Valid only if RSRULE = 2",
            "type": "string",
            "format": "date"
          },
          "followup_client": {
            "description": "Unique identifier representing a Follow Up client",
            "type": "integer"
          },
          "followup_client_name": {
            "description": "Name of the Follow Up client",
            "type": "string"
          },
          "followup_handler": {
            "description": "Follow Up handler 1: Normal Follow Up handler , 2: Follow Up handler with escalation data, 100: cmbase-specific for automaticrenewal",
            "type": "integer"
          },
          "followup_id": {
            "description": "Follow Up ID",
            "type": "integer"
          },
          "followup_type": {
            "description": "Follow Up Type ID",
            "type": "integer"
          },
          "followup_type_name": {
            "description": "Follow Up Type Name",
            "type": "string"
          },
          "parent_id": {
            "description": "Follow Up Parent Node ID",
            "type": "integer"
          },
          "rule": {
            "description": "Type of rule to apply; 0: Follow Up on specific data 1: Follow Up in specific days, weeks, or months 2: Periodic Follow Up",
            "type": "integer"
          },
          "start_sequence_date": {
            "description": "Start date of the period in which the Follow Up has to be executed. Valid only if RSRULE = 2.",
            "type": "string",
            "format": "date"
          },
          "status": {
            "description": "Follow Up Status",
            "type": "integer"
          },
          "status_by": {
            "description": "Follow Up Status Updated By",
            "type": "integer"
          }
        }
      },
      "V1ReminderView": {
        "type": "object",
        "properties": {
          "forms": {
            "description": "forms",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewForms"
            }
          }
        }
      },
      "V1ReminderViewForms": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/V1ReminderViewData"
          },
          "form": {
            "$ref": "#/components/schemas/V1ReminderViewForm"
          },
          "options": {
            "type": "object",
            "description": "Basic data about the alpaca form"
          },
          "schema": {
            "type": "object",
            "description": "Properties of the parameters being used for creating the node"
          }
        }
      },
      "V1ReminderViewData": {
        "type": "object",
        "properties": {
          "activation_alert": {
            "description": "activation_alert",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewActivationAlert"
            }
          },
          "assignees": {
            "description": "list of integer assignee id values",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "description": {
            "description": "descrption of the follow up",
            "type": "string"
          },
          "duein": {
            "description": "duein",
            "type": "string",
            "format": "date"
          },
          "escalation_alert": {
            "description": "escalation_alert",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewEscalationAlert"
            }
          },
          "followup_client_name": {
            "description": "Name of the Follow Up client",
            "type": "integer"
          },
          "followup_type_name": {
            "description": "Follow Up Type Name",
            "type": "integer"
          },
          "general": {
            "description": "general",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewGeneral"
            }
          },
          "priority": {
            "description": "priority",
            "type": "integer"
          },
          "schedule": {
            "description": "schedule",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewSchedule"
            }
          }
        }
      },
      "V1ReminderViewActivationAlert": {
        "type": "object",
        "properties": {
          "send_in": {
            "description": "send_in",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewActivationSendIn"
            }
          }
        }
      },
      "V1ReminderViewActivationSendIn": {
        "type": "object",
        "properties": {
          "activation_period": {
            "description": "activation_period",
            "type": "integer"
          },
          "activation_unit": {
            "description": "activation_unit",
            "type": "integer"
          }
        }
      },
      "V1ReminderViewEscalationAlert": {
        "type": "object",
        "properties": {
          "escalation_enabled": {
            "description": "escalation_enabled",
            "type": "boolean"
          },
          "send_in": {
            "description": "send_in",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewEscalationSendIn"
            }
          }
        }
      },
      "V1ReminderViewEscalationSendIn": {
        "type": "object",
        "properties": {
          "escalation_period": {
            "description": "escalation_period",
            "type": "integer"
          },
          "escalation_when": {
            "description": "escalation_when",
            "type": "integer"
          }
        }
      },
      "V1ReminderViewGeneral": {
        "type": "object",
        "properties": {
          "Created_by": {
            "description": "Created_by",
            "type": "integer"
          },
          "Created_on": {
            "description": "Created_on",
            "type": "string",
            "format": "date"
          },
          "Modified_by": {
            "description": "Modified_by",
            "type": "integer"
          },
          "Modified_on": {
            "description": "Modified_on",
            "type": "integer"
          }
        }
      },
      "V1ReminderViewSchedule": {
        "type": "object",
        "properties": {
          "due": {
            "description": "due",
            "type": "integer"
          },
          "due_in": {
            "description": "Due In",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewDueIn"
            }
          },
          "due_on": {
            "description": "Due On",
            "type": "string",
            "format": "date"
          },
          "end_date": {
            "description": "End Date",
            "type": "string",
            "format": "date"
          },
          "month_recursive": {
            "description": "Month Recursive",
            "type": "integer"
          },
          "predefined": {
            "description": "Predefined",
            "type": "boolean"
          },
          "Recurring": {
            "description": "Recurring",
            "type": "boolean"
          },
          "repeat_month": {
            "description": "Repeat Month",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewRepeatMonth"
            }
          },
          "repeat_on": {
            "description": "Repeat On",
            "type": "string"
          },
          "repeat_week": {
            "description": "Repeat Week",
            "type": "integer"
          },
          "repeat_year": {
            "description": "Repeat Year",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewRepeatYear"
            }
          },
          "start_date": {
            "description": "Start Date",
            "type": "string",
            "format": "date"
          },
          "week_recursive": {
            "description": "Week Recursive",
            "type": "integer"
          },
          "year_recursive": {
            "description": "Year Recursive",
            "type": "integer"
          }
        }
      },
      "V1ReminderViewDueIn": {
        "type": "object",
        "properties": {
          "due_in_period": {
            "description": "Due In Period",
            "type": "integer"
          },
          "due_in_unit": {
            "description": "Due In Unit",
            "type": "integer"
          }
        }
      },
      "V1ReminderViewRepeatMonth": {
        "type": "object",
        "properties": {
          "month_day": {
            "description": "Month Day",
            "type": "integer"
          },
          "month_unit": {
            "description": "Month Unit",
            "type": "string"
          },
          "month_weekday": {
            "description": "Month Weekday",
            "type": "integer"
          }
        }
      },
      "V1ReminderViewRepeatYear": {
        "type": "object",
        "properties": {
          "year_on_month": {
            "description": "Year On Month",
            "type": "integer"
          },
          "year_on_month_day": {
            "description": "Year On Month Day",
            "type": "integer"
          },
          "year_on_month_unit": {
            "description": "Year On Month Unit",
            "type": "string"
          },
          "year_on_month_weekday": {
            "description": "Year On Month Weekday",
            "type": "integer"
          }
        }
      },
      "V1ReminderViewForm": {
        "type": "object",
        "properties": {
          "attributes": {
            "description": "Attributes",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewAttributes"
            }
          },
          "renderForm": {
            "description": "renderForm",
            "type": "boolean"
          }
        }
      },
      "V1ReminderViewAttributes": {
        "type": "object",
        "properties": {
          "action": {
            "description": "action",
            "type": "string"
          },
          "method": {
            "description": "method",
            "type": "string"
          }
        }
      },
      "V1FollowupClientTypes": {
        "type": "object",
        "properties": {
          "forms": {
            "description": "forms",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1FollowupClientTypesForms"
            }
          }
        }
      },
      "V1FollowupClientTypesForms": {
        "type": "object",
        "properties": {
          "data": {
            "description": "data",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1FollowupClientTypesData"
            }
          },
          "form": {
            "$ref": "#/components/schemas/V1ReminderViewForm"
          },
          "options": {
            "type": "object",
            "description": "Basic data about the alpaca form"
          },
          "schema": {
            "type": "object",
            "description": "Properties of the parameters being used for creating the node"
          }
        }
      },
      "V1FollowupClientTypesData": {
        "type": "object",
        "properties": {
          "followup_type_name": {
            "description": "Follow Up Type Name",
            "type": "integer"
          },
          "followup_client_name": {
            "description": "Name of the Follow Up client",
            "type": "integer"
          },
          "due_on": {
            "description": "Due On",
            "type": "string",
            "format": "date"
          },
          "description": {
            "description": "description",
            "type": "string"
          },
          "assignees": {
            "description": "assignees",
            "type": "string"
          },
          "activation_alert": {
            "description": "Activation Alert",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1FollowupClientTypesActivationAlert"
            }
          }
        }
      },
      "V1FollowupClientTypesActivationAlert": {
        "type": "object",
        "properties": {
          "send_in": {
            "description": "send_in",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1FollowupClientTypesActivationAlertSendIn"
            }
          }
        }
      },
      "V1FollowupClientTypesActivationAlertSendIn": {
        "type": "object",
        "properties": {
          "activationAlert1": {
            "description": "activationAlert1",
            "type": "integer"
          },
          "activationAlert2": {
            "description": "activationAlert2",
            "type": "integer"
          }
        }
      },
      "V1ReminderCreateForm": {
        "type": "object",
        "properties": {
          "forms": {
            "description": "forms",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderCreateData"
            }
          }
        }
      },
      "V1ReminderCreateData": {
        "type": "object",
        "properties": {
          "data": {
            "description": "data",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewData"
            }
          },
          "form": {
            "description": "form",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/V1ReminderViewForm"
            }
          },
          "options": {
            "type": "object",
            "description": "Basic data about the alpaca form"
          },
          "schema": {
            "type": "object",
            "description": "Properties of the parameters being used for creating the node"
          }
        }
      },
      "V2PostReminder": {
        "type": "object",
        "properties": {
          "results": {
            "description": "Results",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/resubmission_V2EmptyResults"
            }
          },
          "links": {
            "description": "Links",
            "type": "object",
            "items": {
              "$ref": "#/components/schemas/resubmission_V2DataLinks"
            }
          }
        }
      },
      "resubmission_V2EmptyResults": {
        "type": "object"
      },
      "resubmission_V2DataLinks": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "",
            "items": {
              "$ref": "#/components/schemas/resubmission_V2Links"
            }
          }
        }
      },
      "resubmission_V2Links": {
        "type": "object",
        "properties": {
          "self": {
            "$ref": "#/components/schemas/resubmission_V2Link"
          }
        }
      },
      "resubmission_V2Link": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "Body"
          },
          "content_type": {
            "type": "string",
            "description": "Content Type"
          },
          "href": {
            "type": "string",
            "description": "URL"
          },
          "method": {
            "type": "string",
            "description": "HTTP Method"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "syndication_response_200": {
        "type": "object",
        "properties": {
          "links": {
            "type": "object",
            "description": "Nested json with content-type, href, request-method, etc."
          },
          "results": {
            "type": "object",
            "properties": {
              "canUserEditTheSiteMappings": {
                "description": "Whether user has the document level syndication privilege or not",
                "type": "boolean"
              },
              "DLS": {
                "description": "Document level syndication value of a given node",
                "type": "boolean"
              },
              "enabled": {
                "description": "Is syndication enabled on a given node",
                "type": "boolean"
              },
              "hideDLS": {
                "description": "Whether DLS can be enabled on a given node",
                "type": "boolean"
              }
            }
          }
        }
      },
      "signaturerequests_create": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/signature_V2Results"
            }
          }
        }
      },
      "signature_V2Results": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/signature_V2Data"
            }
          }
        }
      },
      "signature_V2Data": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Signature Request URL"
          },
          "request_id": {
            "type": "integer",
            "description": "A unique identifier for the Signature Request"
          }
        }
      },
      "signaturerequests_get": {
        "type": "object",
        "properties": {
          "collection": {
            "description": "Collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Collection_BrowseMembers"
            }
          },
          "results": {
            "description": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/signaturerequests_V2GetResult"
            }
          },
          "links": {
            "description": "Links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/members_V2Links"
            }
          }
        }
      },
      "signaturerequests_V2GetResult": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "description": "Data",
            "items": {
              "$ref": "#/components/schemas/signaturerequests_V2Data"
            }
          }
        }
      },
      "signaturerequests_V2Data": {
        "type": "object",
        "properties": {
          "properties": {
            "type": "array",
            "description": "Properties",
            "items": {
              "$ref": "#/components/schemas/signaturerequests_V2Properties"
            }
          }
        }
      },
      "signaturerequests_V2Properties": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "Signature Request Id"
          },
          "provider_name": {
            "type": "string",
            "description": "Provider Name"
          },
          "modified_date": {
            "type": "integer",
            "description": "Signature Request Modified date"
          },
          "created_date": {
            "type": "integer",
            "description": "Signature Request Created date"
          },
          "status": {
            "type": "string",
            "description": "Signature Request URL"
          },
          "total_documents": {
            "type": "integer",
            "description": "Total no of Documents"
          },
          "documents": {
            "type": "array",
            "description": "documents",
            "items": {
              "$ref": "#/components/schemas/signaturerequests_DocumentsData"
            }
          }
        }
      },
      "signaturerequests_DocumentsData": {
        "type": "object",
        "properties": {
          "doc_id": {
            "type": "integer",
            "description": "Document Id"
          },
          "doc_name": {
            "type": "string",
            "description": "Document Name"
          },
          "mime_type": {
            "type": "string",
            "description": "The mime type of the original document sent for signature"
          },
          "version_num": {
            "type": "integer",
            "description": "The version of the document sent for signature"
          }
        }
      },
      "signaturerequests_getbyId": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/signatureRequestDetails_V2Results"
            }
          }
        }
      },
      "signatureRequestDetails_V2Results": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/signatureRequestDetails_V2Data"
            }
          }
        }
      },
      "signatureRequestDetails_V2Data": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "Signature Request Id"
          },
          "provider_name": {
            "type": "string",
            "description": "Provider Name"
          },
          "created_date": {
            "type": "integer",
            "description": "Signature Request Created date"
          },
          "modified_date": {
            "type": "integer",
            "description": "Signature Request modified date"
          },
          "status": {
            "type": "string",
            "description": "Signature Request status"
          },
          "total_documents": {
            "type": "integer",
            "description": "Total no of Documents"
          },
          "documents": {
            "type": "array",
            "description": "documents",
            "items": {
              "$ref": "#/components/schemas/signaturerequests_DocumentsData"
            }
          },
          "signers": {
            "type": "array",
            "description": "signers",
            "items": {
              "$ref": "#/components/schemas/signaturerequests_SignersData"
            }
          },
          "activities": {
            "type": "array",
            "description": "Decides if activity information needs to be included. This activity information is created by parsing the signer data",
            "items": {
              "$ref": "#/components/schemas/signaturerequests_ActivitiesData"
            }
          }
        }
      },
      "signaturerequests_SignersData": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "description": "Name of the signer"
          },
          "email_id": {
            "type": "string",
            "description": "Email Id of the signer"
          },
          "signing_order": {
            "type": "integer",
            "description": "Signing order"
          },
          "cssigner_status": {
            "type": "integer",
            "description": "Signer status"
          }
        }
      },
      "signaturerequests_ActivitiesData": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "description": "Activity description"
          },
          "event_date": {
            "type": "integer",
            "description": "Event date"
          },
          "event_type": {
            "type": "string",
            "description": "Type of the event"
          },
          "performer_name": {
            "type": "string",
            "description": "Event performer"
          }
        }
      },
      "signaturerequests_sendnotification": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/signatureRequestsNotification_V2Results"
            }
          }
        }
      },
      "signatureRequestsNotification_V2Results": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/signaturerequestsNotification_V2Data"
            }
          }
        }
      },
      "signaturerequestsNotification_V2Data": {
        "type": "object"
      },
      "signaturerequests_cancel": {
        "type": "object",
        "properties": {
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/categories_V2DataLinks"
            }
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/signatureRequestsCancel_V2Results"
            }
          }
        }
      },
      "signatureRequestsCancel_V2Results": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/signatureRequestsCancel_V2Data"
            }
          }
        }
      },
      "signatureRequestsCancel_V2Data": {
        "type": "object"
      }
    },
    "parameters": {
      "suppress_response_codes": {
        "in": "query",
        "name": "suppress_response_codes",
        "description": "Forces the server to always return a HTTP Response of '200 OK'. The data returned from the call will have an additional integer feature named 'statusCode', which will contain the actual status code (the 'statusCode' feature will be added regardless of whether the REST API call was successful or not).<br><br>NOTE: This parameter does not require a value, so it should be specified as <ul><li><b>[Query String]:</b><code>?suppress_response_codes</code></li><li><b>[Form Body (where the value is an empty string)]</b>: <code>suppress_response_codes = </code></li></ul>",
        "schema": {
          "type": "string",
          "nullable": true
        },
        "allowEmptyValue": true
      }
    }
  },
  "paths": {
    "/v1/apiinfo": {
      "get": {
        "operationId": "GetAPIInfo",
        "summary": "Get API Info",
        "description": "Provides the GET, POST, PUT and DELETE methods for the given resource.",
        "parameters": [
          {
            "name": "resource",
            "description": "The REST API url to get information on (ex. api/v1/nodes/2000/nodes)",
            "schema": {
              "type": "string",
              "format": "uri"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiinfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'resource' is required</li><li>No action information found for resource {resource}</li><li>The resource {resource} was not found in the mappings registry or the mappings entry was malformed</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "Not Implemented"
          }
        },
        "tags": [
          "apiinfo"
        ]
      }
    },
    "/v1/auth": {
      "get": {
        "operationId": "GetCurrentUserInfo",
        "summary": "Get Current User Info",
        "description": "Gets information on the currently authenticated user.",
        "parameters": [
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "perspective",
            "description": "Determines if the perspective for the node will be included in the response.",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth_UserInfo"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "auth"
        ]
      },
      "post": {
        "operationId": "authenticate",
        "summary": "Authenticate user",
        "description": "Authenticates user with the given credentials, returning an OTCS ticket if authorized.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Login name",
                    "type": "string"
                  },
                  "password": {
                    "description": "Login password",
                    "type": "string",
                    "format": "password"
                  },
                  "domain": {
                    "description": "Login domain",
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth_AuthenticationInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameter value"
          },
          "401": {
            "description": "<ul><li>Invalid username/password specified</li><li>Unable to login. Domain support is disabled</li></ul>"
          },
          "500": {
            "description": "<ul><li>Argument username is required</li><li>Argument password is required</li></ul>"
          }
        },
        "tags": [
          "auth"
        ]
      },
      "delete": {
        "operationId": "DeleteCurrentUserSession",
        "summary": "Delete Current User Session",
        "description": "Terminates the session of the currently authenticated user.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth_AuthenticationDelete"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Cannot get session data.</li><li>No session data found.</li><li>Error removing session data.</li></ul>"
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/v1/bulkactions": {
      "get": {
        "operationId": "bulk_actions",
        "summary": "Bulk node actions",
        "description": "Gets the list of actions that can be performed on multiple nodes. <ul><b>NOTE: </b>This call only lists the actions and does not perform them. Bulk actions (ie. deleting multiple nodes, copying multiple nodes, reserving multiple nodes) are not yet supported in REST API.</ul> ",
        "parameters": [
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bulkactions"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "bulkactions"
        ]
      }
    },
    "/v1/nodes/{id}/categories": {
      "get": {
        "operationId": "getCategories",
        "summary": "List categories on a node",
        "description": "Get the categories applied to the specified node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_CategoriesInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid action 'categories-list'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      },
      "post": {
        "operationId": "addCategory",
        "summary": "Apply a category to a node",
        "description": "Applies an existing category to a node. Only one category (and its values) may be applied at a time<br><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Apply the category and use the default values for its attributes:<br><code>{\"category_id\":9830}</code><br><br>Apply the category and change the value of the Textfield:<br><code>{\"category_id\":9830,\"9830_2\":\"new value\"}</code><br><br>Apply the category and change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{\"category_id\":9830,\"9830_3_2_4\":[\"\",\"\",\"new value\"]}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "category_id": {
                    "description": "Category ID",
                    "type": "integer"
                  },
                  "{attribute_key}": {
                    "description": "Attribute key in the format {category_id}_[{set_id}_{set_row}]_{attribute_id}.  See the <a href=#implementation-notes open><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_AddCategoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'category_id'</li><li>No permissions to access the attribute definition node</li><li>Could not process object, invalid action 'categories-add'</li><li>The attribute group '{category_name}' already exists</li><li>Error retrieving the version of the attribute definition node.</li><li>Invalid specification. Invalid attribute entry found.</li><li>Body parameter is invalid.</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/v2/nodes/{id}/categories": {
      "get": {
        "operationId": "getCategories2",
        "summary": "List categories on a node",
        "description": "Get the categories applied to the specified node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_V2CategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid action 'categories-list'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      },
      "post": {
        "operationId": "addCategory2",
        "summary": "Apply a category to a node",
        "description": "Applies an existing category to a node. Only one category (and its values) may be applied at a time<br><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Apply the category and use the default values for its attributes:<br><code>{\"category_id\":9830}</code><br><br>Apply the category and change the value of the Textfield:<br><code>{\"category_id\":9830,\"9830_2\":\"new value\"}</code><br><br>Apply the category and change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{\"category_id\":9830,\"9830_3_2_4\":[\"\",\"\",\"new value\"]}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "category_id": {
                    "description": "Category ID",
                    "type": "string"
                  },
                  "{attribute_key}": {
                    "description": "Attribute key in the format {category_id}_[{set_id}_{set_row}]_{attribute_id}.  See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'category_id'</li><li>No permissions to access the attribute definition node</li><li>Could not process object, invalid action 'categories-add'</li><li>The attribute group '{category_name}' already exists</li><li>Body parameter is invalid.</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Invalid specification. Invalid attribute entry found.</li><li>Error retrieving the version of the attribute definition node.</li></ul>"
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/v2/nodes/{id}/categories/apply": {
      "post": {
        "operationId": "applyDownCategories",
        "summary": "Apply categories to sub-nodes of a node",
        "description": "Apply categories to sub-nodes of a node (i.e. Apply Down).<br><br>The following examples will assume that there are two categories (ID 9830, ID 6740) that have one TextField attribute each.<br><br>Apply category 9830 with default action (add_upgrade) and category 6740 with 'replace' action:<br><code>{\"categories\": [{ \"id\": 9830, \"action\": null },{ \"id\": 6740, \"action\": \"replace\" } ], \"add_version\" : false, \"clear_existing_categories\" : false}</code><br><br>Only clear existing categories:<br><code>{\"categories\": [{ \"id\": 9830, \"action\": \"none\" },{ \"id\": 6740, \"action\": \"none\" } ], \"add_version\" : false, \"clear_existing_categories\" : true}</code><br><br>Apply category 9830 with default action (add_upgrade) and category 6740 with 'replace' action, and adding a new version:<br><code>{\"categories\": [{ \"id\": 9830, \"action\": null },{ \"id\": 6740, \"action\": \"replace\" } ], \"add_version\" : true, \"clear_existing_categories\" : false}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "categories": {
                    "description": "Array with objects with a category id and an action to apply down for that category. See examples. <br> Note that the actions can only be from the following list: \"add\", \"add_upgrade\", \"upgrade\", \"replace\", \"delete\", \"none\", null.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "add_version": {
                    "description": "True if a new version of document sub-nodes is to be added, False otherwise.",
                    "type": "boolean"
                  },
                  "clear_existing_categories": {
                    "description": "True if all existing categories on the sub-nodes are to be deleted, False otherwise",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_V2CategoriesApplyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>No permissions to access the attribute definition node</li><li>Could not process object, invalid action 'categories-apply'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Body parameter is invalid.</li><li>Could not find category ID '{node id}' on the node</li><li>Could not set feature {feature}, value must be a {expected type}</li><li>Could not get a node for {id}</li><li>Invalid specification. Invalid attribute entry found.</li><li>Error retrieving the version of the attribute definition node.</li></ul>"
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/v1/nodes/{id}/categories/actions": {
      "get": {
        "operationId": "getCategoriesActions",
        "summary": "Get category-related actions for a node",
        "description": "Get the available category-related actions for a node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_ActionsCategoriesInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/v1/nodes/{id}/categories/{category_id}/actions": {
      "get": {
        "operationId": "getCategoriesActions2",
        "summary": "Get category-related actions for a category on a node",
        "description": "Get the available category-related actions for a category on a node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Category ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_ActionsCategoriesInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'element_id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/v2/nodes/{id}/categories/{category_id}/inheritance": {
      "post": {
        "operationId": "enableCategoryInheritance",
        "summary": "Enable category inheritance for the node's children",
        "description": "Enable inheritance of the given category (which is on the node) by the node's children. When child nodes are added under the node, this category will be inherited.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Category ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'category_id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not find category ID {id} on the node</li></ul>"
          }
        },
        "tags": [
          "categories"
        ]
      },
      "delete": {
        "operationId": "disableCategoryInheritance",
        "summary": "Disable category inheritance for the node's children",
        "description": "Disable inheritance of the given category (which is on the node) by the node's children. When child nodes are added under the node, this category will not be inherited.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Category ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'category_id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not find category ID {id} on the node</li></ul>"
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/v1/nodes/{id}/categories/{category_id}/": {
      "get": {
        "operationId": "getCategory",
        "summary": "Get category info for a node",
        "description": "Get details for the given category applied to the specified node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Category ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_CategoryInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Category ID '{category_id}' is not a category on node '{id}'</li><li>Invalid datatype specified for argument 'category_id'</li><li>Could not process object, invalid action 'categories-get'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      },
      "put": {
        "operationId": "updateCategory",
        "summary": "Update a category on a node",
        "description": "Updates an existing category on a node. Only one category (and its values) may be updated at a time.<br><br>The <b>optional</b> 'metadata_token' parameter may be specified if there is a need to avoid edit conflicts. There are two ways to retrieve the current metadata_token(s):<ol start=\"1\"><li>Pass in the current metadata_token when updating the category (see the example below). If the update is successful, metadata_token(s) will be generated and returned under state.categories and these will be valid for the next category update call.</li><li>If you want the current metadata_tokens before performing a category update, use the call 'GET /v2/nodes/{id}?state'. The current metadata_token(s) will be displayed under results.state.categories</li></ol><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Change the value of the Textfield:<br><code>{\"9830_2\":\"new value\"}</code><br><br>Change the value of the Textfield while using the metadata_token to avoid edit conflicts:<br><code>{\"9830_1\":{\"metadata_token\":\"9ec9bcab09f9963db044ff6749e5c5c2\"},\"9830_2\":\"new value\"}</code><br><br>Change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{\"9830_3_2_4\":[\"\",\"\",\"new value\"]}</code><br><br>Remove the Set's second row:<br><code>{\"9830_3_2\":\"\"}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Category ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "{category_id}_1": {
                    "description": "The JSON object containing the metadata state token (for edit conflict resolution), See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation. <br><br>NOTE: if this is specified and the call is successful, the most recent metadata token will be returned in the result.",
                    "type": "string"
                  },
                  "metadata_token": {
                    "description": "The metadata state token. It is used to resolve edit conflicts where two users are updating the node at the same time.<br><br>NOTE: If this is specified and the call is successful, the most recent metadata token will be returned in the result.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'category_id'</li><li>Parameters are required for PUT, POST, and PATCH methods</li><li>Category ID '{category_id}' was specified for Categories Update, but a non-matching attribute ('{attribute_key}') was found</li><li>Could not process object, invalid action 'categories-update'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "409": {
            "description": "Could not update metadata (edit conflict)."
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      },
      "delete": {
        "operationId": "deleteCategory",
        "summary": "Remove a category from a node",
        "description": "Removes the given category from the specified node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Category ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'category_id'</li><li>Could not process object, invalid action 'categories-remove'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/v2/nodes/{id}/categories/{category_id}/": {
      "get": {
        "operationId": "getCategory2",
        "summary": "Get category info for a node",
        "description": "Get details for the given category applied to the specified node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Category ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_V2CategoriesResponseSingle"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Category ID '{category_id}' is not a category on node '{id}'</li><li>Invalid datatype specified for argument 'category_id'</li><li>Could not process object, invalid action 'categories-get'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      },
      "put": {
        "operationId": "updateCategory2",
        "summary": "Update a category on a node",
        "description": "Updates an existing category on a node. Only one category (and its values) may be updated at a time.<br><br>The <b>optional</b> 'metadata_token' parameter may be specified if there is a need to avoid edit conflicts. There are two ways to retrieve the current metadata_token(s):<ol start=\"1\"><li>Pass in the current metadata_token when updating the category (see the example below). If the update is successful, metadata_token(s) will be generated and returned under results.state.categories and these will be valid for the next category update call.</li><li>If you want the current metadata_tokens before performing a category update, use the call 'GET /v2/nodes/{id}?state'. The current metadata_token(s) will be displayed under results.state.categories</li></ol><br>The following examples will assume that there is a category (ID 9830) that has the following attributes:<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul><br>Change the value of the Textfield:<br><code>{\"9830_2\":\"new value\"}</code><br><br>Change the value of the Textfield while using the metadata_token to avoid edit conflicts:<br><code>{\"9830_1\":{\"metadata_token\":\"9ec9bcab09f9963db044ff6749e5c5c2\"},\"9830_2\":\"new value\"}</code><br><br>Change the value of the Set's Textfield in the second row, for the Set Textfield's third value:<br><code>{\"9830_3_2_4\":[\"\",\"\",\"new value\"]}</code><br><br>Remove the Set's second row:<br><code>{\"9830_3_2\":\"\"}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Category ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "{category_id}_1": {
                    "description": "The JSON object containing the metadata state token (for edit conflict resolution), See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation. <br><br>NOTE: if this is specified and the call is successful, the most recent metadata token will be returned in the result.",
                    "type": "string"
                  },
                  "metadata_token": {
                    "description": "The metadata state token. It is used to resolve edit conflicts where two users are updating the node at the same time.<br><br>NOTE: If this is specified and the call is successful, the most recent metadata token will be returned in the result.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'category_id'</li><li>Parameters are required for PUT, POST, and PATCH methods</li><li>Category ID '{category_id}' was specified for Categories Update, but a non-matching attribute ('{attribute_key}') was found</li><li>Could not process object, invalid action 'categories-update'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "409": {
            "description": "Could not update metadata (edit conflict)."
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      },
      "delete": {
        "operationId": "deleteCategory2",
        "summary": "Remove a category from a node",
        "description": "Removes the given category from the specified node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "category_id",
            "description": "Category ID",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'category_id'</li><li>Could not process object, invalid action 'categories-remove'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/v2/nodes/{id}/categories/upgrade": {
      "put": {
        "operationId": "upgradeCategory",
        "summary": "Upgrade categories on a node",
        "description": "Upgrade categories on a node to the latest category definitions. If the upgrade operation fails (because of insufficient permissions, or a category is already the latest version, etc) then nothing will happen to any of the categories on the node (ie. none of them will be upgraded).<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Upgrade the category 8479 on the node:<br><code>body = { \"category_id\":[8479] }</code><br><br>Upgrade the categories 8479 and 7534 on the node:<br><code>body = { \"category_id\":[8479,7534] }</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "category_id": {
                    "description": "The list of category IDs to upgrade on the node, separated by commas (see the examples above).",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categories_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid datatype specified for argument \"id\"."
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not upgrade category '{category_id}' on node '{id}', it is already the latest version</li><li>Category ID '{category_id}' is not a category on node '{id}'.</li><li>Insufficient permissions to perform that action</li><li>The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul>"
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/v2/csapplications/{action}": {
      "post": {
        "operationId": "CSApplicationAPICommand",
        "summary": "Perform an action against a staged or installed Content Server Application",
        "description": "Allows for the installation, upgrade, uninstall or deletion of a Content Server Application by name.",
        "parameters": [
          {
            "name": "action",
            "description": "Install, Uninstall, Upgrade or Delete.",
            "schema": {
              "type": "string"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "appName": {
                    "description": "The name of the application you wish to install, uninstall, upgrade or delete, e.g. OTRMReports.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server response to action performed on the specified Content Server Application.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/csapplications_V2ResponseCSApplicationsPost"
                }
              }
            }
          },
          "400": {
            "description": "Invalid datatype specified for argument \"appname\" or invalid {action} specified."
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Unable to perform the action. Please read the server response or Content Server logs for more detail."
          }
        },
        "tags": [
          "csapplications"
        ]
      }
    },
    "/v2/doctemplates": {
      "post": {
        "operationId": "createDocumentTemplateInstance",
        "summary": "Creates a Instance for Document Template",
        "description": "Creates a Instance for selected Document Template. The body must contain information about the parent_id and the template_id. You can provide information about the name, name_multilingual, description, description_multilingual, roles.",
        "parameters": [
          {
            "name": "Body",
            "description": "The body. Example: {\"template_id\":139327,\"parent_id\":15082,\"name\":\"Name\",\"type\":144,\"description\":\"\",\"roles\":{\"categories\":{},\"classifications\":{\"create_id\":[7052,7053],\"id\":[]}}}",
            "schema": {
              "type": "string"
            },
            "in": "query",
            "required": true,
            "style": "form",
            "explode": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/doctemplates_DocumentTemplateInstanceInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not read object ID {parent_id}</li><li>The instance of the template is not allowed in this location. template id {template_id}, location {parent_id}</li><li>An item with the name {name} already exists.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "Error in fetching template node information"
          },
          "500": {
            "description": "Could not create instance from template. {template_id}"
          }
        },
        "tags": [
          "doctemplates"
        ]
      }
    },
    "/v1/documentproperties/insertableproperties/{id}": {
      "get": {
        "operationId": "insertableProperties",
        "summary": "Insertable Properties",
        "description": "Gets list of Insertable Properties and the associated value.",
        "parameters": [
          {
            "name": "id",
            "description": "The data ID of the document",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/documentproperties_InsertablePropertiesRow"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required.</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "documentproperties"
        ]
      }
    },
    "/v2/draftprocesses/{draftprocess_id}": {
      "put": {
        "operationId": "initiateProcess",
        "summary": "Initiates a process from a draft process",
        "description": "Initiates or updates a workflow based on the provided action.<br><br> If action is initiate ,workflow intance will be created based on the draftprocess_id passed in the path with comment as optional filed .<br> if action is formupate , data passed via values body parameters will be set to form data prior initiating the workflow . <br><br>Examples <ul><li>To initiating the workflow with comment as optional.</li><br><code>body:{\"action\":\"Initiate\",\"comment\":\"start\"} </code> <li><br> To prepare the workflow with empty values before initiating the workflow </li> <br> <code> body : {\"action\":\"formUpdate\",\"values\":{\"WorkflowForm\":{}}} </code> <br><br> <li> To update the form of workflow before initiating the workflow </li> <br> <code> body : {\"action\":\"formUpdate\",\"values\":{\"WorkflowForm_1x4x1x2\":\"ABC\"}} </code>",
        "parameters": [
          {
            "name": "draftprocess_id",
            "description": "Draft process id.",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "description": "Standard action to be executed.Allowed actions 'initiate','formupdate'.",
                    "type": "string"
                  },
                  "comment": {
                    "description": "Workflow comment.",
                    "type": "string"
                  },
                  "values": {
                    "description": "The JSON object containing the WorkflowForm values {\"WorkflowForm_1x4x1x2\":\"ABC\"} .  See the [IMPLEMENTATION NOTES] for a more detailed explanation.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/draftprocesses_DraftProcess_PutV2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Following error scenarios might occur while using the service <br><ul><li>Could not retrieve action.</li><li>The requested action is unknown. Allowed actions 'initiate','formupdate'.</li><li>Could not Loadmap .</li><li>Could not GetNodeByID.</li></ul>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/draftprocesses_DraftProcess_NodeNotFound"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/draftprocesses_DraftProcess_Authentication"
                }
              }
            }
          }
        },
        "tags": [
          "draftprocesses"
        ]
      }
    },
    "/v2/draftprocesses": {
      "post": {
        "operationId": "createDraftProcess",
        "summary": "Creates a draft process.",
        "description": "Creates a draft process and optional custom data can be set.<br><br>When request has only workflow_id ,it creates temporary workflow based on the workflow_id .<br>If request is having optional form param doc_ids ,api sets the custom data to process created by workflow_id .<br><br>The following examples will assume that there is a workflow_id 6686 and doc_ids 384,9684 <ul><li>Creating the process with workflow_id</li><br><code>{\"workflow_id\":6686}</code><br><br><li>Creating the process with workflow_id and setting custom data via doc_ids ( Note : Multiple doc ids to be separated with coma) </li><br> <code>{\"workflow_id\":6686,\"doc_ids\":\"384,9684\"}</code><br> ",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "workflow_id": {
                    "description": "Integer .See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation.",
                    "type": "integer"
                  },
                  "doc_ids": {
                    "description": "To set any custom data to the workflow </br>its JSON string.See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK <br> Note : workflow_type will be in the result only for the setting up the custom data to the process , i.e when request having doc_ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/draftprocesses_DraftProcess_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Following error scenarios might occur while using the service <br><ul><li>Could not Loadmap.</li><li>Workflow Map has no versions.</li><li>Error getting node from ID</li> <li>Could not retrieve specified version from map.</li></ul>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/draftprocesses_DraftProcess_NodeNotFound"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/draftprocesses_DraftProcess_Authentication"
                }
              }
            }
          }
        },
        "tags": [
          "draftprocesses"
        ]
      }
    },
    "/v2/export/system/settings": {
      "get": {
        "operationId": "Export",
        "summary": "Export System Settings to a report file",
        "description": "Export System Settings to a report file",
        "parameters": [
          {
            "name": "includeDefaults",
            "description": "Indicates report should include default values",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "fileFormat",
            "description": "Extension of report format",
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/export_Export"
                }
              }
            }
          },
          "400": {
            "description": "{file} export failed"
          },
          "500": {
            "description": "{file} export failed: system error"
          }
        },
        "tags": [
          "export"
        ]
      }
    },
    "/v2/facets/{id}": {
      "get": {
        "operationId": "GetFacets",
        "summary": "List facets on a node",
        "description": "Gets facet information for the specified node ID.  <br><br>NOTE: If the node is a Virtual Folder the facets used to generate this object will be returned by default.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "where_facet",
            "description": "Specify facets that will alter the available facets for this node using the following syntax: <br>{facetID}:{value1}|{value2} <br><br>NOTE: If your value contains a '|', it must be escaped as '{|}'<br><br>For example: <br>&where_facet=2100:re09<br>&where_facet=2095:0|144<br>&where_facet=2100:dy20160504<br>&where_facet=2109:this{|}that|other",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "top_values_limit",
            "description": "Limit the number of available facet values to the top values only (ie. maximum values to display).<br><br> If specified with a value (ie. top_values_limit=5), the number of returned facet values will be set to that.<br><br> If specified without a value (ie. top_values_limit), then the default maximum values to display (as configured on Content Server) will be used.<br><br>NOTE: Relative date facets such as 'Modified Date' are not affected by this parameter at all, also selected facets are similarly unaffected",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "facet_id",
            "description": "Limit the output of the available facets and their values to the specified facet ID(s). This can be specified multiple times (ex. ?facet_id=5880&facet_id=5885)<br><br>NOTE: results.data.facets will always show the selected facet(s) (if any).",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "find_more",
            "description": "Filter the values of the available facets that match (including case-insensitive partial matches) the specified value<br><br>For example: <br><code>&find_more=ABC123</code> will return all facet values in available facets that match 'ABC123'. It also returns partial matches like 'AB1C23', 'ABC132', 'ABC213', etc. <br><br>NOTE: find_more must be specified with at least 3 or more Latin characters, or at least one non-Latin character.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/facets_FacetResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>The 'top_values_limit' parameter contains invalid value(s) '{<non-available facet ID>}'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "facets"
        ]
      }
    },
    "/v1/forms/nodes/categories/create": {
      "get": {
        "operationId": "categoriescreateform",
        "summary": "Alpaca form for creating a category on a node",
        "description": "Gets the Alpaca form for creating a category on a node.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "category_id",
            "description": "The ID of the category to create on the node",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_CategoriesCreateFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Category {category_id} has no version</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/categories/update": {
      "get": {
        "operationId": "categoriesupdateform",
        "summary": "Alpaca form for updating a category on a node",
        "description": "Gets the Alpaca form for updating a single category applied to a node. The metadata state tokens (for edit conflict resolution) will be under data.{category ID}_1.metadata_token",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "category_id",
            "description": "The ID of the category",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_CategoriesUpdateFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Argument 'category_id' is required</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for arguement 'category_id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Category ID {category_id} is not a category on node {id}</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/copy": {
      "get": {
        "operationId": "copyform",
        "summary": "Alpaca form for copying a node",
        "description": "Gets the Alpaca form for copying a node.  If adding categories, the following must be specified:  'parent_id', 'id' (only one id - adding categories during a bulk copy is not supported), 'inheritance', 'category_id' (can be specified multiple times). Example: ?parent_id=2000&id=1234&inheritance=0&category_id=4444&category_id=5555. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for a more detailed explanation.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "parent_id",
            "description": "The ID of the destination node",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "inheritance",
            "description": "The requested category inheritance model. 0 = 'Original' (the original node's categories), 1 = 'Destination' (the destination node's categories), 2 = 'Merged' (a merge of the original and destination nodes' categories)",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ]
            },
            "in": "query"
          },
          {
            "name": "category_id",
            "description": "The ID of the category to be added (can be specified multiple times, ex. category_id=4321&category_id=7878).  In order to use this parameter we need to specify 'parent_id', 'id', and 'inheritance' (ex. ?parent_id=2000&id=1111&inheritance=0&category_id=3948)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_CopyFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>The {type} type does not support the 'Copy' action</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/create": {
      "get": {
        "operationId": "createform",
        "summary": "Alpaca form for creating a node",
        "description": "Gets the Alpaca form for creating a node.",
        "parameters": [
          {
            "name": "type",
            "description": "The subtype of the node to be created",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "parent_id",
            "description": "The ID of the parent node for the node that will be created",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "category_id",
            "description": "The ID of the category to add to the node (this parameter can be called multiple times, ex. category_id=111&category_id=222)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "{attribute_name}",
            "description": "Value for the Additional Node Attribute",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_CreateFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'parent_id' is required</li><li>Argument 'type' is required</li><li>Invalid datatype specified for argument 'parent_id'</li><li>Invalid datatype specified for argument 'type'</li><li>Invalid datatype specified for argument 'category_id'</li><li>Category ID {category_id} is not a valid category.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Subtype {type} not registered</li><li>Could not get a node for {id}</li><li>Could not process object, type {type} has no action 'create'</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/file": {
      "get": {
        "operationId": "GetFormFileNode",
        "summary": "Alpaca form for filing a node",
        "description": "Gets the Alpaca form for filing a node.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_GetFormFileNodeInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>The Intelligent Filing Feature is not enabled</li><li>Error getting CS node</li><li>Invalid node type</li><li>Error getting form</li><li>Error creating form</li></ul>\""
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/move": {
      "get": {
        "operationId": "moveform",
        "summary": "Alpaca form for moving a node",
        "description": "Gets the Alpaca form for moving a node.  If adding categories, the following must be specified:  'parent_id', 'id' (only one id - adding categories during a bulk move is not supported), 'inheritance', 'category_id' (can be specified multiple times).  Example: ?parent_id=2000&id=1234&inheritance=0&category_id=4444&category_id=5555",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "parent_id",
            "description": "The ID of the destination node",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "inheritance",
            "description": "The requested category inheritance model. 0 = 'Original' (the original node's categories), 1 = 'Destination' (the destination node's categories), 2 = 'Merged' (a merge of the original and destination nodes' categories)",
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ]
            },
            "in": "query"
          },
          {
            "name": "category_id",
            "description": "The ID of the category to be added (can be specified multiple times, ex. category_id=4321&category_id=7878).  This parameter requires 'parent_id', only one of 'id', and 'inheritance' (ex. ?parent_id=2000&id=1111&inheritance=0&category_id=...)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_MoveFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>The {type} type does not support the 'Copy' action</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/properties/general": {
      "get": {
        "operationId": "generalpropertiesform",
        "summary": "Alpaca form detailing the general properties of a node",
        "description": "Gets the Alpaca form detailing the general properties of a node. The metadata state token (for edit conflict resolution) will be under data.metadata_token",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_GeneralPropertiesFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/rename": {
      "get": {
        "operationId": "renameform",
        "summary": "Alpaca form for renaming node",
        "description": "Gets the Alpaca form for renaming a node.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_RenameFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/run": {
      "get": {
        "operationId": "runform",
        "summary": "Alpaca form for running a WebReport",
        "description": "Returns the Alpaca form for running a WebReport. (*) against a field name denotes that the field supports tag replacement.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_RunPropertiesFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/properties/specific": {
      "get": {
        "operationId": "specificpropertiesform",
        "summary": "Alpaca form detailing the specific properties of a node",
        "description": "Gets the Alpaca form detailing the specific properties of a node.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_SpecificPropertiesFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/update": {
      "get": {
        "operationId": "updateforminfo",
        "summary": "Alpaca form(s) for updating a node",
        "description": "Gets the Alpaca form(s) for updating a node. The metadata state token (for edit conflict resolution) on the node data will be under data.metadata_token. The category-specific metadata state tokens will be on the categories form (role_name: categories) under data.{category ID}.{category ID}_1.metadata_token",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node that will be updated",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "role",
            "description": "If roles are specified then only forms for these roles are returned (e.g. role=categories&role=versionscontrol).",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "{attribute_name}",
            "description": "Value for the Additional Node Attribute",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_UpdateFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not process object, type {type} has no action 'update'</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/versions/categories": {
      "get": {
        "operationId": "versionscategoriesform",
        "summary": "Alpaca form for displaying the categories on a version",
        "description": "Gets the Alpaca form for displaying the categories on a version.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "version_number",
            "description": "The version number of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_VersionsCategoriesFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required.</li><li>Argument 'version_number' is required.</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'version_number'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Error getting version for node.</li><li>Could not process object, type {type} has no role 'VersionCategories'.</li><li>Could not get a node for {id}</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/versions/create": {
      "get": {
        "operationId": "versionscreateform",
        "summary": "Alpaca form for creating a version on a node",
        "description": "Gets the Alpaca form for creating a version on a node.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_VersionsCreateFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>The {type} type does not support the 'Versions-add' action</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/versions/update": {
      "get": {
        "operationId": "versionsupdateform",
        "summary": "Alpaca form for updating a version on a node",
        "description": "Gets the Alpaca form for updating a version on a node.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "version_number",
            "description": "The version number to update",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_VersionsUpdateFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not retrieve form. Invalid or missing parameters</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'version_number'</li><li>Attribute 'version_number' is required</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>The version number {version_number} is not a version on the node {id}</li><li>The {type} type does not support the 'Versions-update' action</li></ul>"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/versions/properties/general": {
      "get": {
        "operationId": "versiongeneralpropertiesform",
        "summary": "Alpaca form detailing the general properties of a version",
        "description": "Gets the Alpaca form detailing the general properties of a version.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "version_number",
            "description": "The version number of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_VersionGeneralPropertiesFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Argument 'version_number' is required</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'version_number'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/nodes/versions/properties/specific": {
      "get": {
        "operationId": "versionspecificpropertiesform",
        "summary": "Alpaca form detailing the specific properties of a version",
        "description": "Gets the Alpaca form detailing the specific properties of a version.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "version_number",
            "description": "The version number of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_VersionSpecificPropertiesFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li><li>Argument 'version_number' is required</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'version_number'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/processes/tasks/update": {
      "get": {
        "operationId": "workflowpropertiesform",
        "summary": "Alpaca forms detailing the specific properties of a workflow",
        "description": "Gets the Alpaca forms for displaying a workflow item.",
        "parameters": [
          {
            "name": "process_id",
            "description": "The ID of the workflow",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "subprocess_id",
            "description": "The ID of the sub workflow",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "task_id",
            "description": "The ID of the task in the workflow",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_WorkflowPropertiesFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'process_id' is required</li><li>Argument 'subprocess_id' is required</li><li>Argument 'task_id' is required</li><li>Invalid datatype specified for argument 'process_id'</li><li>Invalid datatype specified for argument 'subprocess_id'</li><li>Invalid datatype specified for argument 'task_id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a workflow for {process_id}, {subprocess_id}, {task_id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/draftprocesses": {
      "get": {
        "operationId": "workflowpropertiesform2",
        "summary": "Alpaca forms detailing the specific properties of a workflow",
        "description": "Gets the Alpaca forms for displaying a draft workflow item.",
        "parameters": [
          {
            "name": "draftprocess_id",
            "description": "The ID of the draft workflow",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_WorkflowPropertiesFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'draftprocess_id' is required</li><li>Invalid datatype specified for argument 'draftprocess_id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a draft workflow for {draftprocess_id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v1/forms/users/{user_id}/view": {
      "get": {
        "operationId": "getuserform",
        "summary": "Alpaca form for a user",
        "description": "Gets the Alpaca form for a user.",
        "parameters": [
          {
            "name": "user_id",
            "description": "The id of the user",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_UserFormInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'user_id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a member for {id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v2/forms/doctemplates/create": {
      "get": {
        "operationId": "GetCreateForm",
        "summary": "Alpaca Forms for instance creation from template",
        "description": "Fetches the meta data for document templates to render the create form while creating an instance to a selected template",
        "parameters": [
          {
            "name": "parent_id",
            "description": "Parent ID",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          },
          {
            "name": "template_id",
            "description": "Template ID",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/forms_DoctemplatesCreateResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication is required."
          },
          "500": {
            "description": "Could not get create form for {id}"
          }
        },
        "tags": [
          "forms"
        ]
      }
    },
    "/v2/intelligentfiling/{id}": {
      "post": {
        "operationId": "AutofileDocument",
        "summary": "Autofile a document",
        "description": "Files a document from an Intelligent Filing Folder.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the document",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "filing_destination_id",
            "description": "The Business Workspace instance to add the document to",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "in": "query"
          },
          {
            "name": "filing_classification_id",
            "description": "The classification ID for the Document Type to use to choose the sub-folder",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "in": "query"
          },
          {
            "name": "parent_id",
            "description": "The parent container to add the document to",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/intelligentfiling_V2ResponseIntelligentFilingPost"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li><li>Could not process object, invalid request</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>The Intelligent Filing Feature is not enabled</li><li>Error getting document node</li><li>Invalid node type</li><li>Error filing document</li></ul>\""
          }
        },
        "tags": [
          "intelligentfiling"
        ]
      }
    },
    "/v2/lladmin/adminserver/setup": {
      "post": {
        "operationId": "lladmin",
        "summary": "Create/check status of an Admin Server",
        "description": "Checks on the status of an existing Admin Server or creates it if it doesn't exist",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "alias": {
                    "description": "The Admin Server name (in the form of 'AdminServer-XX', where XX is a 2 digit number (01, 02, 10, 11....))",
                    "type": "string"
                  },
                  "hostName": {
                    "description": "Hostname or IP of the Admin Server",
                    "type": "string"
                  },
                  "portNumber": {
                    "description": "Port number of the Admin Server",
                    "type": "integer"
                  },
                  "password": {
                    "description": "The password set on the Admin Server",
                    "type": "string",
                    "format": "password"
                  },
                  "Description": {
                    "description": "A description for the Admin Server",
                    "type": "string"
                  },
                  "defaultServer": {
                    "description": "Whether to mark the Admin Server as a default server",
                    "type": "boolean"
                  },
                  "FileCacheEnabled": {
                    "description": "Whether to setup the Admin Server as a File Cache server",
                    "type": "boolean"
                  }
                },
                "required": [
                  "alias",
                  "hostName",
                  "portNumber",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lladmin_setup"
                }
              }
            }
          },
          "500": {
            "description": "An internal error occured"
          }
        },
        "tags": [
          "lladmin"
        ]
      }
    },
    "/v1/members": {
      "get": {
        "operationId": "SearchMember",
        "summary": "Search for user | Search for group",
        "description": "Search for a user or group",
        "parameters": [
          {
            "name": "where_type",
            "description": "Specify 0 for a user, and 1 for a group",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column (Using prefixes such as sort=asc_name or sort=desc_name ). Format can be sort = id, sort = name, sort = first_name, sort = last_name, sort = group_id, sort = mailaddress. If the prefix of asc or desc is not used then asc will be assumed.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "query",
            "description": "Filters the results, returning the users with the specified query string in their log-in name, last name or first name, and returning the groups with the specified query string in their group name. <br><br>The query value will be used to perform a search within the log-in name, first name and last name properties for users and group name for groups to see if that value is contained within any of those properties. This differs from the user search that is performed in Classic UI where it searches for a specific property that begins with the value provided by the user.<br><br>Note: The query value cannot have wildcard characters (*, #, etc) as wildcard characters are not supported.<br><br>Add '?query=value' to the end of the URL string to use this parameter: <code>/v1/members?query=value</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_SearchMember"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'where_type'</li><li>Invalid datatype specified for argument 'limit'</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "CreateMember",
        "summary": "Create group | Create user",
        "description": "Creates a user or group.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Example to create a user:<br><br><code>body : { \"type\": 0, \"name\": \"new_user\", \"group_id\": 1001 }</code><br><br>Example to create a group:<br><br><code>body : { \"type\": 1, \"name\": \"new_group\" }</code><br><br><b>The parameters for creating a user or group are listed below:</b><hr></hr>\n\nCreate user\n- <b>required fields</b>: type, name, group_id\n- defaults: type = **0**\n\nCreate group\n- <b>required fields</b>: type, name\n- defaults: type = **1**",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "The type of member to create (e.g. 0 for a user, and 1 for a group).",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the user or group",
                    "type": "string"
                  },
                  "group_id": {
                    "description": "The group ID of the user's base group. This is a required field if type is set to 0 (user)",
                    "type": "integer"
                  },
                  "first_name": {
                    "description": "First name of the user",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Last name of the user",
                    "type": "string"
                  },
                  "middle_name": {
                    "description": "Middle name of the user",
                    "type": "string"
                  },
                  "title": {
                    "description": "The user's title",
                    "type": "string"
                  },
                  "business_email": {
                    "description": "The user's business email address",
                    "type": "string"
                  },
                  "business_phone": {
                    "description": "The user's business phone number",
                    "type": "string"
                  },
                  "business_fax": {
                    "description": "The user's business fax number",
                    "type": "string"
                  },
                  "office_location": {
                    "description": "The user's office location",
                    "type": "string"
                  },
                  "time_zone": {
                    "description": "The time zone the user is in",
                    "type": "integer"
                  },
                  "display_language": {
                    "description": "The language code of the user's preferred display language",
                    "type": "string"
                  },
                  "privilege_content_manager": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_login": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_public_access": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_modify_users": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_modify_groups": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_user_admin_rights": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_grant_discovery": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_system_admin_rights": {
                    "description": "",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_CreateMember"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'type'</li><li>Error creating a new user</li><li>Could not create group {name}: Specified name already exists</li><li>Error retrieving information for the base group</li><li>Member type {type} not registered</li><li>Could not set feature Group. The value must be an integer</li><li>Missing required parameter 'Group'</li><li>Missing required parameter 'Name'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members": {
      "get": {
        "operationId": "SearchMember2",
        "summary": "Search for user | Search for group",
        "description": "Search for a user or group",
        "parameters": [
          {
            "name": "where_type",
            "description": "Specify 0 for a user, and 1 for a group",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "where_business_email",
            "description": "Filters the results, returning the users where the business email matches the specified string",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filters the results, returning the users where the login name matches the specified string",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_first_name",
            "description": "Filters the results, returning the users where the first name matches the specified string",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_last_name",
            "description": "Filters the results, returning the users where the last name matches the specified string",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column (Using prefixes such as sort=asc_name or sort=desc_name ). Format can be sort = id, sort = name, sort = first_name, sort = last_name, sort = group_id, sort = mailaddress. If the prefix of asc or desc is not used then asc will be assumed.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "query",
            "description": "Filters the results, returning the users with the specified query string in any of the following fields: log-in name, first name, last name, email address, and groups with the specified query string in the group name. <br> NOTE: query cannot be used together with any combination of: where_name, where_first_name, where_last_name, where_business_email.<br><br>The query value will be used to perform a search within the log-in name, first name, last name and email address properties for users and group name for groups to see if that value is contained within any of those properties. This differs from the user search that is performed in Classic UI where it searches for a specific property that begins with the value provided by the user<br><br>Note: The query value cannot have wildcard characters (*, #, etc) as wildcard characters are not supported.<br><br>Add '?query=value' to the end of the URL string to use this parameter: <code>/v2/members?query=value</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseMembersSearch"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'where_type'</li><li>Invalid datatype specified for argument 'limit'</li><li>Invalid limit</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li><li>The parameter(s) 'query' cannot be used together with parameter(s) 'where_business_email, where_name, where_first_name, where_last_name '</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "CreateMember2",
        "summary": "Create user | Create group",
        "description": "Creates a user or group.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Example to create a user:<br><br><code>body : { \"type\": 0, \"name\": \"new_user\", \"group_id\": 1001 }</code><br><br>Example to create a group:<br><br><code>body : { \"type\": 1, \"name\": \"new_group\" }</code><br><br><b>The parameters for creating a user or group are listed below:</b><hr></hr>\n\nCreate user\n- <b>required fields</b>: type, name, group_id\n- defaults: type = **0**\n\nCreate group\n- <b>required fields</b>: type, name\n- defaults: type = **1**",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "The type of member to create",
                    "type": "integer"
                  },
                  "name": {
                    "description": "Name of the group",
                    "type": "string"
                  },
                  "group_id": {
                    "description": "The group ID of the user's base group (if creating a group, this parameter is not required).",
                    "type": "integer"
                  },
                  "password": {
                    "description": "The user's password",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "First name of the user",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "Last name of the user",
                    "type": "string"
                  },
                  "middle_name": {
                    "description": "Middle name of the user",
                    "type": "string"
                  },
                  "title": {
                    "description": "The user's title",
                    "type": "string"
                  },
                  "business_email": {
                    "description": "The user's business email address",
                    "type": "string"
                  },
                  "business_phone": {
                    "description": "The user's business phone number",
                    "type": "string"
                  },
                  "business_fax": {
                    "description": "The user's business fax number",
                    "type": "string"
                  },
                  "office_location": {
                    "description": "The user's office location",
                    "type": "string"
                  },
                  "time_zone": {
                    "description": "The time zone the user is in",
                    "type": "integer"
                  },
                  "birth_date": {
                    "description": "The user's birthday",
                    "type": "string",
                    "format": "date"
                  },
                  "cell_phone": {
                    "description": "The user's personal mobile phone number",
                    "type": "string"
                  },
                  "personal_url_1": {
                    "description": "The user's bookmarked url link 1",
                    "type": "string"
                  },
                  "personal_url_2": {
                    "description": "The user's bookmarked url link 2",
                    "type": "string"
                  },
                  "personal_url_3": {
                    "description": "The user's bookmarked url link 3",
                    "type": "string"
                  },
                  "personal_email": {
                    "description": "The user's personal email address",
                    "type": "string"
                  },
                  "personal_interests": {
                    "description": "The user's personal interests and hobbies",
                    "type": "string"
                  },
                  "personal_website": {
                    "description": "The user's personal home page",
                    "type": "string"
                  },
                  "home_address_1": {
                    "description": "The user's home address 1",
                    "type": "string"
                  },
                  "home_address_2": {
                    "description": "The user's home address 2",
                    "type": "string"
                  },
                  "home_address_3": {
                    "description": "The user's home address 3",
                    "type": "string"
                  },
                  "home_fax": {
                    "description": "The user's personal fax number",
                    "type": "string"
                  },
                  "home_phone": {
                    "description": "The user's personal home phone number",
                    "type": "string"
                  },
                  "gender": {
                    "description": "The user's gender",
                    "type": "string"
                  },
                  "pager": {
                    "description": "The user's office mobile phone number",
                    "type": "string"
                  },
                  "photo_id": {
                    "description": "The ID of the node for the user's profile photo",
                    "type": "integer"
                  },
                  "display_language": {
                    "description": "The language code of the user's preferred display language",
                    "type": "string"
                  },
                  "privilege_content_manager": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_login": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_public_access": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_modify_users": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_modify_groups": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_user_admin_rights": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_grant_discovery": {
                    "description": "",
                    "type": "boolean"
                  },
                  "privilege_system_admin_rights": {
                    "description": "",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseMembersCreate"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not process object, invalid action 'create'</li><li>Invalid datatype specified for argument 'type'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Member type {type} not registered</li><li>Missing required parameter 'Group'</li><li>Missing required parameter 'Name'</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v1/members/{id}": {
      "get": {
        "operationId": "GetMemberInfo",
        "summary": "Get user info | Get group info | Get restricted privilege info",
        "description": "Gets user's information | Gets group's information | Gets restricted privilege's information",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the user, group, or privilege",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_MemberInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li><li>Could not process object, invalid request</li><li>Could not get a member for {id}</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Insufficient privileges."
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "UpdateMemberGroup",
        "summary": "Update user | Update group",
        "description": "Updates user's information | Updates group's information",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the user or group",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user",
                    "type": "string"
                  },
                  "group_id": {
                    "description": "The group ID of the user's base group",
                    "type": "integer"
                  },
                  "fields": {
                    "description": "Exclude all fields except the one that is specified",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Expand all fields that belong to the specified person",
                    "type": "string"
                  },
                  "expand_fields": {
                    "description": "Expand specified field (ex. 'id').  Note: field must belong to a persona",
                    "type": "string"
                  },
                  "password": {
                    "description": "User's password",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "User's first name",
                    "type": "string"
                  },
                  "middle_name": {
                    "description": "User's middle name",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "User's last name",
                    "type": "string"
                  },
                  "title": {
                    "description": "User's title",
                    "type": "string"
                  },
                  "business_email": {
                    "description": "User's business email",
                    "type": "string"
                  },
                  "business_phone": {
                    "description": "User's business phone number",
                    "type": "string"
                  },
                  "business_fax": {
                    "description": "User's business fax number",
                    "type": "string"
                  },
                  "office_location": {
                    "description": "User's office location",
                    "type": "string"
                  },
                  "time_zone": {
                    "description": "User's time zone",
                    "type": "integer"
                  },
                  "birth_date": {
                    "description": "The user's birthday",
                    "type": "string",
                    "format": "date"
                  },
                  "cell_phone": {
                    "description": "The user's personal mobile phone number",
                    "type": "string"
                  },
                  "gender": {
                    "description": "The user's gender",
                    "type": "integer"
                  },
                  "home_address_1": {
                    "description": "The user's home address 1",
                    "type": "string"
                  },
                  "home_address_2": {
                    "description": "The user's home address 2",
                    "type": "string"
                  },
                  "home_fax": {
                    "description": "The user's personal fax number",
                    "type": "string"
                  },
                  "home_phone": {
                    "description": "The user's personal home phone number",
                    "type": "string"
                  },
                  "pager": {
                    "description": "The user's office mobile phone number",
                    "type": "string"
                  },
                  "personal_email": {
                    "description": "The user's personal email address",
                    "type": "string"
                  },
                  "personal_interests": {
                    "description": "The user's personal interests and hobbies",
                    "type": "string"
                  },
                  "personal_url_1": {
                    "description": "The user's bookmarked url link 1",
                    "type": "string"
                  },
                  "personal_url_2": {
                    "description": "The user's bookmarked url link 2",
                    "type": "string"
                  },
                  "personal_url_3": {
                    "description": "The user's bookmarked url link 3",
                    "type": "string"
                  },
                  "personal_website": {
                    "description": "The user's personal home page",
                    "type": "string"
                  },
                  "photo_id": {
                    "description": "The ID of the node for the user's profile photo",
                    "type": "integer"
                  },
                  "display_language": {
                    "description": "The language code of the user's preferred display language",
                    "type": "string"
                  },
                  "privilege_content_manager": {
                    "description": "TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_login": {
                    "description": "TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_public_access": {
                    "description": "TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_modify_users": {
                    "description": "TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_modify_groups": {
                    "description": "TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_user_admin_rights": {
                    "description": "TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_system_admin_rights": {
                    "description": "TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_UpdateMemberGroup"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Parameters are required for PUT, POST, and PATCH methods</li><li>Could not process object, invalid request</li><li>Could not set feature Leader, value must be an Integer</li><li>Could not set feature Group, value must be an Integer</li><li>Could not set feature TimeZone, value must be an Integer</li><li>Could not set feature Public Access, value must be a Boolean</li><li>Could not set feature Create/Modify Users, value must be a Boolean</li><li>Could not set feature Create/Modify Groups, value must be a Boolean</li><li>Could not set feature User Administration Rights, value must be a Boolean</li><li>Could not set feature System Administration Rights, value must be a Boolean</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "DeleteMember",
        "summary": "Delete user | Delete Group",
        "description": "Delete user or group.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the user or group",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_DeleteMember"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not process object, invalid request</li><li>Could not get a member for {id}</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v1/members/{id}/photo": {
      "get": {
        "operationId": "GetMemberInfo2",
        "summary": "Get profile photo",
        "description": "Gets the specified member's profile photo. If the user does not have permission to the profile photo no content and a status code of 500 will be returned.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the user or group",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "304": {
            "description": "Not modified."
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li><li>Could not process object, invalid request</li><li>Could not get a member for {id}</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "No profile photo is available."
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/{id}": {
      "get": {
        "operationId": "GetMemberInfo4",
        "summary": "Get user info | Get group info | Get restricted privilege info",
        "description": "Gets a user's information | Gets a group's information | Gets a restricted privilege's information",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the user, group, or restricted privilege",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseMembersGet"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li><li>Could not process object, invalid request</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a member for {id}</li><li>Insufficient privileges.</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "UpdateMember",
        "summary": "Update user | Update group",
        "description": "Updates a user's information | Updates a group's information",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the user or group",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the user or group",
                    "type": "string"
                  },
                  "group_id": {
                    "description": "The group ID of the user's base group",
                    "type": "integer"
                  },
                  "leader_id": {
                    "description": "[Group only] The user ID of the group leader",
                    "type": "integer"
                  },
                  "password": {
                    "description": "[User only] User's password",
                    "type": "string"
                  },
                  "first_name": {
                    "description": "[User only] User's first name",
                    "type": "string"
                  },
                  "middle_name": {
                    "description": "[User only] User's middle name",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "[User only] User's last name",
                    "type": "string"
                  },
                  "title": {
                    "description": "[User only] User's title",
                    "type": "string"
                  },
                  "business_email": {
                    "description": "[User only] User's business email",
                    "type": "string"
                  },
                  "business_phone": {
                    "description": "[User only] User's business phone number",
                    "type": "string"
                  },
                  "business_fax": {
                    "description": "[User only] User's business fax number",
                    "type": "string"
                  },
                  "office_location": {
                    "description": "[User only] User's office location",
                    "type": "string"
                  },
                  "time_zone": {
                    "description": "[User only] User's time zone",
                    "type": "integer"
                  },
                  "birth_date": {
                    "description": "[User only] The user's birthday",
                    "type": "string",
                    "format": "date"
                  },
                  "cell_phone": {
                    "description": "[User only] The user's personal mobile phone number",
                    "type": "string"
                  },
                  "personal_url_1": {
                    "description": "[User only] The user's bookmarked url link 1",
                    "type": "string"
                  },
                  "personal_url_2": {
                    "description": "[User only] The user's bookmarked url link 2",
                    "type": "string"
                  },
                  "personal_url_3": {
                    "description": "[User only] The user's bookmarked url link 3",
                    "type": "string"
                  },
                  "personal_email": {
                    "description": "[User only] The user's personal email address",
                    "type": "string"
                  },
                  "personal_interests": {
                    "description": "[User only] The user's personal interests and hobbies",
                    "type": "string"
                  },
                  "personal_website": {
                    "description": "[User only] The user's personal home page",
                    "type": "string"
                  },
                  "home_address_1": {
                    "description": "[User only] The user's home address 1",
                    "type": "string"
                  },
                  "home_address_2": {
                    "description": "[User only] The user's home address 2",
                    "type": "string"
                  },
                  "home_address_3": {
                    "description": "[User only] The user's home address 3",
                    "type": "string"
                  },
                  "home_fax": {
                    "description": "[User only] The user's personal fax number",
                    "type": "string"
                  },
                  "home_phone": {
                    "description": "[User only] The user's personal home phone number",
                    "type": "string"
                  },
                  "gender": {
                    "description": "[User only] The user's gender",
                    "type": "integer"
                  },
                  "pager": {
                    "description": "[User only] The user's office mobile phone number",
                    "type": "string"
                  },
                  "photo_id": {
                    "description": "[User only] The ID of the node for the user's profile photo",
                    "type": "integer"
                  },
                  "display_language": {
                    "description": "The language code of the user's preferred display language",
                    "type": "string"
                  },
                  "privilege_content_manager": {
                    "description": "[User only] TRUE if the user has the Content Manager privilege, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_login": {
                    "description": "[User only] TRUE if the user log-in is enabled, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_public_access": {
                    "description": "[User only] TRUE means the user can access any item in the system for which the Public Access permission is activated, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_modify_users": {
                    "description": "[User only] TRUE if the user can create users and modify or delete the users that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_modify_groups": {
                    "description": "[User only] TRUE if the user can create groups and modify or delete the groups that he or she creates, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_user_admin_rights": {
                    "description": "[User only] TRUE if the user can create, modify, and delete any user or group, FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "privilege_system_admin_rights": {
                    "description": "[User only] TRUE means the user has full access to Content Server's administration functionality, if the user knows the administration password. This privilege also provides access to all items in the system, without filtering for permissions. This privilege does not include the ability to administer users or groups. FALSE otherwise. This information is only available to Administrators or User Administrators",
                    "type": "boolean"
                  },
                  "fields": {
                    "description": "Exclude all fields except the one that is specified",
                    "type": "string"
                  },
                  "expand": {
                    "description": "Expand all fields that belong to the specified person",
                    "type": "string"
                  },
                  "expand_fields": {
                    "description": "Expand specified field (ex. 'id').  Note: field must belong to a persona",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2UpdateMember"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Parameters are required for PUT, POST, and PATCH methods</li><li>Could not process object, invalid request</li><li>Could not set feature Group, value must be an Integer</li><li>Could not set feature Leader, value must be an Integer</li><li>Could not set feature TimeZone, value must be an Integer</li><li>Could not set feature Public Access, value must be a Boolean</li><li>Could not set feature Create/Modify Users, value must be a Boolean</li><li>Could not set feature Create/Modify Groups, value must be a Boolean</li><li>Could not set feature User Administration Rights, value must be a Boolean</li><li>Could not set feature System Administration Rights, value must be a Boolean</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "DeleteMember2",
        "summary": "Delete user | Delete group",
        "description": "Delete user or group.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the user or group to delete.",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseEmpty"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a member for {id}</li><li>Could not delete member {id}, already deleted</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/{id}/members": {
      "get": {
        "operationId": "ListMembers",
        "summary": "Lists the members of a group | Lists the members of a restricted privilege",
        "description": "Lists the members of a group or restricted privilege and returns their information.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the group or restricted privilege",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Ascending order by named column.  Format can be sort=name or sort=first_name or sort=last_name or sort=mailaddress. ",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseBrowseMembersSearch"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li><li>Invalid datatype specified for argument 'where_type'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a member for {id}</li><li>Invalid group {id}</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li><li>Could not set feature limit, the value 0 is less than the minimum value (1)</li><li>Insufficient privileges</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "AddMember",
        "summary": "Add members to a group | Add members to a restricted privilege",
        "description": "Add members to a group. | Add members to a restricted privilege.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the group or restricted privilege",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "member_id": {
                    "description": "The IDs of the users and/or groups to add.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseEmpty"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not add a member: 'Could not locate specified child name.'</li><li>Could not set feature Member ID, value must be a Integer</li><li>Could not get a member for {id}</li><li>Insufficient privileges</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "RemoveMember",
        "summary": "Remove members from a group | Remove members from a restricted privilege",
        "description": "Remove members from a group. | Remove members from a restricted privilege.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the group or restricted privilege.",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "member_id",
            "description": "The IDs of the users and/or groups to remove.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseEmpty"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not delete a member: 'Could not locate specified child name.'</li><li>Could not set feature Member ID, value must be a Integer</li><li>Could not get a member for {id}</li><li>Insufficient privileges</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/memberof": {
      "get": {
        "operationId": "SearchGroups",
        "summary": "Search for groups where currently logged in user is a member",
        "description": "Get list of groups where currently logged in user is a member.",
        "parameters": [
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseGroupsSearch"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li><li>Could not set feature Limit, the value 0 is less than the minimum value (1)</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/objecttypes": {
      "get": {
        "operationId": "ObjectTypes",
        "summary": "List the Object Types that can be created by the authenticated user",
        "description": "Get the list of Object Types that can be created by the authenticated user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseObjectTypes"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li><li>Could not set feature Limit, the value 0 is less than the minimum value (1)</li><li>Could not set feature Page Number, the value 0 is less than the minimum value (1)</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/accessed": {
      "get": {
        "operationId": "GetAccessed",
        "summary": "Get recently accessed list",
        "description": "Gets a member's recently accessed list. This call will return a maximum of 25 items.",
        "parameters": [
          {
            "name": "class_mask",
            "description": "View class to filter on.",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filters the results, returning the recently accessed items with the specified filter string in their name",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          },
          {
            "name": "where_type",
            "description": "Specify subtype(s) which should be returned (144 for document, 749 for email and so on). Multiple where_type parameters can be specified.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "where_parent_id",
            "description": "Specify container ID (parent ID) which the recent items belong to. Items directly in the parent and in any sub-folders will be returned.",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column (Using prefixes such as sort=asc_name or sort=desc_name ).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseAccessed"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/targets": {
      "get": {
        "operationId": "GetTargets",
        "summary": "Get recent targets",
        "description": "Get the current user's list of recently targeted containers. This call will return a maximum of 15 items.",
        "parameters": [
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseCollection"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/assignments": {
      "get": {
        "operationId": "GetAssignments",
        "summary": "Get assignments",
        "description": "Gets a user's Assignments.",
        "parameters": [
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseAssignments"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/favorites": {
      "get": {
        "operationId": "GetFavorites",
        "summary": "Get Favorites",
        "description": "Gets a user's Favorites.",
        "parameters": [
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column (name, order, tab_id). Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.  Up to two columns can be specified.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filters the results, returning the favorites with the specified filter string in their name",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseCollectionFavorites"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Invalid value for sort</li><li>Could not set feature Page Size, the value {limit value} is less than the minimum value (1)</li><li>Could not set feature Page Number, the value {page value} is less than the minimum value (1)</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/favorites/tabs": {
      "get": {
        "operationId": "GetFavoritesTab",
        "summary": "Get Favorites Tab",
        "description": "Gets a user's Favorites Tabs.",
        "parameters": [
          {
            "name": "sort",
            "description": "Order by named column (name, order). Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseCollectionFavoritesTab"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Invalid value for sort"
          }
        },
        "tags": [
          "members"
        ]
      },
      "post": {
        "operationId": "AddFavoritesTabs",
        "summary": "Add a Favorites Tab",
        "description": "Adds a Favorites Tab for the current user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The Name of the tab",
                    "type": "string"
                  },
                  "order": {
                    "description": "The Order of the tab",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResultFavoritesTab"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Argument 'name' is required</li><li>Invalid value for order</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/favorites/tabs/{id}/nodes": {
      "get": {
        "operationId": "GetFavoritesInTab",
        "summary": "Get Favorites in a Tab",
        "description": "Gets a user's Favorites in a Tab.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the tab for the favorites to list",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column (name, order). Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filters the results, returning the favorites with the specified filter string in their name",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseCollectionFavorites"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Invalid value for tabID</li><li>Invalid value for sort</li><li>Could not set feature Page Size, the value {limit value} is less than the minimum value (1)</li><li>Could not set feature Page Number, the value {page value} is less than the minimum value (1)</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/favorites/tabs/unsorted/nodes": {
      "get": {
        "operationId": "GetUnsortedFavorites",
        "summary": "Get unsorted Favorites",
        "description": "Gets a user's Unsorted Favorites.",
        "parameters": [
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column (name, order). Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filters the results, returning the favorites with the specified filter string in their name",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseCollectionFavorites"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Invalid value for sort</li><li>Could not set feature Page Size, the value {limit value} is less than the minimum value (1)</li><li>Could not set feature Page Number, the value {page value} is less than the minimum value (1)</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/favorites/{id}": {
      "post": {
        "operationId": "AddFavorite",
        "summary": "Add a Favorite",
        "description": "Adds a Favorite for the current user.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the favorite to add",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_AddFavorite"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Could not set feature Node ID, value must be a Integer</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      },
      "put": {
        "operationId": "UpdateFavorite",
        "summary": "Update a Favorite",
        "description": "Updates a favorite",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the favorite to update",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The favorite's new name",
                    "type": "string"
                  },
                  "order": {
                    "description": "The favorite's new order",
                    "type": "integer"
                  },
                  "tab_id": {
                    "description": "The favorite's new tab id (NOTE: Enter 0 (zero) to untab the favorite)",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseEmpty"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Parameters are required for PUT, POST, and PATCH methods</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Invalid value for order</li><li>Invalid value for node ID</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "RemoveFavorite",
        "summary": "Remove a Favorite",
        "description": "Removes a Favorite for the current user.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the favorite to remove",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseEmpty"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not set feature Node ID, value must be a Integer"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/favorites/tabs/{id}": {
      "put": {
        "operationId": "UpdateFavoritesTab",
        "summary": "Update a Favorites Tab",
        "description": "Updates a favorites tab",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the tab to update",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "The tab's new name",
                    "type": "string"
                  },
                  "order": {
                    "description": "The tab's new order",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseEmpty"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Parameters are required for PUT, POST, and PATCH methods</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Invalid value for order</li><li>Invalid value for tab ID</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      },
      "delete": {
        "operationId": "RemoveFavoritesdTab",
        "summary": "Remove a Favorites Tab",
        "description": "Remove a Favorites Tab and the Favorites associated with it for the current user.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the tab to remove",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseEmpty"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Invalid Value For tab ID"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/members/reserved": {
      "get": {
        "operationId": "GetReservedItems",
        "summary": "Get Reserved Items",
        "description": "Get the objects reserved by the authenticated user.",
        "parameters": [
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column. Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filters the results, returning the objects with the specified filter string in their name",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2ResponseCollectionReserved"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'limit'</li><li>Invalid datatype specified for argument 'page'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not set feature Page Size, the value {limit value} is less than the minimum value (1)</li><li>Could not set feature Page Number, the value {page value} is less than the minimum value (1)</li></ul>"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/multipart/settings": {
      "get": {
        "operationId": "multipartUploadSettings",
        "summary": "Get Large File Upload settings",
        "description": "Gets the current settings for Large File Upload.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/multipart_GetSettings"
                }
              }
            }
          },
          "400": {
            "description": "<ul>\n  <li>Bad Request - Invalid URL</li>\n  <li>The REST API URL could not be found in the mappings registry</li>\n</ul>\n"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "multipart"
        ]
      }
    },
    "/v2/multipart": {
      "post": {
        "operationId": "multipartUploadStart",
        "summary": "Start a Large File Upload",
        "description": "Starts a Large File Upload session.",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "file_name": {
                    "description": "Name of file being uploaded (non-empty)",
                    "type": "string"
                  },
                  "file_size": {
                    "description": "Size of file being uploaded (in bytes)",
                    "type": "integer"
                  },
                  "mime_type": {
                    "description": "MIME type of file being uploaded (non-empty)",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/multipart_StartUpload"
                }
              }
            }
          },
          "400": {
            "description": "<ul>\n  <li>Bad Request - Invalid URL</li>\n  <li>The REST API URL could not be found in the mappings registry</li>\n  <li>Pattern of argument was not recognized.</li>\n</ul>\n"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Invalid block size: File size must be between {min_size} and {max_size} bytes."
          }
        },
        "tags": [
          "multipart"
        ]
      }
    },
    "/v2/multipart/{upload_key}/{part_number}": {
      "post": {
        "operationId": "multipartUploadPart",
        "summary": "Upload a Large File part",
        "description": "Upload a file part to a Large File Upload session.",
        "parameters": [
          {
            "name": "upload_key",
            "description": "The key to identify the Large File Upload session.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "part_number",
            "description": "The number of the part being uploaded.",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "part_content": {
                    "description": "The part being uploaded",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "<ul>\n  <li>Bad Request - Invalid URL</li>\n  <li>The REST API URL could not be found in the mappings registry</li>\n  <li>Pattern of argument was not recognized.</li>\n</ul>\n"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul>\n  <li>Failed to complete request. Either the UploadKey is invalid, or you do not have permission to access this upload session.</li>\n  <li>Multipart Upload session expired.</li>\n  <li>Invalid BlockID: Expected BlockID between 1 and {n}.</li>\n  <li>Invalid BlockID: BlockID {n} has already been uploaded.</li>\n</ul>\n"
          }
        },
        "tags": [
          "multipart"
        ]
      }
    },
    "/v2/multipart/{upload_key}": {
      "post": {
        "operationId": "multipartUploadComplete",
        "summary": "Complete a Large File Upload",
        "description": "Complete and close a Large File Upload session.",
        "parameters": [
          {
            "name": "upload_key",
            "description": "The key to identify the Large File Upload session.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "<ul>\n  <li>Bad Request - Invalid URL</li>\n  <li>The REST API URL could not be found in the mappings registry</li>\n  <li>Pattern of argument was not recognized.</li></ul>\n"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul>\n  <li>Failed to complete request. Either the UploadKey is invalid, or you do not have permission to access this upload session.</li>\n  <li>Invalid status. Cannot close an empty or already closed upload.</li>\n</ul>\n"
          }
        },
        "tags": [
          "multipart"
        ]
      },
      "delete": {
        "operationId": "multipartUploadRemove",
        "summary": "Cancel a Large File Upload",
        "description": "Cancel and remove a Large File Upload session.",
        "parameters": [
          {
            "name": "upload_key",
            "description": "The key to identify the Large File Upload session.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "<ul>\n  <li>Bad Request - Invalid URL</li>\n  <li>The REST API URL could not be found in the mappings registry</li>\n  <li>Pattern of argument was not recognized.</li>\n</ul>\n"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Failed to complete request. Either the UploadKey is invalid, or you do not have permission to access this upload session."
          }
        },
        "tags": [
          "multipart"
        ]
      }
    },
    "/v2/members/sessions": {
      "get": {
        "operationId": "GetSessions",
        "summary": "Get current user's session info",
        "description": "Get list of session information of the currently logged in user.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/members_V2GetSessions"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "members"
        ]
      }
    },
    "/v2/nicknames/{nickname}/nodes": {
      "get": {
        "operationId": "getNodeNickname",
        "summary": "Get a node by nickname",
        "description": "Gets the data about a node's properties for the node with the specified nickname.",
        "parameters": [
          {
            "name": "nickname",
            "description": "Nickname of the node.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nicknames_V2ResponseElement"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Bad Request - Invalid URL</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "Sorry, no exact match was found for an item with the Nickname {nickname}. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "nicknames"
        ]
      }
    },
    "/v2/nodes/{id}/nicknames": {
      "put": {
        "operationId": "updateNickname",
        "summary": "Update a node's nickname",
        "description": "Updates a node's nickname.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "nickname": {
                    "description": "The updated nickname of the node.<br><ul><li>The nickname cannot be empty</li><li>The nickname cannot be the same as another node's nickname</li><li>The nickname cannot be a number <b>unless</b> it is the ID of the node</li><li>The nickname cannot contain a space or any of the following characters: <code>!%()-{}[]\";'<>?,./\\#</code></li><li>The nickname cannot exceed 248 characters in length</li></ul>",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nicknames_V2Empty"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Nickname cannot be a number</li><li>Nicknames must be unique.</li><li>Nickname not in valid format, 'nickname' contains one or more of the following bad characters or a space <code>!%()-{}[]\";'<>?,./\\#</code></li><li>Could not set feature Nickname, the length of '' is less than the minimum length (1)</li><li>Could not set feature Nickname, the length of 'nickname' is greater than the maximum length (248)</li></ul>"
          }
        },
        "tags": [
          "nicknames"
        ]
      }
    },
    "/v1/nodes": {
      "post": {
        "operationId": "createNode",
        "summary": "Create node | Copy a node",
        "description": "Creates a node OR Copies a node.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following examples will assume that there is are two categories available:<br><br>Category1 (ID 9830)<ul><li>TextField (Attribute ID 2)</li><li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li></ul>Category2 (ID 6228)<ul><li>TextField (Attribute ID 2)</li></ul><br>Create a Folder:<br><br><code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\"}</code><br><br>Create a Folder with Category1 and Category2 and use the default attribute values for both categories:<br><br><code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\", \"roles\":{\"categories\":{\"9830\":{\"9830_1\":{}}, \"6228\":{\"6228_1\":{}}}}}</code><br><br>Create a Folder with Category1 and Category2. Category1's Set Textfield on the second row has 'aaa' in the Set Textfield's third value; Category2's Textfield is 'bbb':<br><br><code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\", \"roles\":{\"categories\":{\"9830\":{\"9830_3_2_4\":[\"\",\"\",\"aaa\"]}, \"6228\":{\"6228_2\":\"bbb\"}}}}</code><br><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories):<br><br><code>{\"original_id\":12345, \"parent_id\":5678}</code><br><br>Copy a node 12345 to a folder 5678 (which doesn't have any categories) while applying Category2 with default values:<br><br><code>{\"original_id\":12345, \"parent_id\":5678, \"roles\":{\"categories\":{\"6228\":{\"6228_1\":{}}}}}</code><br><br><br>Create a node\n- <b>required fields</b>: type, name, parent_id\n\nCopy a node\n- <b>required fields</b>: original_id, parent_id\n- NOTE: original_id is the ID of the node to copy, parent_id is the ID of the node to copy original_id to\n\n<br><b>The parameters for creating nodes of a specific subtype are listed below:</b><hr></hr>\n\nCreate category\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **131**\n\nCreate channel\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **207**\n\nCreate document\n- <b>required fields</b>: type, parent_id, name, file\n- defaults: type = **144**\n\nCreate compound document\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **136**\n\nCreate folder\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **0**\n\nCreate news\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **208**\n\nCreate project\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **202**\n\nCreate shortcut\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **1**\n\nCreate generation\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **2**\n\nCreate task\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **206**\n\nCreate task group\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **205**\n\nCreate task list\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **204**\n\nCreate task milestone\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **212**\n\nCreate URL\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **140**\n\nCreate virtual folder\n- <b>required fields</b>: type, parent_id, name\n- defaults: type = **899**",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Subtype of the node. This is not required when copying a node.",
                    "type": "integer"
                  },
                  "parent_id": {
                    "description": "The parent ID of the new node",
                    "type": "integer"
                  },
                  "name": {
                    "description": "The name of the new node",
                    "type": "string"
                  },
                  "description": {
                    "description": "Description of the node",
                    "type": "string"
                  },
                  "external_create_date": {
                    "description": "External create date",
                    "type": "string",
                    "format": "date"
                  },
                  "external_modify_date": {
                    "description": "External modify date",
                    "type": "string",
                    "format": "date"
                  },
                  "external_source": {
                    "description": "External source",
                    "type": "string",
                    "enum": [
                      "file_system",
                      "mobile_device",
                      "scanner",
                      "fax",
                      "ftp",
                      "shared_drive",
                      "removable_disk",
                      "backup_media",
                      "optical_disk",
                      "onedrive",
                      "cloud_storage",
                      "camera",
                      "email_server",
                      "elink",
                      "opentext_core",
                      "edocs",
                      "sap",
                      "document_management",
                      "exchange_mailbox",
                      "notes_mailbox",
                      "outlook_pst",
                      "file_stream",
                      "mailbox_other"
                    ]
                  },
                  "external_identity": {
                    "description": "External identity",
                    "type": "string"
                  },
                  "external_identity_type": {
                    "description": "External identity type",
                    "type": "string",
                    "enum": [
                      "email_address",
                      "domain_userid",
                      "generic_userid",
                      "name",
                      "last_name",
                      "windows_sid",
                      "guid",
                      "phone_number",
                      "ldap_name",
                      "exchange_mailboxid"
                    ]
                  },
                  "original_id": {
                    "description": "Node ID",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_CreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>An item with the name '{name}' already exists.</li><li>Could not create a new [node type, e.g. 'Folder']</li><li>Missing required parameter '[parameter name]'</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Subtype {type} not registered</li><li>External source not found</li><li>Error getting identity type id</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes": {
      "post": {
        "operationId": "createNode2",
        "summary": "Create node | Copy a node",
        "description": "Creates a node OR Copies a node.<br><br> <b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br> The following examples will assume that there is are two categories available:<br><br> Category1 (ID 9830) <ul>\n  <li>TextField (Attribute ID 2)</li>\n  <li>Set (Attribute ID 3) with two rows. The Set has a multi-value Textfield (Set Attribute ID 4) that can have a maximum of 3 values</li>\n</ul> Category2 (ID 6228) <ul>\n  <li>TextField (Attribute ID 2)</li>\n</ul><br> Create a Folder:<br><br> <code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\"}</code><br><br> Create a Folder with Category1 and Category2 and use the default attribute values for both categories:<br><br> <code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\", \"roles\":{\"categories\":{\"9830_1\":{}, \"6228_1\":{}}}}</code><br><br> Create a Folder with Category1 and Category2. Category1's Set Textfield on the second row has 'aaa' in the Set Textfield's third value; Category2's Textfield is 'bbb':<br><br> <code>{\"type\":0, \"parent_id\":2000, \"name\":\"New Folder\", \"roles\":{\"categories\":{\"9830_3_2_4\":[\"\",\"\",\"aaa\"], \"6228_2\":\"bbb\"}}}</code><br><br><br> Copy a node 12345 to a folder 5678 (which doesn't have any categories):<br><br> <code>{\"original_id\":12345, \"parent_id\":5678}</code><br><br> Copy a node 12345 to a folder 5678 (which doesn't have any categories) while applying Category2 with default values:<br><br> <code>{\"original_id\":12345, \"parent_id\":5678, \"roles\":{\"categories\":{\"6228_1\":{}}}}</code><br><br><br> Create a node<br> <ul>\n  <li><b>required fields</b>: type, name, parent_id</li>\n</ul> Copy a node<br> <ul>\n  <li><b>required fields</b>: original_id, parent_id</li>\n  <li>NOTE: original_id is the ID of the node to copy, parent_id is the ID of the node to copy original_id to<br></li>\n</ul> <b>The parameters for creating nodes of a specific subtype are listed below:</b><hr></hr><br> Create category<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>131</b></li>\n</ul> Create channel<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>207</b></li>\n</ul> Create document<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name, (file <i>or</i> upload_key)</li>\n  <li>defaults: type = <b>144</b></li>\n</ul> Create compound document<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>136</b></li>\n</ul> Create folder<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>0</b></li>\n</ul> Create news<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>208</b></li>\n</ul> Create project<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>202</b></li>\n</ul> Create shortcut<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>1</b></li>\n</ul> Create generation<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>2</b></li>\n</ul> Create task<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>206</b></li>\n</ul> Create task group<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>205</b></li>\n</ul> Create task list<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>204</b></li>\n</ul> Create task milestone<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>212</b></li>\n</ul> Create URL<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>140</b></li>\n</ul> Create virtual folder<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name</li>\n  <li>defaults: type = <b>899</b></li>\n</ul> Create search query<br> <ul>\n  <li><b>required fields</b>: type, parent_id, name, search_cache_id</li>\n  <li>defaults: type = <b>258</b></li>\n</ul> Create workbench<br> <ul>\n  <li><b>required fields</b>: type, name</li>\n  <li>defaults: type = <b>528</b></li>\n</ul> Create transport package<br> <ul>\n  <li><b>required fields</b>: type, name, file (not part of the body parameter)</li>\n  <li>defaults: type = <b>531</b></li>\n</ul> Create search template<br> <ul>\n  <li><b>required fields</b>: type, name, search_cache_id</li>\n  <li>defaults: type = <b>292</b></li>\n</ul>\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "Subtype of the node. This is not required when copying a node.",
                    "type": "integer"
                  },
                  "parent_id": {
                    "description": "The parent ID of the new node",
                    "type": "integer"
                  },
                  "name": {
                    "description": "The name of the new node",
                    "type": "string"
                  },
                  "default_template": {
                    "description": "Indicates if this is the user's default search template.",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "Description of the node",
                    "type": "string"
                  },
                  "external_create_date": {
                    "description": "External create date",
                    "type": "string",
                    "format": "date"
                  },
                  "external_modify_date": {
                    "description": "External modify date",
                    "type": "string",
                    "format": "date"
                  },
                  "external_source": {
                    "description": "External source",
                    "type": "string",
                    "enum": [
                      "file_system",
                      "mobile_device",
                      "scanner",
                      "fax",
                      "ftp",
                      "shared_drive",
                      "removable_disk",
                      "backup_media",
                      "optical_disk",
                      "onedrive",
                      "cloud_storage",
                      "camera",
                      "email_server",
                      "elink",
                      "opentext_core",
                      "edocs",
                      "sap",
                      "document_management",
                      "exchange_mailbox",
                      "notes_mailbox",
                      "outlook_pst",
                      "file_stream",
                      "mailbox_other"
                    ]
                  },
                  "external_identity": {
                    "description": "External identity",
                    "type": "string"
                  },
                  "external_identity_type": {
                    "description": "External identity type",
                    "type": "string",
                    "enum": [
                      "email_address",
                      "domain_userid",
                      "generic_userid",
                      "name",
                      "last_name",
                      "windows_sid",
                      "guid",
                      "phone_number",
                      "ldap_name",
                      "exchange_mailboxid"
                    ]
                  },
                  "image_id": {
                    "description": "Data ID of the image to be displayed in the news item",
                    "type": "integer"
                  },
                  "image_alt_text": {
                    "description": "The alt text for the above image",
                    "type": "string"
                  },
                  "file": {
                    "description": "The file to be added as an attachment",
                    "type": "string",
                    "format": "binary"
                  },
                  "upload_key": {
                    "description": "The key to identify a Large File Upload session.",
                    "type": "string"
                  },
                  "advanced_versioning": {
                    "description": "Allow advanced versioning (standard versioning by default)",
                    "type": "boolean"
                  },
                  "effective_date": {
                    "description": "(Can be time-zone aware) The effective date for this news item (e.g. 2015-10-16T13:00:00)",
                    "type": "string",
                    "format": "date"
                  },
                  "expiration_date": {
                    "description": "(Can be time-zone aware) The expiration date for this news item",
                    "type": "string",
                    "format": "date"
                  },
                  "headline": {
                    "description": "The headline for this news item",
                    "type": "string"
                  },
                  "highlights": {
                    "description": "The highlights for this news item",
                    "type": "string"
                  },
                  "story": {
                    "description": "The story for this news item",
                    "type": "string"
                  },
                  "attachments": {
                    "description": "The data ID of the object to attach to this news item",
                    "type": "integer"
                  },
                  "status": {
                    "description": "The status of the task",
                    "type": "integer"
                  },
                  "due_date": {
                    "description": "(Can be time-zone aware) Due date of the milestone (e.g. 2015-10-16T13:00:00)",
                    "type": "string",
                    "format": "date-time"
                  },
                  "start_date": {
                    "description": "(Can be time-zone aware) Start date of the milestone",
                    "type": "string",
                    "format": "date"
                  },
                  "mission": {
                    "description": "The project mission",
                    "type": "string"
                  },
                  "goals": {
                    "description": "The project goals",
                    "type": "string"
                  },
                  "objectives": {
                    "description": "The project objectives",
                    "type": "string"
                  },
                  "initiatives": {
                    "description": "The project initiatives",
                    "type": "string"
                  },
                  "original_id": {
                    "description": "Node ID",
                    "type": "integer"
                  },
                  "version_number": {
                    "description": "The Version Number of the node to create the generation to",
                    "type": "string"
                  },
                  "assigned_member_id": {
                    "description": "The assigned member ID",
                    "type": "integer"
                  },
                  "priority": {
                    "description": "The priority for the task",
                    "type": "integer"
                  },
                  "milestone_id": {
                    "description": "The milestone for the task group",
                    "type": "integer"
                  },
                  "instructions": {
                    "description": "The instructions for the task",
                    "type": "string"
                  },
                  "attachment_id": {
                    "description": "The data ID for the item to attach to the task",
                    "type": "string"
                  },
                  "complete_date": {
                    "description": "(Can be time-zone aware) Date the milestone was completed",
                    "type": "string",
                    "format": "date"
                  },
                  "url": {
                    "description": "URL",
                    "type": "string"
                  },
                  "location_id": {
                    "description": "Location ID. This value can only be set during create.",
                    "type": "integer"
                  },
                  "selected_facets": {
                    "description": "Facets that make up the virtual folder. Each facet is a 2-element List where the first element is the facet ID (String) and the second element is a List of values (String) for that facet. For example: [['2100',['re09']],['2095',['0','144']]]",
                    "type": "string"
                  },
                  "location_column_visible": {
                    "description": "Show location column",
                    "type": "boolean"
                  },
                  "selected_facets_visible": {
                    "description": "Show selected facets",
                    "type": "boolean"
                  },
                  "selected_location_visible": {
                    "description": "Show selected location",
                    "type": "boolean"
                  },
                  "search_cache_id": {
                    "description": "Search cache ID to be used to create the Search Query or Search Template item.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2ResponseElementPost"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not create a new [node type, e.g. 'Folder']</li><li>Missing required parameter '[parameter name]'</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Subtype {type} not registered</li><li>External source not found</li><li>Error getting identity type id</li><li>Error: File could not be found within the upload directory.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>An item with the name '{name}' already exists.</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}": {
      "get": {
        "operationId": "getNode",
        "summary": "Get a node",
        "description": "Gets info on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "perspective",
            "description": "Determines if the perspective for the node will be included in the response.",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_InfoResult"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not process object, invalid request</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "put": {
        "operationId": "updateNode",
        "summary": "Update a node | Move a node | Change the Versions Control setting for a Folder",
        "description": "Updates a node's info<br>Moves a node<br>Changes the Versions Control setting for a folder.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Update a Folder's name and description:<br><br><code>body : { \"name\":\"New Name\", \"description\":\"New Description\" }</code><br><br>Update a Folder's name and description while passing in a metadata token:<br><br><code>body : { \"name\":\"New Name\", \"description\":\"New Description\", \"metadata_token\":\"f0c0701a58c2cb03a955deb1ab2af306\" }</code><br><br>Move a node to a folder with ID 5678<br><br><code>body : { \"parent_id\":5678 }</code><br><br>Change the Versions Control setting for a folder<br><br><code>body : { \"versions_control_advanced\":true }</code><br><br>Change the Versions Control setting for a folder and apply to its Sub-Items<br><br><code>body : { \"versions_control_advanced\":true, \"apply_to\":2 }</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID.",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The updated description of the node.",
                    "type": "string"
                  },
                  "description_multilingual": {
                    "description": "The multilingual descriptions of the node in key-value pairs (see example below). The parameter 'description' <b>must also</b> be specified in the body parameter, but the value in 'description' will be ignored and the values in 'description_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) descriptions of a node where the preferred language is English (en)<br><code>body : { \"description\":\"newEnglishDescription\", \"description_multilingual\":{\"de\":\"newGermanDescription\",\"en\":\"newEnglishDescription\",\"fr\":\"newFrenchDescription\"} }</code>",
                    "type": "string"
                  },
                  "name": {
                    "description": "The updated name of the node.",
                    "type": "string"
                  },
                  "name_multilingual": {
                    "description": "The multilingual names of the node in key-value pairs (see example below). The parameter 'name' <b>must also</b> be specified in the body parameter, but the value in 'name' will be ignored and the values in 'name_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) names of a node where the preferred language is English (en)<br><code>body : { \"name\":\"newEnglishName\", \"name_multilingual\":{\"de\":\"newGermanName\",\"en\":\"newEnglishName\",\"fr\":\"newFrenchName\"} }</code>",
                    "type": "string"
                  },
                  "versions_control_advanced": {
                    "description": "If set to TRUE then the objects added to the folder will use Advanced Versioning by default. If set to FALSE then the objects added to the folder will use Standard Versioning by default.",
                    "type": "boolean"
                  },
                  "apply_to": {
                    "description": "Apply version control settings to: <ol start=\"0\"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li></ol>",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2
                    ]
                  },
                  "parent_id": {
                    "description": "The updated parent ID of the node.",
                    "type": "integer"
                  },
                  "metadata_token": {
                    "description": "The metadata state token. It is used to resolve edit conflicts where two users are updating the node at the same time.<br><br>NOTE: If this is specified and the call is successful, the most recent metadata token will be returned in the result.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "409": {
            "description": "Could not update metadata (edit conflict)."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "deleteNode",
        "summary": "Delete a node",
        "description": "Deletes the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Could not get node for {id}</li><li>Could not process object, invalid action 'delete'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}": {
      "get": {
        "operationId": "getNode2",
        "summary": "Get a node | Get a virtual folder",
        "description": "Gets information about a node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "actions",
            "description": "Retrieve actions for the node. This is similar to 'commands' for v1 (E.g. actions=delete&actions=open). Note: For best performance minimize the number of actions requested.<br><br>Example to get the delete and open actions<br><code>?actions=delete&actions=open</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "perspective",
            "description": "Determines if the perspective for the node will be included in the response.",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "The 'fields' parameter can be used to filter the results even further, if necessary.<br><br>Show the 'properties' field (which contains node information such as name, description, parent_id, etc.)<br><code>?fields=properties</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively)<br><code>?fields=properties&fields=categories</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively) but only the parent_id and description from 'properties'<br><code>?fields=properties{parent_id,description}&fields=categories</code><br><br>Show the 'versions' field (version information) but only the latest version<br><code>?fields=versions.element(0)</code><br><br>Show the 'permissions' field (node permissions) but only the first 5 permissions (includes Default Access and ACLs)<br><code>?fields=permissions.limit(5)</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields<br><br>Expand the id and parent_id of 'properties' (resolving the id to extra node information, and resolving the parent_id to extra node information about the parent)<br><code>?expand=properties{id,parent_id}</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / metadata_map / metadata_order. This is an empty parameter, thus no value is required (e.g. ?metadata).<br><br>Example to get metadata<br><code>?metadata</code>",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "name": "state",
            "description": "Returns the metadata state token for data (used for edit conflict resolution), which will be returned under results.state. This is an empty parameter, thus no value is required (e.g. ?state).<br><br>Example to get the metadata state token<br><code>?state</code>",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          },
          {
            "name": "reference_id",
            "description": "Reference node ID",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2ResponseElement"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not process object, invalid request</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "put": {
        "operationId": "updateNode2",
        "summary": "Update a node | Move a node | Change the Versions Control setting for a Folder | Reserve/Unreserve a node | Collect/Uncollect a node",
        "description": "Updates a node's info<br>Moves a node<br>Changes the Versions Control setting for a folder<br>Reserves/Unreserves a node<br>Collects/Uncollects a node<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>Update a Folder's name and description:<br><br><code>body : { \"name\":\"New Name\", \"description\":\"New Description\" }</code><br><br>Update a Folder's name and description while passing in a metadata token:<br><br><code>body : { \"name\":\"New Name\", \"description\":\"New Description\", \"metadata_token\":\"f0c0701a58c2cb03a955deb1ab2af306\" }</code><br><br>Move a node to a folder with ID 5678<br><br><code>body : { \"parent_id\":5678 }</code><br><br>Change the Versions Control setting for a folder<br><br><code>body : { \"versions_control_advanced\":true }</code><br><br>Change the Versions Control setting for a folder and apply to its Sub-Items<br><br><code>body : { \"versions_control_advanced\":true, \"apply_to\":2 }</code><br><br>Reserve a document<br><br><code>body : { \"reserved_user_id\":1000 }</code><br><br>Unreserve a document<br><br><code>body : { \"reserved_user_id\":\"null\" }</code><br><br>Collect a node to a Collection with ID 5678<br><br><code>body : { \"collection_id\":5678 }</code><br><br>Uncollect a node from the Collection with ID 5678<br><br><code>body : { \"collection_id\":5678, \"operation\":\"remove\" }</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID.",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "default_template": {
                    "description": "Indicates if this is the user's default search template.",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "The updated description of the node.",
                    "type": "string"
                  },
                  "description_multilingual": {
                    "description": "The multilingual descriptions of the node in key-value pairs (see example below). The parameter 'description' <b>must also</b> be specified in the body parameter, but the value in 'description' will be ignored and the values in 'description_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) descriptions of a node where the preferred language is English (en)<br><code>body : { \"description\":\"newEnglishDescription\", \"description_multilingual\":{\"de\":\"newGermanDescription\",\"en\":\"newEnglishDescription\",\"fr\":\"newFrenchDescription\"} }</code>",
                    "type": "string"
                  },
                  "name": {
                    "description": "The updated name of the node.",
                    "type": "string"
                  },
                  "name_multilingual": {
                    "description": "The multilingual names of the node in key-value pairs (see example below). The parameter 'name' <b>must also</b> be specified in the body parameter, but the value in 'name' will be ignored and the values in 'name_multilingual' will be used.<br><br>Example to update the English (en), German (de) and French (fr) names of a node where the preferred language is English (en)<br><code>body : { \"name\":\"newEnglishName\", \"name_multilingual\":{\"de\":\"newGermanName\",\"en\":\"newEnglishName\",\"fr\":\"newFrenchName\"} }</code>",
                    "type": "string"
                  },
                  "versions_control_advanced": {
                    "description": "If set to TRUE then the objects added to the folder will use Advanced Versioning by default. If set to FALSE then the objects added to the folder will use Standard Versioning by default.",
                    "type": "boolean"
                  },
                  "apply_to": {
                    "description": "apply version control settings to, 0 - This Item, 1-Sub Items, 2- This Item and Sub Items",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2
                    ]
                  },
                  "reserved_user_id": {
                    "description": "The id of the user the node is being reserved to (null to unreserve)",
                    "type": "integer"
                  },
                  "parent_id": {
                    "description": "The updated parent ID of the node.",
                    "type": "integer"
                  },
                  "collection_id": {
                    "description": "ID of Collection node",
                    "type": "integer"
                  },
                  "operation": {
                    "description": "Keyword remove will remove item from collection",
                    "type": "string"
                  },
                  "metadata_token": {
                    "description": "The metadata state token (for edit conflict resolution). <br><br>NOTE: if this is specified and the call is successful, the most recent metadata token will be returned in the result.",
                    "type": "string"
                  },
                  "search_cache_id": {
                    "description": "Search cache ID to be used to update the Search Query or Search Template item.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2Empty"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Invalid datatype specified for argument \"id\".</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "409": {
            "description": "Could not update metadata (edit conflict)."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "deleteNode2",
        "summary": "Delete a node",
        "description": "Deletes the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2Empty"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not get node for {id}</li><li>Could not process object, invalid action 'delete'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/actions": {
      "get": {
        "operationId": "getActions",
        "summary": "Get actions",
        "description": "Gets available actions on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_ActionsInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/addablenodetypes": {
      "get": {
        "operationId": "getAddableTypesInfo",
        "summary": "Get info on addable node types",
        "description": "Gets info on the types of child nodes which can be added to this node, if the node is a container (ie. a Folder). The info will be returned as a set of (relative) REST API links which can be used to retrieve forms detailing how to create the desired node within the node container.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_AddableTypesInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/ancestors": {
      "get": {
        "operationId": "getAncestors",
        "summary": "Get ancestors",
        "description": "Gets the ancestors of the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_AncestorsInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/audit": {
      "get": {
        "operationId": "getAudit",
        "summary": "Get audit",
        "description": "Gets node audit info.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Sort order of audit results. Format can be sort=desc_audit_date or sort=asc_audit_date. Results are sorted in descending order by default.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_AuditInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid action 'audit-list'</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/audit": {
      "get": {
        "operationId": "getAudit2",
        "summary": "Get audit",
        "description": "Gets node audit info.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / metadata_map / metadata_order. This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Sort order of audit results. Format can be sort=desc_audit_date or sort=asc_audit_date. Results are sorted in descending order by default.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "where_type",
            "description": "Filter by the event type.",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "where_audit_date_start",
            "description": "Filter events so that the results occurred after the supplied date. Can be used with where_audit_date_end.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query"
          },
          {
            "name": "where_audit_date_end",
            "description": "Filter events so that the results occurred before the supplied date. Can be used with where_audit_date_start.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query"
          },
          {
            "name": "where_user_id",
            "description": "Filter by User ID.",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_AuditResult2"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid action 'audit-list'</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/columns": {
      "get": {
        "operationId": "getColumns",
        "summary": "Get columns",
        "description": "Gets the columns for the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_ColumnsInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Browse action is not supported for this type</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/collection": {
      "put": {
        "operationId": "updateCollection",
        "summary": "Update collection",
        "description": "Add or Remove items from a collection.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID of a collection node",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "description": "The id(s) of the nodes to add to the collection. This parameter can be specified multiple times up to a limit of 30 node IDs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "operation": {
                    "description": "Specify 'add' or 'remove' to update items in the collection.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_v2ResponseUpdateCollection"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument \"id\".</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/content": {
      "get": {
        "operationId": "getContent",
        "summary": "Get content",
        "description": "Downloads the content (latest published version) on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "action",
            "description": "Change the MIME type to 'application/octet-stream' by specifying 'download'. Ignoring this parameter or specifying 'open' will preserve the MIME type.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not locate node: {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/content/{filename}": {
      "get": {
        "operationId": "getContent2",
        "summary": "Get content with a specified filename",
        "description": "Downloads the content (latest published version) for the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "filename",
            "description": "Name to give downloaded file",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "action",
            "description": "Change the MIME type to 'application/octet-stream' by specifying 'download'. Ignoring this parameter or specifying 'open' will preserve the MIME type.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not locate node: {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/content": {
      "get": {
        "operationId": "getContent3",
        "summary": "Get content",
        "description": "Downloads the content (latest published version) on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/content/{filename}": {
      "get": {
        "operationId": "getContent4",
        "summary": "Get content with a specified filename",
        "description": "Downloads the content (latest published version) for the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "filename",
            "description": "Name to give downloaded file",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/doctemplates": {
      "get": {
        "operationId": "getDocTemplates",
        "summary": "List the templates",
        "description": "Fetches the list of templates to create an item/instance in the specified folder.",
        "parameters": [
          {
            "name": "id",
            "description": "Folder ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "subtypes",
            "description": "The subtypes list, where the templates of these subtypes are to be showcased in add item menu, e.g. {0}",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "sidepanel_subtypes",
            "description": "The subtypes list, where the templates of these subtypes are to be showcased in side panel, e.g. {144}",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "group_by",
            "description": "grouped by classification e.g. group_by=classification ( only works with side-panel subtype templates )",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "recent_templates",
            "description": "Recently used templates required or not. (Default false) e.g. recent_templates=true ( only works with side-panel subtype templates )",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "recent_history_days",
            "description": "Recently used templates prior to no of days. (Default 180) e.g. recent_history_days=180 ( only works with side-panel subtype templates )",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "recent_templates_limit",
            "description": "Limit the recently used templates fetching. (Default 4) e.g. recent_templates_limit=4 ( only works with side-panel subtype templates )",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_DoctemplatesInfo"
                }
              }
            }
          },
          "401": {
            "description": "Authentication is required."
          },
          "404": {
            "description": "Could not get the templates for the specified folder."
          },
          "500": {
            "description": "<ul><li>Could not get the templates for the specified folder</li><li>Parameter validation failed. group_by</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/facets": {
      "get": {
        "operationId": "getFacetss",
        "summary": "Get facets",
        "description": "Gets facets for the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          },
          {
            "name": "where_facet",
            "description": "Specify selected facets using the following template '{facet id}:{value1}|{value2}|...'  e.g. where_facet=2100:23|9|17|20&where_facet=2101:331",
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_FacetsInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/nodes": {
      "get": {
        "operationId": "getSubnodes",
        "summary": "Get subnodes",
        "description": "Browses the node, returning info on its child nodes.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "where_type",
            "description": "Filter on node type. <br> Use -1 to get all containers. <br> Use -2 to get all searchable objects. <br> Use -3 to get all non-containers.",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filter on node name",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_facet",
            "description": "Filter on facet values. There will be one instance of this parameter for each facet selected. The values are combined using | character. E.g. where_facet=2095:144|0|-1 (note that -1 is a special value that denotes containers).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "commands",
            "description": "Retrieve commands for nodes. There will be multiple instances of this parameter for each command requested. E.g. commands=delete&commands=default.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column. Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "show_hidden",
            "description": "Show hidden objects (default False)",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "extra",
            "description": "Return additional data for each item (default True). Disabling this will improve performance.",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_BrowseResult"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'element_id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not process object, invalid action 'browse'</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/nodes": {
      "get": {
        "operationId": "getSubnodes2",
        "summary": "Get subnodes",
        "description": "Browses the node, returning info on its child nodes.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "where_type",
            "description": "Filter on node type. <ul><li>-1 : get all containers</li><li>-2 : get all searchable objects</li><li>-3 : get all non-containers</li></ul>Example to get all non-containers<br><code>?where_type=-3</code>",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filter on node name<br><br>Example to filter on 'abc' name<br><code>?where_name=abc</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_facet",
            "description": "Filter on facet values. Can be specified multiple times in the query string using the '&' separator (?where_facet=....&where_facet=...)<br><br>Example to apply the Content Type facet with ID 2095, for documents (144), folders (0) and all containers (-1)<br><code>?where_facet=2095:144|0|-1</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_status",
            "description": "Filter on status of the node.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "actions",
            "description": "Retrieve actions for the node. This is similar to 'commands' for v1 (E.g. actions=delete&actions=open). Note: For best performance minimize the number of actions requested.<br><br>Example to get the delete and open actions<br><code>?actions=delete&actions=open</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column. Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.<br><br>Example to sort by name (ascending by default)<br><code>?sort=name</code><br><br>Sort by name descending<br><code>?sort=desc_name</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number<br><br>Example to get page 2<br><code>?page=2</code>",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size<br><br>Example to get a page size of 5 results<br><code>?limit=5</code>",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "show_hidden",
            "description": "Show hidden objects (default False)<br><br>Example to show hidden objects<br><code>?show_hidden=true</code>",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "The 'fields' parameter can be used to filter the results even further, if necessary.<br><br>Show the 'properties' field (which contains node information such as name, description, parent_id, etc.)<br><code>?fields=properties</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively)<br><code>?fields=properties&fields=categories</code><br><br>Show the 'properties' and 'categories' fields (node and category information, respectively) but only the parent_id and description from 'properties'<br><code>?fields=properties{parent_id,description}&fields=categories</code><br><br>Show the 'versions' field (version information) but only the latest version<br><code>?fields=versions.element(0)</code><br><br>Show the 'permissions' field (node permissions) but only the first 5 permissions (includes Default Access and ACLs)<br><code>?fields=permissions.limit(5)</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields<br><br>Expand the id and parent_id of 'properties' (resolving the id to extra node information, and resolving the parent_id to extra node information about the parent)<br><code>?expand=properties{id,parent_id}</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / metadata_map / metadata_order. This is an empty parameter, thus no value is required (e.g. ?metadata).<br><br>Example to get metadata<br><code>?metadata</code>",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "name": "state",
            "description": "Returns the metadata state token for data (used for edit conflict resolution), which will be returned under results.state. This is an empty parameter, thus no value is required (e.g. ?state).<br><br>Example to get the metadata state token<br><code>?state</code>",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_BrowseResult2"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'element_id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not process object, invalid action 'browse'</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/nodes/all": {
      "get": {
        "operationId": "getAllSubnodes",
        "summary": "Get all subnodes",
        "description": "Returns information on all the children of the node*.<br><br> * Only Compound Documents are currently supported",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "sort",
            "description": "Order by named column. Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.<br><br>Example to sort by order (ascending by default)<br><code>?sort=order</code><br><br>Sort by order descending<br><code>?sort=desc_order</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "The 'fields' parameter can be used to filter the results even further, if necessary.<br><br>Show the 'properties' field (which contains node information such as name, description, order, mime_type etc.)<br><code>?fields=properties</code><br><br>Show the 'properties' field but only include the id, name, mime_type, and order<br><code>?fields=properties{id, name, mime_type, order}</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / properties. This is an empty parameter, thus no value is required (e.g. ?metadata).<br><br>Example to get metadata<br><code>?metadata</code>",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_ListContents"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get a node for {id}</li><li>List Contents action is not supported for this object type.</li><li>Invalid column name ({sort}) specified for sorting</li><li>The 'sort' parameter contains invalid value(s) '{sort}'</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/order": {
      "put": {
        "operationId": "reorganizeNodes",
        "summary": "Reorganize nodes",
        "description": "Reorganizes the children of the node*.<br><br> * Only Compound Documents are currently supported",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID.",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "order"
                ],
                "properties": {
                  "order": {
                    "description": "The order array consists of objects with ID and order properties.<br><br>Example to set subnode with ID 3215 as Master document and subnode with ID 3216 with order 2:<br><code>body : { \"order\": [ { \"id\": 3215, \"order\": 0 }, { \"id\": 3216, \"order\": 2 } ] }</code>",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Subnode ID",
                          "type": "integer"
                        },
                        "order": {
                          "description": "The order to reorganize subnode (order 0 = Master Document)",
                          "type": "integer"
                        }
                      }
                    }
                  },
                  "compact": {
                    "description": "Sets if subnodes have to be renumbered sequentially (defaults to false).<br><br>Example to maintain relative order but renumber sequentially:<br><code>body: { \"order\": [], \"compact\": true }</code>",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2Empty"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Invalid datatype specified for argument 'id'.</li><li>Reorganize action is not supported for this object type.</li><li>Invalid datatype specified for argument \"order\".</li><li>Argument \"order\" is required.</li><li>The 'order' parameter contains invalid value(s) '{order array object}'</li><li>Compound Document Reorganize failed. Duplicate values found.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/properties": {
      "get": {
        "operationId": "getNodeProperties",
        "summary": "Get node properties",
        "description": "Gets basic information about the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data, which will be returned under results.metadata / metadata_map / metadata_order. This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "name": "state",
            "description": "Returns the metadata state token for data (used for edit conflict resolution), which will be returned under results.state. This is an empty parameter, thus no value is required (e.g. ?state).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2ResponseElement"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not get a node for {id}</li><li>Could not process object, invalid request</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/releases": {
      "get": {
        "operationId": "listReleases",
        "summary": "List releases and revisions",
        "description": "List all releases and revisions of the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_BrowseReleasesResult2"
                }
              }
            }
          },
          "400": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "post": {
        "operationId": "CreateRelease",
        "summary": "Create release",
        "description": "Creates a release for the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the release",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2ResponseElementPost"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>An item with the name '{name}' already exists.</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Missing required parameter 'Name'"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/revisions": {
      "post": {
        "operationId": "CreateRevision",
        "summary": "Create revision",
        "description": "Creates a revision for the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name of the revision",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2ResponseElementPost"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>An item with the name '{name}' already exists.</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Missing required parameter 'Name'"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/systemattributes": {
      "put": {
        "operationId": "updatesystemattributes",
        "summary": "Update System Attributes",
        "description": "Update System Attributes of a given node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "{attribute_key}": {
                    "description": "Value of the attribute",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2ResponseElementSystemAttributesPost"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not set feature {attribute name}, value cannot be undefined</li><li>Could not set feature {attribute name}, invalid value '{attribute value}'</li><li>Could not set feature {attribute name}, value must be a {data type}</li><li>Could not set feature {attribute name}, the length of '{attribute value}' is greater than the maximum length ({maximum length})</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/thumbnails": {
      "get": {
        "operationId": "thumbnailInfo",
        "summary": "Get thumbnail info",
        "description": "Gets thumbnails for the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number of the node",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_ThumbnailInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "<ul><li>Could not get version {version_number} for node {id}</li><li>Thumbnail is not available</li><li>Thumbnail is not available in Content Server 10</li></ul>"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/thumbnails/{size}": {
      "get": {
        "operationId": "thumbnailInfoBySize",
        "summary": "Get thumbnail info according to size",
        "description": "Gets thumbnails in the specified size for the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "size",
            "description": "The size of the requested thumbnail (small, medium or large)",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number of the node",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_ThumbnailInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "<ul><li>Could not get version {version_number} for node {id}</li><li>Could not get the thumbnail for {size}</li><li>Thumbnail is not available</li><li>Thumbnail is not available in Content Server 10</li></ul>"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v1/nodes/{id}/thumbnails/{size}/content": {
      "get": {
        "operationId": "thumbnailContentBySize",
        "summary": "Get thumbnail content according to size",
        "description": "Gets thumbnail content for the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "size",
            "description": "The size of the requested thumbnail (small, medium or large)",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number of the node",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "<ul><li>Could not get version {version_number} for node {id}</li><li>Could not get the thumbnail for {size}</li><li>Thumbnail is not available</li><li>Thumbnail is not available in Content Server 10</li></ul>"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/actions": {
      "get": {
        "operationId": "getNodeActions",
        "summary": "Get actions",
        "description": "Gets the actions for the specified node IDs (up to 100 items) that the current user is able to perform. To get more than 100 items, use the POST api/v2/nodes/actions call below.",
        "parameters": [
          {
            "name": "ids",
            "description": "One or more node IDs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true,
            "in": "query"
          },
          {
            "name": "actions",
            "description": "Retrieve actions for the node. If not specified, all actions that the current user can perform will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query"
          },
          {
            "name": "reference_id",
            "description": "The reference ID associated with the given node IDs (ex. The Recycle Bin's ID, a Collection's ID, a Shortcut's ID, etc).",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2ResponseNodesActions"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The parameter 'ids' is not specified.</li><li>Invalid datatype specified for argument 'ids'.</li><li>Too many items specified for parameter 'ids'.</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "post": {
        "operationId": "getNodeActions2",
        "summary": "Get actions",
        "description": "Gets the actions for the specified node IDs (unlimited items) that the current user is able to perform. The parameters can be packaged into a single body parameter. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> at the top for details.<br><br>Get the actions for delete and copy for the nodes with IDs 5348 and 5569<br><code>body : { \"ids\":[5348,5569], \"actions\":[\"delete\",\"copy\"] }",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "description": "One or more node IDs.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "actions": {
                    "description": "(Optional) Retrieve actions for the node. If not specified, all actions that the current user can perform will be returned.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "reference_id": {
                    "description": "(Optional) The reference ID associated with the given node IDs (ex. The Recycle Bin's ID, a Collection's ID, a Shortcut's ID, etc).",
                    "type": "integer"
                  },
                  "suppress_response_codes": {
                    "$ref": "#/components/schemas/suppress_response_codes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2ResponseNodesActions"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The parameter 'ids' is not specified.</li><li>Invalid datatype specified for argument 'ids'.</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/unpack": {
      "post": {
        "operationId": "UnpackTransportPackage",
        "summary": "Unpack transport package",
        "description": "Unpacks a transport package.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "workbench_id": {
                    "description": "ID of the workbench",
                    "type": "string"
                  },
                  "duplicate_handling": {
                    "description": "By default, duplicate handling is set to 'skip'.  This can be changed to 'replace'.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2Empty"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Missing required parameter 'Workbench ID'</li><li>Invalid workbench ID.</li><li>Could not process object, invalid action 'unpack'</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/deploy": {
      "post": {
        "operationId": "DeployWorkbench",
        "summary": "Deploy workbench",
        "description": "Deploys a workbench.  If there are missing dependencies, the workbench cannot be deployed.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "update_permissions": {
                    "description": "By default, permissions will not be updated when the deployment is an update or add version operation (when possible).  This can be changed to true.",
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2Empty"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not deploy workbench, missing dependencies.</li><li>Could not process object, invalid action 'deploy'</li></ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/nodes/{id}/view/html": {
      "get": {
        "operationId": "viewHtmlNodes",
        "summary": "View the content of a node as HTML.",
        "description": "View the HTML rendering of a node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "text/html": {
                "example": "<html> <head> <title>{node_name}</title> </head> <body> {node_content} </body> </html>"
              }
            }
          },
          "403": {
            "description": "<ul> <li>You do not have permission to view this document.</li> </ul>"
          },
          "404": {
            "description": "<ul> <li>Node must be a document node.</li> <li>Could not find the original item.</li> <li>Error retrieving the specified version.</li> </ul>"
          },
          "500": {
            "description": "<ul> <li>The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li> <li>Node must be a document node.</li> </ul>"
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/v2/notifications/interests/nodes/{id}": {
      "get": {
        "operationId": "notification_interests_node",
        "summary": "Get the notification interests on a node",
        "description": "Get the notification interest settings for a particular node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications_notification_interests_node"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "put": {
        "operationId": "set_notification_interests_node",
        "summary": "Set the notification interests on a node",
        "description": "Set the notification interest settings for a particular node. Any interests not specified will have their report value set to 0.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "A JSON object in string format specifying a list of objects that contain the following: 'id' (integer) and 'report' (integer).  Example: {\"interests\":[ { \"id\": 3, \"report\": 1 },{ \"id\": 13, \"report\": 2 }, { \"id\": 4, \"report\": 0 }] }"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notifications_set_notification_interests_node"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/v2/nodes/{id}/permissions": {
      "get": {
        "operationId": "getNodePermissions",
        "summary": "Get all node permissions",
        "description": "Gets all of the permissions on the node (Default Access and any Assigned Access). The results can be paginated if the request specifies parameters 'page' and 'limit' (e.g. ?page=2&limit=5).",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2ResponsePermissions"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>Could not set parameter {parameter name}, the value {parameter value} is less than/greater than the minimum/maximum value ({mininum/maximum value})</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/v2/nodes/{id}/permissions/owner": {
      "get": {
        "operationId": "getNodePermissionOwner",
        "summary": "Get owner permissions",
        "description": "Get owner permissions",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2ResponsePermission"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "put": {
        "operationId": "updateNodePermissionOwner",
        "summary": "Update or Restore the owner permissions",
        "description": "Update or Restore the owner permissions.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions to 'see' and 'see contents':<br><code>body = {\"permissions\":[\"see\",\"see_contents\"]}</code><br><br>Restore permissions for the user 15234, with 'see' and 'see contents' permissions:<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"right_id\":15234}</code><br><br>Change the owner to the user 15234 and set their permissions to none (NOTE: this is not the same as removing owner permissions):<br><code>body = {\"permissions\":[],\"right_id\":15234}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"apply_to\":0}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"apply_to\":2,\"include_sub_types\":[204,207]}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "description": "The permissions (see the examples above)<br><br>The allowable values are<ul><li>\"see\"</li><li>\"see_contents\"</li><li>\"modify\"</li><li>\"edit_attributes\"</li><li>\"add_items\"</li><li>\"reserve\"</li><li>\"add_major_version\"</li><li>\"delete_versions\"</li><li>\"delete\"</li><li>\"edit_permissions\"</li></ul>",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "see",
                        "see_contents",
                        "modify",
                        "edit_attributes",
                        "add_items",
                        "reserve",
                        "add_major_version",
                        "delete_versions",
                        "delete",
                        "edit_permissions"
                      ]
                    }
                  },
                  "right_id": {
                    "description": "The ID of the node's owner (see the examples above)",
                    "type": "integer"
                  },
                  "apply_to": {
                    "description": "Apply permissions to:<ol start=\"0\"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "include_sub_types": {
                    "description": "Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "The body JSON parameter. This is a key-value pair specified in the form, and it is used to pass in structured parameters. Specify 'body' as the key, and the JSON string (without any outer quotes) as the value (see the examples above)."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Could not process object, invalid request</li><li>Insufficient permissions to perform that action</li></ul>"
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/v2/nodes/{id}/permissions/group": {
      "get": {
        "operationId": "getNodePermissionGroup",
        "summary": "Get owner group permissions",
        "description": "Get owner group permissions",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2ResponsePermission"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "put": {
        "operationId": "updateNodePermissionGroup",
        "summary": "Update or Restore the owner group permissions",
        "description": "Update or Restore the owner group permissions.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions to 'see' and 'see contents':<br><code>body = {\"permissions\":[\"see\",\"see_contents\"]}</code><br><br>Restore permissions for the owner group 12111, with 'see' and 'see contents' permissions:<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"right_id\":12111}</code><br><br>Change the owner group to 12111 and set its permissions to none (NOTE: this is not the same as removing owner group permissions):<br><code>body = {\"permissions\":[],\"right_id\":12111}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"apply_to\":0}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"apply_to\":2,\"include_sub_types\":[204,207]}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "description": "The permissions (see the examples above)<br><br>The allowable values are<ul><li>\"see\"</li><li>\"see_contents\"</li><li>\"modify\"</li><li>\"edit_attributes\"</li><li>\"add_items\"</li><li>\"reserve\"</li><li>\"add_major_version\"</li><li>\"delete_versions\"</li><li>\"delete\"</li><li>\"edit_permissions\"</li></ul>",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "see",
                        "see_contents",
                        "modify",
                        "edit_attributes",
                        "add_items",
                        "reserve",
                        "add_major_version",
                        "delete_versions",
                        "delete",
                        "edit_permissions"
                      ]
                    }
                  },
                  "right_id": {
                    "description": "The ID of the node's owner group (see the examples above)",
                    "type": "integer"
                  },
                  "apply_to": {
                    "description": "Apply permissions to:<ol start=\"0\"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "include_sub_types": {
                    "description": "Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "The body JSON parameter. This is a key-value pair specified in the form, and it is used to pass in structured parameters. Specify 'body' as the key, and the JSON string (without any outer quotes) as the value (see the examples above)."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Could not process object, invalid request</li><li>Insufficient permissions to perform that action</li></ul>"
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/v2/nodes/{id}/permissions/public": {
      "get": {
        "operationId": "getNodePermissionPublic",
        "summary": "Get public access permissions",
        "description": "Get public access permissions",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2ResponsePermission"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "put": {
        "operationId": "updateNodePermissionPublic",
        "summary": "Update the public access permissions",
        "description": "Update the public access permissions.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions to 'see' and 'see contents':<br><code>body = {\"permissions\":[\"see\",\"see_contents\"]}</code><br><br>Set public access permissions to none (NOTE: this is not the same as removing public access permissions):<br><code>body = {\"permissions\":[]}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"apply_to\":0}</code><br><br>Update a Folder's permissions to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"apply_to\":2,\"include_sub_types\":[204,207]}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "description": "The permissions (see the examples above)<br><br>The allowable values are<ul><li>\"see\"</li><li>\"see_contents\"</li><li>\"modify\"</li><li>\"edit_attributes\"</li><li>\"add_items\"</li><li>\"reserve\"</li><li>\"add_major_version\"</li><li>\"delete_versions\"</li><li>\"delete\"</li><li>\"edit_permissions\"</li></ul>",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "see",
                        "see_contents",
                        "modify",
                        "edit_attributes",
                        "add_items",
                        "reserve",
                        "add_major_version",
                        "delete_versions",
                        "delete",
                        "edit_permissions"
                      ]
                    }
                  },
                  "apply_to": {
                    "description": "Apply permissions to:<ol start=\"0\"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "include_sub_types": {
                    "description": "Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "The body JSON parameter. This is a key-value pair specified in the form, and it is used to pass in structured parameters. Specify 'body' as the key, and the JSON string (without any outer quotes) as the value (see the examples above)."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Could not process object, invalid request</li><li>Insufficient permissions to perform that action</li></ul>"
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/v2/nodes/{id}/permissions/custom": {
      "post": {
        "operationId": "addNodePermissions",
        "summary": "Add an Assigned Access permission",
        "description": "Add an Assigned Access permission on the node.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Add permissions for the user/group 15234, with 'see' and 'see contents' permissions:<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"right_id\":15234}</code><br><br>Add permissions for the user/group 15234, with 'see' and 'see contents' permissions and apply to 'This Item':<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"right_id\":15234,\"apply_to\":0}</code><br><br>Add permissions for the user/group 15234, with 'see' and 'see contents' permissions and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"right_id\":15234,\"apply_to\":2,\"include_sub_types\":[204,207]}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "description": "The permissions (see the examples above)<br><br>The allowable values are<ul><li>\"see\"</li><li>\"see_contents\"</li><li>\"modify\"</li><li>\"edit_attributes\"</li><li>\"add_items\"</li><li>\"reserve\"</li><li>\"add_major_version\"</li><li>\"delete_versions\"</li><li>\"delete\"</li><li>\"edit_permissions\"</li></ul>",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "see",
                        "see_contents",
                        "modify",
                        "edit_attributes",
                        "add_items",
                        "reserve",
                        "add_major_version",
                        "delete_versions",
                        "delete",
                        "edit_permissions"
                      ]
                    }
                  },
                  "right_id": {
                    "description": "The ID of the user/group (see the examples above)",
                    "type": "integer"
                  },
                  "apply_to": {
                    "description": "Apply permissions to:<ol start=\"0\"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "include_sub_types": {
                    "description": "Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "The body JSON parameter. This is a key-value pair specified in the form, and it is used to pass in structured parameters. Specify 'body' as the key, and the JSON string (without any outer quotes) as the value (see the examples above)."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2ResponsePermission"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "permissions"
        ]
      },
      "put": {
        "operationId": "updateNodePermissionCustom",
        "summary": "Update an Assigned Access permission for the specified user/group",
        "description": "Update an Assigned Access permission for the specified user/group.<br><br>NOTE: This can only be done using the 'body' parameter (see the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a>).</b><br><br>Examples:<br><br>Update permissions for the user/group to 'see' and 'see contents' permissions:<br><code>body = {\"permissions\":[\"see\",\"see_contents\"]}</code><br><br>Update permissions for the user/group to no permissions (NOTE: this is not the same as deleting the user/group's permissions from the Assigned Access):<br><code>body = {\"permissions\":[]}</code><br><br>Update the user/group's permissions on a Folder to 'see' and 'see contents' and apply to 'This Item':<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"apply_to\":0}</code><br><br>Update the user/group's permissions on a Folder to 'see' and 'see contents' and apply to 'This Item and Sub-Items' where the Sub-Items are Task List and Channel:<br><code>body = {\"permissions\":[\"see\",\"see_contents\"],\"apply_to\":2,\"include_sub_types\":[204,207]}</code>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "permissions": {
                    "description": "The permissions (see the examples above)<br><br>The allowable values are<ul><li>\"see\"</li><li>\"see_contents\"</li><li>\"modify\"</li><li>\"edit_attributes\"</li><li>\"add_items\"</li><li>\"reserve\"</li><li>\"add_major_version\"</li><li>\"delete_versions\"</li><li>\"delete\"</li><li>\"edit_permissions\"</li></ul>",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "see",
                        "see_contents",
                        "modify",
                        "edit_attributes",
                        "add_items",
                        "reserve",
                        "add_major_version",
                        "delete_versions",
                        "delete",
                        "edit_permissions"
                      ]
                    }
                  },
                  "apply_to": {
                    "description": "Apply permissions to:<ol start=\"0\"><li>This Item</li><li>Sub-Items</li><li>This Item and Sub-Items</li><li>This Item And Immediate Sub-Items</li></ol>(see the examples above)<br><br>NOTE: The default value is 0. Specifying a value of anything other than 0 for a non container (ex. a Document) will result in an error message.",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "include_sub_types": {
                    "description": "Special node types to be included when 'apply_to' is used (see the examples above). NOTE: These nodes have a simplified permission model of None, Read, Write, Administer.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "The body JSON parameter. This is a key-value pair specified in the form, and it is used to pass in structured parameters. Specify 'body' as the key, and the JSON string (without any outer quotes) as the value (see the examples above)."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li><li>Insufficient permissions to perform that action</li></ul>"
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/v2/nodes/{id}/permissions/effective/{right_id}": {
      "get": {
        "operationId": "getNodePermissionEffective",
        "summary": "Get the effective permissions for the specified user/group",
        "description": "Get the effective permissions for the specified user/group on the node.<br><br>The effective permissions are an aggregation of the user's permissions on the node, as well as the permissions of any of the user's groups that have permissions on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "right_id",
            "description": "The ID of the user/group",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/permissions_V2ResponsePermission"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Invalid datatype specified for argument 'id'</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "permissions"
        ]
      }
    },
    "/v2/perspectives/{perspective_id}/personalization": {
      "post": {
        "operationId": "postPerspectivesPersonalization",
        "summary": "Personalize particular perspective for specific user",
        "description": "Personalize particular perspective for specific user",
        "parameters": [
          {
            "name": "perspective_id",
            "description": "The perspective id of the container for which personalization should be done",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "perspective_version": {
                    "description": "The perspective version of the perspective",
                    "type": "integer"
                  },
                  "personalizations": {
                    "description": "The personalize Data of the perspective",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "{personalizations} malformed Json"
          },
          "500": {
            "description": "{personalizations} Unable to save: system error"
          }
        },
        "tags": [
          "perspectives"
        ]
      }
    },
    "/v1/ping": {
      "get": {
        "operationId": "rest_api",
        "summary": "Get CS and REST API Info",
        "description": "Provides basic information about Content Server and the REST API.  This call does not require authentication.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ping_rest_api"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          }
        },
        "tags": [
          "ping"
        ]
      }
    },
    "/v2/processes/{process_id}/subprocesses/{subprocess_id}/tasks/{task_id}": {
      "put": {
        "operationId": "sendProcess",
        "summary": "Sends on a process",
        "description": "Sends on a process based on the provided action / custom_action. The provided comment is added to the current task.",
        "parameters": [
          {
            "name": "process_id",
            "description": "Workflow ID.",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "subprocess_id",
            "description": "Sub workflow ID.",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "task_id",
            "description": "Workflow task ID.",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "description": "Standard action to be executed. This parameter must not be send with the custom_action parameter.",
                    "type": "string"
                  },
                  "custom_action": {
                    "description": "Custom action (disposition) to be executed. This parameter must not be sent with the action parameter.",
                    "type": "string"
                  },
                  "comment": {
                    "description": "Comment which should be set for the action.",
                    "type": "string"
                  },
                  "authentication_info": {
                    "description": "The data required to create a perspective",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>It is not allowed to execute an action and a custom action</li><li>Invalid username/password specified. This response contains additionally the parameter 'errorDetail' with the value '662306821'.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "processes"
        ]
      }
    },
    "/v2/processes/{process_id}/subprocesses/{subprocess_id}/activities": {
      "get": {
        "operationId": "WorkflowActivities",
        "summary": "Reads workflow activities",
        "description": "Reads all available workflow activities based on the provided ids",
        "parameters": [
          {
            "name": "process_id",
            "description": "Workflow ID to read activities from",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "subprocess_id",
            "description": "Sub workflow ID to read activities from",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "client",
            "description": "client  parameter is used to recognize from where the rest api is triggered, for mobile client = 1",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "limit parameter represents, the number of activities to be fetched from the available activities",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/processes_WorkflowActivitiesResults"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "processes"
        ]
      }
    },
    "/v2/processes/{map_id}/definition": {
      "get": {
        "operationId": "WorkflowDefinition",
        "summary": "Loads the workflow map definition",
        "description": "Loads the workflow map definition",
        "parameters": [
          {
            "name": "map_id",
            "description": "Workflow map ID to load",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/processes_WorkflowDefinitionInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Error getting node from ID</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "processes"
        ]
      }
    },
    "/v2/processes": {
      "post": {
        "operationId": "initiate",
        "summary": "Initiates a workflow",
        "description": "Initiates a workflow.<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following examples will provide Json Input format:<br><br><code>{\"definition\":{\"workflow_id\":30568,\"role_info\": {\"Role1\": 1000, \"Role2\": 1000}}}</code><br><br>",
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "The body JSON parameter. This is a key-value pair specified in the form, and it is used to pass in structured parameters. Specify 'body' as the key, and the JSON string (without any outer quotes) as the value (see the examples above)."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/processes_ProcessInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Error getting node from ID</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "processes"
        ]
      }
    },
    "/v2/processes/{process_id}/status": {
      "put": {
        "operationId": "changeStatus",
        "summary": "Changes the process status",
        "description": "Changes the process status",
        "parameters": [
          {
            "name": "process_id",
            "description": "Process ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "description": "New process status. Possible values depending on the current state are suspend, resume, stop, archive.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>No permission to change the status of the process</li><li>Could not access task status</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "processes"
        ]
      }
    },
    "/v2/processes/{process_id}": {
      "delete": {
        "operationId": "deleteProcess",
        "summary": "Deletes the process",
        "description": "Deletes the process",
        "parameters": [
          {
            "name": "process_id",
            "description": "Process ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not access task status</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "processes"
        ]
      }
    },
    "/v2/workflows/status/processes/{process_id}": {
      "get": {
        "operationId": "getProcesses",
        "summary": "Task List for a Workflow Instance",
        "description": "Gets the Tasks list of workflow categorized by Completed, In Progress and Next",
        "parameters": [
          {
            "name": "process_id",
            "description": "Process ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow_Process_TaskListInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not access task status</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "processes"
        ]
      }
    },
    "/v2/workflows/status": {
      "get": {
        "operationId": "getWorkflowStatus",
        "summary": "Workflows by status",
        "description": "Get workflows based on WF status, Kind, sort order, and completion dates",
        "parameters": [
          {
            "name": "wfretention",
            "description": "Filter on Workflow Completion Date",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "Kind",
            "description": "Filter Workflows based on kind, See valid values for more details",
            "schema": {
              "type": "string",
              "enum": [
                "Managed",
                "Initiated",
                "Both"
              ]
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Sort based on Key and Order",
            "schema": {
              "type": "string",
              "enum": [
                "status_key asc",
                "status_key desc",
                "due_date asc",
                "due_date desc",
                "wf_name asc",
                "wf_name desc",
                "date_initiated asc",
                "date_initiated desc"
              ]
            },
            "in": "query"
          },
          {
            "name": "wstatus",
            "description": "Retrive Workflows based on the status passed",
            "schema": {
              "type": "string",
              "enum": [
                "workflowlate",
                "ontime",
                "completed",
                "stopped"
              ]
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow_StatusListInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not access task status</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "processes"
        ]
      }
    },
    "/v2/reservemanagement/nodes/{id}": {
      "get": {
        "operationId": "GetRequestStatus",
        "summary": "Get the reservation request status",
        "description": "Get the information of the given node including currently reserved user, when the node was reserved and how many users has requested for reservation",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_GetRequestStatus"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Could not get the set of users that are part of the reserve queue.</li><li>This node is not reserved.</li><li>This node type does not support reserve management.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "reservemanagement"
        ]
      },
      "post": {
        "operationId": "AddRequestReservation",
        "summary": "Request for the reservation",
        "description": "Add the current user into the reservation request queue of the given node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li> This node is not reserved.</li><li>Unable to request reservation, reservation request already exists.</li><li>This node type does not support reserve management.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "reservemanagement"
        ]
      },
      "delete": {
        "operationId": "DeleteRequestReservation",
        "summary": "Cancel the request for reservation",
        "description": "Remove the current user from the reservation request queue of the given node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Unable to delete reservation request, user is not in reservation queue.</li><li>This node type does not support reserve management.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "reservemanagement"
        ]
      }
    },
    "/v1/regions": {
      "get": {
        "operationId": "GetRegionsInfo",
        "summary": "Get Current Regions Info",
        "description": "Returns a list of regions.",
        "parameters": [
          {
            "name": "queryable",
            "description": "Filter the results to show regions based on their queryable setting value",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "displayable",
            "description": "Filter the results to show regions based on their displayable setting value",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "search_by_default",
            "description": "Filter the results to show regions based on their search_by_default setting value",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "facet",
            "description": "Filter the results to show regions based on their facet setting value",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "sortable",
            "description": "Filter the results to show regions based on their sortable setting value",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          },
          {
            "name": "user_login",
            "description": "Login name of the user to impersonate (available to users with system administration rights only)",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "user_domain",
            "description": "Domain of the user to impersonate (available to users with system administration rights only)",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_RegionInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>You don't have the system administration rights to use user_login or user_domain</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/v1/slices": {
      "get": {
        "operationId": "GetSlicessInfo",
        "summary": "Get Current Slices Info",
        "description": "Returns a list of slices.",
        "parameters": [
          {
            "name": "user_login",
            "description": "Login name of the user to impersonate (available to users with system administration rights only)",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "user_domain",
            "description": "Domain of the user to impersonate (available to users with system administration rights only)",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_SliceInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>You don't have the system administration rights permission to use user_login or user_domain</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/v2/search": {
      "get": {
        "operationId": "none",
        "summary": "Returns search results",
        "description": "Returns search results. This call is fully supported and functional, however it is recommended to use the POST method as it supports larger search queries and it is more secure.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_SliceInfo"
                }
              }
            }
          }
        },
        "deprecated": true,
        "tags": [
          "search"
        ]
      },
      "post": {
        "operationId": "GetRegionsInfo2",
        "summary": "Returns search results",
        "description": "Returns search results.",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "where": {
                    "description": "LQL where clause (complex query mode) e.g. 'test or OTSubType: 189'.",
                    "type": "string"
                  },
                  "slice": {
                    "description": "ID of slice or list of slices.",
                    "type": "integer"
                  },
                  "sort": {
                    "description": "Sort region and direction ( e.g. 'desc_OTObjectSize'. Ascending is default if not specified ).",
                    "type": "string"
                  },
                  "page": {
                    "description": "Which page to start returning results from.",
                    "type": "integer"
                  },
                  "limit": {
                    "description": "Maximum number of items returned per page.",
                    "type": "integer"
                  },
                  "select": {
                    "description": "List of regions to return, e.g. { 'OTName','OTFileSize', ... }  Adding a value in the above list will add a 'regions' section in the return response. NOTE: The response structure under 'regions' will change depending on the regions used in the query. When not specified the list of regions returned will be those defined in the template or query that was used to run the query. If no template or query is specified, the user's default template is used.",
                    "type": "string"
                  },
                  "options": {
                    "description": "List of options for extra data to return. Available options are: { 'featured', 'facets', 'facets_raw', and 'highlight_summaries' }. If 'facets' or 'facets_raw' are included in the option list, a facet section will be added to the return response.",
                    "type": "string"
                  },
                  "query_id": {
                    "description": "ID of a saved search query.",
                    "type": "integer"
                  },
                  "user_login": {
                    "description": "Login name of the user to impersonate (available to users with system administration rights only).",
                    "type": "string"
                  },
                  "user_domain": {
                    "description": "Domain of the user to impersonate (available to users with system administration rights only).",
                    "type": "string"
                  },
                  "template_id": {
                    "description": "ID of a saved search template.",
                    "type": "integer"
                  },
                  "metadata": {
                    "description": "To be included if metadata/definitions are required (includes display names, etc.), else to be omitted.",
                    "type": "boolean"
                  },
                  "lookfor": {
                    "description": "Search Mode options. Available options are: { 'allwords', 'anywords', 'exactphrase', and 'complexquery' }. If not specified, it defaults to 'complexQuery'.",
                    "type": "string"
                  },
                  "modifier": {
                    "description": "Specify the kind of related terms included in the search. Available options are: { 'synonymsof', 'relatedto', 'soundslike', 'wordbeginswith', and 'wordendswith' }. If not specified or specify any value other than the available options, it will be ignored. ",
                    "type": "string"
                  },
                  "within": {
                    "description": "Narrow the search by specifying whether search within the content or metadata of items, or both. Available options are: { 'content', 'metadata', and 'all' }. If not specified, it defaults to 'all'.",
                    "type": "string"
                  },
                  "boolean": {
                    "description": "Specify the boolean operator between multiple query clauses (such as between a saved search query and a specified where parameter). Valid values are: 'or', 'and', 'not'. Defaults to 'or' if not specified or an invalid entry is used.",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_SearchInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>You don't have the system administration rights permission to use user_login or user_domain</li><li>Error Evaluating Query</li><li>You have either not specified any search criterion at all, or one of your Livelink Query Language statements is incorrect. Edit the query by clicking an option in at least one list and/or correcting the statements that appear in the fields</li><li>Invalid datatype specified for argument {argumentName}</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/v2/search/members/info": {
      "get": {
        "operationId": "GetSearchInfo",
        "summary": "Get information on available search Slices, Personal Search Forms, Recent Search Forms,  Search Bar Full Text settings, and System Search Forms for the user",
        "description": "Returns lists of Slices, Personal Search Forms, Recent Search Forms, Search Bar Full Text settings, and System Search Forms",
        "parameters": [
          {
            "name": "location",
            "description": "ID of container node for from here searches.",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "enterprise_slices",
            "description": "Flag to return only certain slice types.",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_MembersInfo"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/v2/search/template/settings/display": {
      "get": {
        "operationId": "GetDisplayInfo",
        "summary": "Gets display options from the user's default template",
        "description": "Gets display options from the user's default template.",
        "parameters": [
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_TemplateDisplayInfo"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "search"
        ]
      },
      "put": {
        "operationId": "SetDisplayInfo",
        "summary": "Sets display options for the user's default template",
        "description": "Sets the display options for the user's default template",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "page_size": {
                    "description": "The number of results for each search results page. Valid values are: 10, 25, 50, 100",
                    "type": "integer"
                  },
                  "show_keywords": {
                    "description": "A flag indicating if keywords are on.",
                    "type": "boolean"
                  },
                  "show_location_path": {
                    "description": "A flag indicating if the location path should be shown.",
                    "type": "boolean"
                  },
                  "style_id": {
                    "description": "Specifies the layout style of the search results.",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "summary_description": {
                    "description": "Specifies how summaries and desctiptions are shown.",
                    "type": "string",
                    "enum": [
                      "NONE",
                      "SD",
                      "SO",
                      "DO",
                      "SP",
                      "DP"
                    ]
                  },
                  "sort_regions": {
                    "description": "List of sort key strings specifying the regions sort order. Keys are valid regions retrieved from the available list of sortable regions.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "valid region name 1",
                        "valid region name 2",
                        "valid region name 3"
                      ]
                    }
                  },
                  "display_regions": {
                    "description": "List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of displayable regions.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "valid region name 1",
                        "valid region name 2",
                        "valid region name 3"
                      ]
                    }
                  },
                  "facet_regions": {
                    "description": "List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of facet regions.",
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "valid region name 1",
                        "valid region name 2",
                        "valid region name 3"
                      ]
                    }
                  },
                  "suppress_response_codes": {
                    "$ref": "#/components/schemas/suppress_response_codes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2Empty"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/v2/search/template/{id}/settings/display": {
      "get": {
        "operationId": "GetDisplayInfo2",
        "summary": "Gets the display options for the specified template ID",
        "description": "Gets the display options for the specified template ID.",
        "parameters": [
          {
            "name": "id",
            "description": "Template ID",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_TemplateDisplayInfo"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "search"
        ]
      },
      "put": {
        "operationId": "SetDisplayInfo2",
        "summary": "Sets the display options for the specified template ID",
        "description": "Sets the display options for the specified template ID",
        "parameters": [
          {
            "name": "id",
            "description": "ID of the template to update.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "page_size": {
                    "description": "The number of results for each search results page. Valid values are: 10, 25, 50, 100",
                    "type": "integer",
                    "enum": [
                      10,
                      25,
                      50,
                      100
                    ]
                  },
                  "show_keywords": {
                    "description": "A flag indicating if keywords are on.",
                    "type": "boolean"
                  },
                  "show_location_path": {
                    "description": "A flag indicating if the location path should be shown.",
                    "type": "boolean"
                  },
                  "style_id": {
                    "description": "Specifies the layout style of the search results.",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "summary_description": {
                    "description": "Specifies how summaries and desctiptions are shown.",
                    "type": "string",
                    "enum": [
                      "NONE",
                      "SD",
                      "SO",
                      "DO",
                      "SP",
                      "DP"
                    ]
                  },
                  "sort_regions": {
                    "description": "List of sort key strings specifying the regions sort order. Keys are valid regions retrieved from the available list of sortable regions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "display_regions": {
                    "description": "List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of displayable regions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "facet_regions": {
                    "description": "List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of facet regions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "suppress_response_codes": {
                    "$ref": "#/components/schemas/suppress_response_codes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2Empty"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/v2/search/session/{id}/settings/display": {
      "get": {
        "operationId": "GetDisplayInfo3",
        "summary": "Gets display options from the specified search cache ID",
        "description": "Gets display options from the specified search cache ID.",
        "parameters": [
          {
            "name": "id",
            "description": "Search session cache ID",
            "schema": {
              "type": "integer"
            },
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/search_TemplateDisplayInfo"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "search"
        ]
      },
      "put": {
        "operationId": "SetDisplayInfo3",
        "summary": "Sets the display options for the specified cache ID",
        "description": "Sets the display options for the specified cache ID",
        "parameters": [
          {
            "name": "id",
            "description": "ID of the search session cache to update.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "page_size": {
                    "description": "The number of results for each search results page. Valid values are: 10, 25, 50, 100",
                    "type": "integer",
                    "enum": [
                      10,
                      25,
                      50,
                      100
                    ]
                  },
                  "show_keywords": {
                    "description": "A flag indicating if keywords are on.",
                    "type": "boolean"
                  },
                  "show_location_path": {
                    "description": "A flag indicating if the location path should be shown.",
                    "type": "boolean"
                  },
                  "style_id": {
                    "description": "Specifies the layout style of the search results.",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2,
                      3
                    ]
                  },
                  "summary_description": {
                    "description": "Specifies how summaries and desctiptions are shown.",
                    "type": "string",
                    "enum": [
                      "NONE",
                      "SD",
                      "SO",
                      "DO",
                      "SP",
                      "DP"
                    ]
                  },
                  "sort_regions": {
                    "description": "List of sort key strings specifying the regions sort order. Keys are valid regions retrieved from the available list of sortable regions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "display_regions": {
                    "description": "List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of displayable regions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "facet_regions": {
                    "description": "List of region key strings specifying the display regions order. Keys are valid regions retrieved from the available list of facet regions.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "suppress_response_codes": {
                    "$ref": "#/components/schemas/suppress_response_codes"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nodes_V2Empty"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          }
        },
        "tags": [
          "search"
        ]
      }
    },
    "/v2/server/messages": {
      "get": {
        "operationId": "servermessagestab",
        "summary": "Server Messages",
        "description": "Returns the System Messages that are currently active.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/servermessages_results"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "server"
        ]
      }
    },
    "/v2/server/privileges/object": {
      "get": {
        "operationId": "serverobjectprivileges",
        "summary": "Object Privileges",
        "description": "Returns the Object Privileges that are available in the system. User must be a member of the Web Admin privilege in order to view this information.",
        "parameters": [
          {
            "name": "where_name",
            "description": "Filter on the name of the Object Privilege",
            "schema": {
              "type": "string"
            },
            "required": false,
            "in": "query"
          },
          {
            "name": "where_type",
            "description": "Filter on the object's subtype of the Object Privilege. If 'where_name' is also defined, that parameter will be ignored.",
            "schema": {
              "type": "integer"
            },
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server_PrivilegeV2Collection"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "<ul><li>Authentication Required</li><li>Insufficient privileges.</li></ul>"
          }
        },
        "tags": [
          "server"
        ]
      }
    },
    "/v2/server/privileges/usage": {
      "get": {
        "operationId": "serverusageprivileges",
        "summary": "Usage Privileges",
        "description": "Returns the Usage Privileges that are available in the system. User must be a member of the Web Admin privilege in order to view this information.",
        "parameters": [
          {
            "name": "where_name",
            "description": "Filter on the usage name or usage type of the Usage Privilege",
            "schema": {
              "type": "string"
            },
            "required": false,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server_PrivilegeV2Collection"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "<ul><li>Authentication Required</li><li>Insufficient privileges.</li></ul>"
          }
        },
        "tags": [
          "server"
        ]
      }
    },
    "/v2/server/privileges": {
      "put": {
        "operationId": "serverupdageprivileges",
        "summary": "Update Object/Usage Privileges",
        "description": "Makes the supplied privilege restricted or unrestricted. User must be a member of the Web Admin privilege in order to perform this operation.",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "privilege_id": {
                    "description": "The object_type (for an Object Privilege) or usage_id (for a Usage Privilege) value of the privilege",
                    "type": "string"
                  },
                  "action": {
                    "description": "'restrict' if you want to restrict the privilege, 'unrestrict' if you want to unrestrict the privilege",
                    "type": "string",
                    "enum": [
                      "restrict",
                      "unrestrict"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/server_PrivilegeV2UpdateCollection"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "<ul><li>Authentication Required</li><li>Insufficient privileges.</li></ul>"
          },
          "500": {
            "description": "<ul><li>Invalid value specified for argument 'action'</li><li>Could not create Object Factory {usage_name}</li><li>Could not delete the specified Object Factory.</li></ul>"
          }
        },
        "tags": [
          "server"
        ]
      }
    },
    "/v1/serverinfo": {
      "get": {
        "operationId": "serverinfotab",
        "summary": "Server Information",
        "description": "Returns information related to Content Server and its configuration.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serverinfo_results"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required.</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "serverinfo"
        ]
      }
    },
    "/v1/tabs/nodes/categories": {
      "get": {
        "operationId": "categoriestab",
        "summary": "Categories tab",
        "description": "Gets the necessary data to render the contents of the Categories tab.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "query"
          },
          {
            "name": "category_id",
            "description": "The ID of the category that is being added to the node",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one that is specified",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tabs_CategoriesTabInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'id' is required.</li><li>Invalid datatype specified for argument 'id'</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get a node for {id}"
          }
        },
        "tags": [
          "tabs"
        ]
      }
    },
    "/v1/tklattribute/validvalues": {
      "post": {
        "operationId": "ValidValues",
        "summary": "TKL Attribute Valid Values",
        "description": "List of Valid Values for a TKL Attribute based on the dependent attribute values if provided",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "Node ID For which the category is applied. If the version_number parameter is specified, then this parameter is not required.In workflow scenario draftprocess id.",
                    "type": "integer"
                  },
                  "attribute_key": {
                    "description": "attribute key for which list of valid values are required",
                    "type": "string"
                  },
                  "version_number": {
                    "description": "Category version number. If the id parameter is specified then this parameter is not needed. Category ID will be obtained from attribute_key parameter.",
                    "type": "integer"
                  },
                  "attribute_values": {
                    "description": "List of key value pairs of attributes",
                    "type": "string"
                  },
                  "subwork_id": {
                    "description": "Sub Workflow ID. If subwork_id parameter is specified then the values of sub workflow will be fetched.",
                    "type": "integer"
                  },
                  "typeAheadSearch": {
                    "description": "Type ahead search. If typeAheadSearch parameter is specified then the tkl values searched with option like startwith, contains or none.",
                    "type": "string"
                  },
                  "FilterData": {
                    "description": "Filter data is a search data, which is entered by you. If typeAheadSearch parameter is specified then the tkl values searched with typeaheadsearch option like startwith or contains.For none option it won't be considered",
                    "type": "string"
                  },
                  "PageIndex": {
                    "description": "Page index. it is used to retrieve specific page number values by considering global page size configuration value.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tklattribute_ValidValues"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "tklattribute"
        ]
      }
    },
    "/v2/tklattribute/defaultvalues": {
      "post": {
        "operationId": "DefaultValues",
        "summary": "Default Values of child TKL attributes",
        "description": "List of all child attribute values if the length of valid values is 1, depending on the parent attribute value",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "Node ID For which the category is applied. If the version_number parameter is specified, then this parameter is not required.In workflow scenario draftprocess id.",
                    "type": "integer"
                  },
                  "attribute_key": {
                    "description": "attribute key for which list of valid values are required",
                    "type": "string"
                  },
                  "is_search": {
                    "description": "The possible values are TRUE/FALSE, Default Value is FALSE. If it is called from custom view search widget then value is TRUE else FALSE",
                    "type": "boolean"
                  },
                  "version_number": {
                    "description": "Category version number. If the id parameter is specified then this parameter is not needed. Category ID will be obtained from attribute_key parameter.",
                    "type": "integer"
                  },
                  "attribute_values": {
                    "description": "List of key value pairs of attributes",
                    "type": "string"
                  },
                  "subwork_id": {
                    "description": "Sub Workflow ID. If subwork_id parameter is specified then the values of sub workflow will be fetched.",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tklattribute_V2ResponseElement"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "tklattribute"
        ]
      }
    },
    "/v1/validation/nodes": {
      "post": {
        "operationId": "CheckNames",
        "summary": "Check a list of names",
        "description": "For a list of names and a given parent node, check to see if there are name collisions (subject to database collation) between the list of names and the nodes in the parent node.",
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "A JSON object in string format specifying the following: 'parent_id' (integer) and 'names' (List of strings).  Example: {\"parent_id\":2000,\"names\":[\"myDocument.doc\",\"myEmail.msg\",\"folder1\"]}"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_CheckNodesInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Body Parameter 'parent_id' is invalid.</li><li>Body Parameter 'parent_id' is missing.</li><li>Body Parameter 'names' is invalid.</li><li>Body Parameter 'names' is missing.</li><li>Error retrieving nodes</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "validation"
        ]
      }
    },
    "/v1/validation/nodes/categories/enforcement": {
      "post": {
        "operationId": "CheckCategories",
        "summary": "Check for enforced required attributes",
        "description": "Check if the given node IDs enforce required attributes.",
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "A JSON object in string format specifying the following: 'ids' (List of Integers).  Example: {\"ids\":[111,222]}"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_CheckCategoriesInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Body Parameter 'ids' is invalid.</li><li>Body Parameter 'ids' is missing.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "validation"
        ]
      }
    },
    "/v1/validation/nodes/names": {
      "post": {
        "operationId": "CheckNames2",
        "summary": "Check for name collisions",
        "description": "Check for name collisions in the specified node (container).  NOTE: The output of this call will contain ONLY the items with name collisions.  If there are no name collisions, the output will be empty.",
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string",
                "description": "A JSON object in string format specifying the following: 'parent_id' (integer) and 'names' (List of strings).  Example: {\"parent_id\":2000,\"names\":[\"myDocument.doc\",\"folder1\"]}"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/validation_CheckNamesInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Body Parameter 'parent_id' is invalid.</li><li>Body Parameter 'parent_id' is missing.</li><li>Body Parameter 'names' is invalid.</li><li>Body Parameter 'names' is missing.</li><li>Error retrieving nodes</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "validation"
        ]
      }
    },
    "/v1/nodes/{id}/versions": {
      "get": {
        "operationId": "listVersions",
        "summary": "List versions",
        "description": "Gets info on the versions on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_VersionsInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "post": {
        "operationId": "addVersion",
        "summary": "Add version",
        "description": "Adds a new version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The file",
                    "type": "string",
                    "format": "binary"
                  },
                  "description": {
                    "description": "Version description",
                    "type": "string"
                  },
                  "add_major_version": {
                    "description": "Indicates whether the added version is a major version",
                    "type": "boolean"
                  },
                  "external_create_date": {
                    "description": "External create date",
                    "type": "string",
                    "format": "date"
                  },
                  "external_modify_date": {
                    "description": "External modify date",
                    "type": "string",
                    "format": "date"
                  },
                  "external_source": {
                    "description": "External source",
                    "type": "string",
                    "enum": [
                      "file_system",
                      "mobile_device",
                      "scanner",
                      "fax",
                      "ftp",
                      "shared_drive",
                      "removable_disk",
                      "backup_media",
                      "optical_disk",
                      "onedrive",
                      "cloud_storage",
                      "camera",
                      "email_server",
                      "elink",
                      "opentext_core",
                      "edocs",
                      "sap",
                      "document_management",
                      "exchange_mailbox",
                      "notes_mailbox",
                      "outlook_pst",
                      "file_stream",
                      "mailbox_other"
                    ]
                  },
                  "external_identity": {
                    "description": "External identity",
                    "type": "string"
                  },
                  "external_identity_type": {
                    "description": "External identity type",
                    "type": "string",
                    "enum": [
                      "email_address",
                      "domain_userid",
                      "generic_userid",
                      "name",
                      "last_name",
                      "windows_sid",
                      "guid",
                      "phone_number",
                      "ldap_name",
                      "exchange_mailboxid"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_NewVersionInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Could not set feature Versioning, value must be a Boolean</li><li>Missing required parameter 'File'</li><li>External source not found</li><li>Error getting identity type id</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions": {
      "get": {
        "operationId": "listVersions2",
        "summary": "List versions",
        "description": "Gets info on the versions on the node. <br><br>NOTE: if results.data.versions is an empty object (ie. results.data.version = []), the node has no versions.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "order",
            "description": "Order of the results.<br><ul><li>asc = ascending order (from the earliest to latest version)</li><li>desc = descending order (from the latest to the earliest version)</li><ul>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseVersions"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "post": {
        "operationId": "addVersion2",
        "summary": "Add version",
        "description": "Adds a new version on the node. Must use `file` _or_ `upload_key` arguments.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The file",
                    "type": "string",
                    "format": "binary"
                  },
                  "upload_key": {
                    "description": "The key to identify a Large File Upload session",
                    "type": "string"
                  },
                  "description": {
                    "description": "Version description",
                    "type": "string"
                  },
                  "add_major_version": {
                    "description": "Indicates whether the added version is a major version",
                    "type": "boolean"
                  },
                  "external_create_date": {
                    "description": "External create date",
                    "type": "string",
                    "format": "date"
                  },
                  "external_modify_date": {
                    "description": "External modify date",
                    "type": "string",
                    "format": "date"
                  },
                  "external_source": {
                    "description": "External source",
                    "type": "string",
                    "enum": [
                      "file_system",
                      "mobile_device",
                      "scanner",
                      "fax",
                      "ftp",
                      "shared_drive",
                      "removable_disk",
                      "backup_media",
                      "optical_disk",
                      "onedrive",
                      "cloud_storage",
                      "camera",
                      "email_server",
                      "elink",
                      "opentext_core",
                      "edocs",
                      "sap",
                      "document_management",
                      "exchange_mailbox",
                      "notes_mailbox",
                      "outlook_pst",
                      "file_stream",
                      "mailbox_other"
                    ]
                  },
                  "external_identity": {
                    "description": "External identity",
                    "type": "string"
                  },
                  "external_identity_type": {
                    "description": "External identity type",
                    "type": "string",
                    "enum": [
                      "email_address",
                      "domain_userid",
                      "generic_userid",
                      "name",
                      "last_name",
                      "windows_sid",
                      "guid",
                      "phone_number",
                      "ldap_name",
                      "exchange_mailboxid"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseVersionsAdd"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Could not set feature Versioning, value must be a Boolean</li><li>Missing required parameter 'File'</li><li>External source not found</li><li>Error getting identity type id</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "delete": {
        "operationId": "purgeVersion",
        "summary": "Purge versions",
        "description": "Purges the versions on the node. If the node is using advanced versioning, then it will only purge minor versions.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "number_to_keep",
            "description": "Specifies the number of versions to keep ( must be a positive integer ). If the node is using advanced versioning, this parameter specifies the number of minor versions to keep. If this is not specified, the default value of 1 will be used.",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseVersionsPurge"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not process object, type '<Node_Type>' has no role 'versions'</li><li>Missing required parameter 'Number to Keep'</li><li>Invalid value for NumberToKeep</li><li>Error purging versions.</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/nodes/{id}/versions/{version_number}": {
      "get": {
        "operationId": "getVersion",
        "summary": "Get specified version",
        "description": "Gets info on the specified version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_OneVersionInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "put": {
        "operationId": "updateVersion",
        "summary": "Update version",
        "description": "Updates the specified version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The version description",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "delete": {
        "operationId": "deleteVersion",
        "summary": "Delete version",
        "description": "Deletes the specified version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Error getting version for node</li><li>Could not process object, invalid action 'versions-delete'</li><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}": {
      "get": {
        "operationId": "getVersion2",
        "summary": "Get specified version",
        "description": "Gets info on the versions on the node. <br><br>NOTE: if results.data.versions is an empty object (ie. results.data.version = []), the node has no versions.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseVersionsSingle"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "put": {
        "operationId": "updateVersion2",
        "summary": "Update version",
        "description": "Updates the specified version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The version description",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseVersionsSingle"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "delete": {
        "operationId": "deleteVersion2",
        "summary": "Delete version",
        "description": "Deletes the specified version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseVersionsDelete"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Error getting version for node</li><li>Could not process object, invalid action 'versions-delete'</li><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/nodes/{id}/versions/latest": {
      "get": {
        "operationId": "getLatestVersion",
        "summary": "Get latest version",
        "description": "Gets info on the latest version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_LatestVersionInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/nodes/{id}/versions/{version_number}/actions": {
      "get": {
        "operationId": "getVersionActions",
        "summary": "Get actions for a version",
        "description": "Gets the available actions on the specified version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_VersionActionsInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not process object, invalid request</li><li>Invalid datatype specified for argument 'id'</li><li>Invalid datatype specified for argument 'element_id'</li><li>One or more parameters are invalid</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/nodes/{id}/versions/{version_number}/categories": {
      "get": {
        "operationId": "getVersionCategories",
        "summary": "Get categories for specified version",
        "description": "Gets info on the categories on the specified version on the node.  If the specified version does not have categories, the return data structure(s) will be empty.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_CategoryInfo"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}/categories": {
      "get": {
        "operationId": "getVersionCategories2",
        "summary": "Get categories for specified version",
        "description": "Gets info on the categories on the specified version on the node. Use the metadata flag to get the category attribute ordering.<br>If the specified version does not have categories, the 'results' list will be empty. <br>If there are multiple categories on that version, they will be returned under the 'results' list in the order they were applied to that version.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number. Use 0 to get the latest version.",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2CategoriesResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/nodes/{id}/versions/{version_number}/content": {
      "get": {
        "operationId": "DownloadVersion",
        "summary": "Download version",
        "description": "Downloads contents of the specified version on the node.  The name of the downloaded file will be that of the version's file name.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_DownloadVersion"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not locate node: {id}</li><li>The version is not found</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/nodes/{id}/versions/{version_number}/content/{document_name}": {
      "get": {
        "operationId": "DownloadNamedVersion",
        "summary": "Download version in specified name",
        "description": "Downloads contents of the specified version on the node.  The name of the downloaded file will be set to the value in {document_name}.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "document_name",
            "description": "The name of the downloaded version",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_DownloadNamedVersion"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not locate node: {id}</li><li>The version is not found</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}/content": {
      "get": {
        "operationId": "DownloadVersion2",
        "summary": "Download version",
        "description": "Downloads contents of the specified version on the node. The name of the downloaded file will be that of the version's file name.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_DownloadVersion"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not locate node: {id}</li><li>The version is not found</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}/content/{document_name}": {
      "get": {
        "operationId": "DownloadNamedVersion2",
        "summary": "Download version in specified name",
        "description": "Downloads contents of the specified version on the node. The name of the downloaded file will be set to the value in {document_name}.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "document_name",
            "description": "The name of the downloaded version",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_DownloadNamedVersion"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not locate node: {id}</li><li>The version is not found</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/renditions": {
      "get": {
        "operationId": "listRenditions",
        "summary": "List all renditions for all available versions",
        "description": "Lists all renditions for all available versions indexed by <strong>&lt;version_number&gt;</strong>.  <br><br>NOTE: if results.data[ <strong>&lt;version_number&gt;</strong> ] is an empty list, the version has no renditions.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResultRenditionsListAll"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li><li>Could not get Renditions for object.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "post": {
        "operationId": "addRendition",
        "summary": "Add rendition",
        "description": "Adds a new rendition to the current version of a node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "rendition_type": {
                    "description": "Rendition type. NOTE: This must be a non-empty value (ie. not a zero-length String).",
                    "type": "string"
                  },
                  "file_type": {
                    "description": "File type (not to be confused with the mime type, which is automatically read from the file).",
                    "type": "string"
                  },
                  "file": {
                    "description": "The file",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseRenditionsAdd"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Argument \"file\" is required</li><li>Argument \"rendition_type\" is required</li><li>Could not get Renditions for object.</li><li>Could not add Rendition '<b>{rendition_type}</b>' to version '<b>{version_number}</b>'</li><li>Could not set feature Rendition Type, the length of '' is less than the minimum length (1)</li></ul>"
          },
          "401": {
            "description": "<ul><li>Authentication Required</li><li>Insufficient permissions to perform that action</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}/renditions": {
      "get": {
        "operationId": "listRenditionsSpecific",
        "summary": "List/Get rendition(s) for a specified version",
        "description": "List/Get rendition(s) for a specified version depending on specified parameters.<ul><li>\"rendition_type\" not specified:<br>List available renditions for the specified version. If no renditions are available, results.data will be an empty list.</li><li>\"rendition_type\" specified:<br>Get the specified rendition of the version. If no such rendition exists, will return an error. results.data will be an object with the rendition information.</li></ul>",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "rendition_type",
            "description": "Rendition type",
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResultRenditions"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Error getting version for node</li><li>Could not get Renditions for object.</li><li>Invalid datatype specified for argument \"version_number\".</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Unable to get node rendition</li><li>Invalid version number '{version_number}'.</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "put": {
        "operationId": "replaceRendition",
        "summary": "Replace rendition",
        "description": "Replaces the specified rendition of a version on the node",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The file",
                    "type": "string",
                    "format": "binary"
                  },
                  "rendition_type": {
                    "description": "Rendition type. NOTE: This must be a non-empty value (ie. not a zero-length String).",
                    "type": "string"
                  },
                  "file_type": {
                    "description": "File type (not to be confused with the mime type, which is automatically read from the file).",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseRenditionsReplace"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Argument \"file\" is required</li><li>Argument \"rendition_type\" is required</li><li>Invalid datatype specified for argument \"version_number\".</li><li>Could not get Renditions for object.</li><li>Could not replace Rendition '<b>{rendition_type}</b>' in version '<b>{version_number}</b>'</li></ul>"
          },
          "401": {
            "description": "Authentication Required | Insufficient permissions to perform that action"
          },
          "500": {
            "description": "Invalid version number '<b>{version_number}</b>'. | Error getting version for node: <b>{version_number}</b>"
          }
        },
        "tags": [
          "versions"
        ]
      },
      "delete": {
        "operationId": "deleteRendition",
        "summary": "Delete rendition",
        "description": "Deletes the specified rendition of a version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "rendition_type",
            "description": "Rendition type",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseRenditionsDelete"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Error getting version for node</li><li>The REST API URL could not be found in the mappings registry</li><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get Renditions for object.</li><li>Invalid version number '{version_number}'.</li><li>Insufficient permissions to perform that action</li><li>Invalid datatype specified for argument \"version_number\".</li><li>Error deleting the specified rendition.</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}/renditions/content": {
      "get": {
        "operationId": "DownloadRendition",
        "summary": "Download rendition",
        "description": "Download contents of the specified rendition of the specified version of the node. The name of the downloaded file will be that of the node or the node with the rendition type and the extension of the rendition if they are of different types.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "rendition_type",
            "description": "Rendition type",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "query"
          }
        ],
        "responses": {
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Argument 'rendition_type' is required.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not get the version of '{node}'</li><li>Unable to get node rendition</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/nodes/{id}/versions/{version_number}/thumbnails": {
      "get": {
        "operationId": "VersionThumbnails",
        "summary": "Get info on available version thumbnails",
        "description": "Gets info on the version thumbnails on the node (available in Content Server 10.5).",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_VersionThumbnails"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "<ul><li>Could not get node for ID {id}</li><li>Could not get version {version_number} for node {id}.</li><li>Thumbnail is not available.</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/nodes/{id}/versions/{version_number}/thumbnails/{thumbnail_type}": {
      "get": {
        "operationId": "VersionThumbnails2",
        "summary": "Get info on the specified size of a version thumbnail",
        "description": "Gets info on the specified size of version thumbnail on the node (available in Content Server 10.5).",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "thumbnail_type",
            "description": "Thumbnail size, e.g medium",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_VersionThumbnails"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "<ul><li>Could not get node for ID {id}</li><li>Could not get version {version_number} for node {id}.</li><li>Thumbnail is not available.</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/nodes/{id}/versions/{version_number}/thumbnails/{thumbnail_type}/content": {
      "get": {
        "operationId": "DownloadVersionThumbnail",
        "summary": "Download version thumbnail in specified size",
        "description": "Downloads the specified size of version thumbnail on the node (available in Content Server 10.5).",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "thumbnail_type",
            "description": "Thumbnail size, e.g medium",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_DownloadVersionThumbnail"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "404": {
            "description": "<ul><li>Could not get node for ID {id}</li><li>Could not get version {version_number} for node {id}.</li><li>Thumbnail is not available.</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}/promote": {
      "post": {
        "operationId": "promoteVersion",
        "summary": "Promote version",
        "description": "Promotes a version to the next Major version on the node.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "The version_number of the version to promote",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "The description of the newly promoted version",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseVersionsSingle"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>You cannot promote a version for {name} which is using standard versioning</li><li>Could not process object, type '{node_type}' has no role 'versions'</li><li>You do not have permission to promote a version for '{name}'.</li><li>Error getting version for node</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}/lock": {
      "post": {
        "operationId": "lockVersion",
        "summary": "Lock version",
        "description": "Locks the specified version on the node, preventing it from being modified or deleted.<br><br>NOTE:This is not the same as <b>reserving</b> a node, which prevents the document and its versions from being modified. Locking a version only prevents that version from being modified - the rest of the node can still be modified by other users (ie. a user can lock a version, while another user can change the node's name or description at the same time).",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "The version_number of the version to lock",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseVersionsSingle"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Could not lock version '{version_number}' for node '{id}'.</li><li>Error locking the specified version.</li><li>Error getting version for node</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}/unlock": {
      "post": {
        "operationId": "unlockVersion",
        "summary": "Unlock version",
        "description": "Unlocks the specified version on the node.<br><br>NOTE: This is not the same as <b>unreserving</b> a node. Unlocking a version is specific to that version alone.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "The version_number of the version to unlock",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/versions_V2ResponseVersionsSingle"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Sorry, the item you requested could not be accessed. Either it does not exist or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance</li><li>Could not unlock version '{version_number}' for node '{id}'.</li><li>Error unlocking the specified version.</li><li>Error getting version for node</li></ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v2/nodes/{id}/versions/{version_number}/view/html": {
      "get": {
        "operationId": "viewHtmlVersions",
        "summary": "View the content of a version as HTML.",
        "description": "View the HTML rendering of a version.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "version_number",
            "description": "Version number",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "text/html": {
                "example": "<html> <head> <title>{node_name}</title> </head> <body> {node_content} </body> </html>"
              }
            }
          },
          "403": {
            "description": "<ul> <li>You do not have permission to view this document.</li> </ul>"
          },
          "404": {
            "description": "<ul> <li>Node must be a document node.</li> <li>Could not find the original item.</li> <li>Error retrieving the specified version.</li> </ul>"
          },
          "500": {
            "description": "<ul> <li>The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance.</li> <li>Node must be a document node.</li> </ul>"
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/v1/volumes": {
      "get": {
        "operationId": "getVolumes",
        "summary": "Get available volumes",
        "description": "Gets info on available system volumes.",
        "parameters": [
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volumes_InfoResults"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get volume objects"
          }
        },
        "tags": [
          "volumes"
        ]
      }
    },
    "/v2/volumes": {
      "get": {
        "operationId": "getVolumes2",
        "summary": "Get available volumes",
        "description": "Gets info on available system volumes.",
        "parameters": [
          {
            "name": "actions",
            "description": "Retrieve actions for the volume. This is similar to 'commands' for v1 (E.g. actions=delete&actions=open). Note: For best performance minimize the number of actions requested.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volumes_BrowseVolumes2"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Could not get volume objects"
          }
        },
        "tags": [
          "volumes"
        ]
      }
    },
    "/v1/volumes/{type}": {
      "get": {
        "operationId": "getVolume",
        "summary": "Get volume info",
        "description": "Gets info about the specified volume.",
        "parameters": [
          {
            "name": "type",
            "description": "Subtype of the volume",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volumes_InfoResult"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'volume_subtype'.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Subtype {type} is not a root subtype</li><li>Subtype {type} not registered</li></ul>"
          }
        },
        "tags": [
          "volumes"
        ]
      }
    },
    "/v2/volumes/{type}": {
      "get": {
        "operationId": "getVolume2",
        "summary": "Get volume info",
        "description": "Gets info about the specified volume.",
        "parameters": [
          {
            "name": "type",
            "description": "Subtype of the volume",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volumes_V2ResponseElement"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'volume_subtype'.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Subtype {type} is not a root subtype</li><li>Subtype {type} not registered</li></ul>"
          }
        },
        "tags": [
          "volumes"
        ]
      }
    },
    "/v1/volumes/{type}/nodes": {
      "get": {
        "operationId": "browseVolume",
        "summary": "Get subnodes of the specified volume",
        "description": "Browses the volume, returning info on its child nodes.",
        "parameters": [
          {
            "name": "type",
            "description": "Subtype of the volume",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "where_type",
            "description": "Filter on node type",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filter on node name",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_facet",
            "description": "Filter on facet values.  There will be one instance of this parameter for each facet selected.  The values are combined using | character.  E.g. where_facet=2095:144|0|-1 (note that -1 is a special value that denotes containers).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column.  Format can be sort=name, or sort=asc_name, or sort=desc_name.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Exclude all fields except the one(s) that are specified (e.g. fields=data&fields=definitions).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Expand all fields that belong to the specified persona (e.g. expand=node&expand=member).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand_fields",
            "description": "Expand specified field. Note: field must belong to a persona (e.g. expand_fields=id&expand_fields=owner_user_id).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volumes_VolumeBrowse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'volume_subtype'.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Subtype {type} is not a root subtype</li><li>Subtype {type} not registered</li></ul>"
          }
        },
        "tags": [
          "volumes"
        ]
      }
    },
    "/v2/volumes/{type}/nodes": {
      "get": {
        "operationId": "browseVolume2",
        "summary": "Get subnodes of the specified volume",
        "description": "Browses the volume, returning info on its child nodes.",
        "parameters": [
          {
            "name": "type",
            "description": "Subtype of the volume",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "where_type",
            "description": "Filter on node type",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filter on node name",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_facet",
            "description": "Filter on facet values.  There will be one instance of this parameter for each facet selected.  The values are combined using | character.  E.g. where_facet=2095:144|0|-1 (note that -1 is a special value that denotes containers).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "actions",
            "description": "Retrieve actions for the node. This is similar to 'commands' for v1 (E.g. actions=delete&actions=open). Note: For best performance minimize the number of actions requested.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column.  Format can be sort=name or sort=asc_name or sort=desc_name. If the prefix of asc or desc is not used then asc will be assumed.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "Filter the response by returning only the specified individual fields or sections (e.g. fields=properties{id, parent_id}&fields=versions). If the data structure is an array, a specific item can be retrieved instead (e.g. versions{mime_type}.element(0)).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "expand",
            "description": "Resolve individual fields (e.g. expand=properties{id,parent_id}&expand=versions{file_name}) or entire sections (eg. expand=properties) that contain known identifiers (nodes, members, etc.).",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volumes_BrowseResult2"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>Invalid datatype specified for argument 'volume_subtype'.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Subtype {type} is not a root subtype</li><li>Subtype {type} not registered</li></ul>"
          }
        },
        "tags": [
          "volumes"
        ]
      }
    },
    "/v2/volumes/recyclebin/nodes": {
      "get": {
        "operationId": "browseRecycleBin",
        "summary": "Get subnodes of the Recycle Bin",
        "description": "Browses the Recycle Bin, returning info on its contents.",
        "parameters": [
          {
            "name": "sort",
            "description": "Order by named column. Format can be sort=name or sort=asc_name (name ascending) or sort=desc_name (name descending). If the prefix of asc or desc is not used, then desc (descending) will be assumed.<ul><li>type : Sort by subtype<br>(NOTE: Containers such as Folders and Compound Documents (but not limited to those) will always be sorted to the top in their own grouping before the other non-container items in the Recycle Bin are sorted)</li><li>name : Sort by name</li><li>purged_date : Sort by purged date</li><li>deleted_date : Sort by deleted date</li></ul>The default is 'deleted_date' in descending order (ie. the latest deleted item will be at the top)<br><br>Example to sort by name in descending order<br><code>?sort=desc_name</code><br><br>Example to sort by purged date in the default descending order<br><code>?sort=purged_date</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "mode",
            "description": "Filter on which user had deleted the nodes, and when.<ul><li>user_deleted : Nodes that the current user has deleted</li><li>user_deleted_today : Nodes that the current user has deleted today</li><li>anyone_deleted : Nodes that any user has deleted</li><li>anyone_deleted_today : Nodes that any user has deleted today</li></ul>The default is 'user_deleted_today'.<br><br>Example to get all nodes that the current user has deleted (from any period in time)<br><code>?mode=user_deleted</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_name",
            "description": "Filter on the name (case insensitive).<br><br>Example to get all nodes where the names start with 'testfolder' (this will return nodes which are named like 'testfolder1', 'TESTFolder 1', etc.)<br><code>?where_name=testfolder</code>",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "fields",
            "description": "The 'fields' parameter can be used to filter the results even further, if necessary. Only ?fields=properties is supported for Recycle Bin items.<br><br>Show the 'properties' field (which contains node information such as id, type, name, user_deleted_id, purged_date, deleted_date, parent_id)<br><code>?fields=properties</code><br><br>Show the 'properties' fields but only the parent_id and id<br><code>?fields=properties{parent_id,id}",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "metadata",
            "description": "Returns metadata (data type, field length, min/max values, etc.) about data.  This is an empty parameter, thus no value is required (e.g. ?metadata).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volumes_BrowseRecyleBinResult2"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "<ul><li>Authentication Required</li></ul>"
          },
          "500": {
            "description": "<ul><li>Could not set feature Sort Column, invalid value '(sort value)'</li><li>Could not set feature Mode, invalid value '(mode value)'</li></ul>"
          }
        },
        "tags": [
          "volumes"
        ]
      }
    },
    "/v2/volumes/recyclebin/nodes/purge": {
      "post": {
        "operationId": "purgeRecycleBin",
        "summary": "Purge nodes from the Recycle Bin",
        "description": "Purge nodes from the Recycle Bin<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following example assumes that there are two nodes in the Recycle Bin with the IDs 3589 and 3590, respectively, that the user wants to purge. The ID 7321 does not belong to any node in the Recycle Bin.<br><br>Purge the nodes with the given IDs:<br><br><code>{\"ids\":[3589,3590,7321]}</code><br><br>The response will have a results structure (see the schema diagram below) that have two sub-structures 'success' and 'failure' which will list the IDs that were successfully purged, and the IDs that had failed to be purged, as well as error messages.<br><br>results.success.ids : A List of the IDs which were successfully purged (ex. [ 3589, 3590 ].<br><br>results.failures.ids : A List of the IDs which were not successfully purged. (ex. [ 7321 ])<br><br>results.failures.errors.7321.message : The error message (ex. Could not get a node for 7321)<br><br>NOTE: If the response code is 200, all of the ids were successfully purged and there is no need to check the results. If the response code is 400 and there are results, you will need to check the above sub-structures to see which nodes were purged, and which ones were not.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volumes_PurgeRestoreRecycleBinResult"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>The parameter 'ids' is not specified.</li></ul>"
          },
          "401": {
            "description": "<ul><li>Authentication Required</li></ul>"
          }
        },
        "tags": [
          "volumes"
        ]
      }
    },
    "/v2/volumes/recyclebin/nodes/restore": {
      "post": {
        "operationId": "restoreRecycleBin",
        "summary": "Restore nodes that are in the Recycle Bin back to their original location",
        "description": "Restore nodes that are in the Recycle Bin back to their original location<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. See the <a href=#implementation-notes><b>[IMPLEMENTATION NOTES]</b></a> for more details.</b><br><br>The following example assumes that there are two nodes in the Recycle Bin with the IDs 3589 and 3590, respectively, that the user wants to restore. The ID 7321 does not belong to any node in the Recycle Bin.<br><br>Restore the nodes with the given IDs:<br><br><code>{\"ids\":[3589,3590,7321]}</code><br><br>The response will have a results structure (see the schema diagram below) that have two sub-structures 'success' and 'failure' which will list the IDs that were successfully restored, and the IDs that had failed to be restored, as well as error messages.<br><br>results.success.ids : A List of the IDs which were successfully restored (ex. [ 3589, 3590 ].<br><br>results.failures.ids : A List of the IDs which were not successfully restored. (ex. [ 7321 ])<br><br>results.failures.errors.7321.message : The error message (ex. Could not get a node for 7321)<br><br>NOTE: If the response code is 200, all of the ids were successfully restored and there is no need to check the results. If the response code is 400 and there are results, you will need to check the above sub-structures to see which nodes were restored, and which ones were not.",
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volumes_PurgeRestoreRecycleBinResult"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li><li>The parameter 'ids' is not specified.</li></ul>"
          },
          "401": {
            "description": "<ul><li>Authentication Required</li></ul>"
          }
        },
        "tags": [
          "volumes"
        ]
      }
    },
    "/v1/nodes/{id}/destination": {
      "get": {
        "operationId": "getWebReportDestination",
        "summary": "Get destination data for a WebReport",
        "description": "Returns the destination data from a WebReport node. (*) against a field name denotes that the field supports tag replacement.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID of a WebReport node",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webreports_DestinationResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not get node for {id}</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>No output returned from WebReport execution.</li><li>Invalid export destination</li><li>Specified node is not a WebReport node.</li></ul>"
          }
        },
        "tags": [
          "webreports"
        ]
      }
    },
    "/v1/nodes/{id}/output": {
      "get": {
        "operationId": "getWebReportOutput",
        "summary": "Get output for a WebReport",
        "description": "Returns the output from the execution of a WebReport node. This API only supports the 'browser' and 'desktop' WebReport destination types. Any content-type is supported for the response. The content-type of the response is user-defined according to the 'Export Mime Type' specified for the WebReport node destination. All dynamic parameters and those defined by the output of the 'api/v1/nodes/{id}/parameters' or 'api/v1/webreports/{nickname}/parameters' APIs are supported when passed in as part of the query string.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID of a WebReport node",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "format",
            "description": "Specifies the emitter used to format the WebReport output. If this parameter isn't defined the default will be 'json'. If 'webreport' is used then no additional processing will be performed on the output, if 'json' is used then json processing including escaping will be performed. If your WebReport returns a content-type which isn't json or if it returns json which has already been escaped, 'webreport' should be used.",
            "schema": {
              "type": "string",
              "enum": [
                "webreport",
                "json"
              ]
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Could not get node for {id}</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>No output returned from WebReport execution.</li><li>Invalid export destination</li><li>Specified node is not a WebReport node.</li></ul>"
          }
        },
        "tags": [
          "webreports"
        ]
      },
      "post": {
        "operationId": "postWebReportOutput",
        "summary": "Run a WebReport that has a destination type other than 'browser' or 'desktop'",
        "description": "Runs a WebReport. This API supports all destination types other than 'browser' and 'desktop' WebReport destination types, for which the GET method should be used instead.",
        "parameters": [
          {
            "name": "id",
            "description": "Node ID of a WebReport node",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webreports_ParametersListing"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not get node for {id}</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Error getting parameters for WebReport"
          }
        },
        "tags": [
          "webreports"
        ]
      }
    },
    "/v1/webreports/{nickname}": {
      "get": {
        "operationId": "getWebReportOutput2",
        "summary": "Get output for a WebReport",
        "description": "Returns the output from the execution of a WebReport node. This API only supports the 'browser' and 'desktop' WebReport destination types. Any content-type is supported for the response. The content-type of the response is user-defined according to the 'Export Mime Type' specified for the WebReport node destination. All dynamic parameters and those defined by the output of the 'api/v1/nodes/{id}/parameters' or 'api/v1/webreports/{nickname}/parameters' APIs are supported when passed in as part of the query string.",
        "parameters": [
          {
            "name": "nickname",
            "description": "Nickname of a WebReport node",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "format",
            "description": "Specifies the emitter used to format the WebReport output. If this parameter isn't defined the default will be 'json'. If 'webreport' is used then no additional processing will be performed on the output, if 'json' is used then json processing including escaping will be performed. If your WebReport returns a content-type which isn't json or if it returns json which has already been escaped, 'webreport' should be used.",
            "schema": {
              "type": "string",
              "enum": [
                "webreport",
                "json"
              ]
            },
            "in": "query"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>Could not get node for {nickname}</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>No output returned from WebReport execution.</li><li>Invalid export destination</li><li>Specified node is not a WebReport node.</li></ul>"
          }
        },
        "tags": [
          "webreports"
        ]
      },
      "post": {
        "operationId": "postWebReportOutput2",
        "summary": "Run a WebReport that has a destination type other than 'browser' or 'desktop'",
        "description": "Runs a WebReport. This API supports all destination types other than 'browser' and 'desktop' WebReport destination types, for which the GET method should be used instead.",
        "parameters": [
          {
            "name": "nickname",
            "description": "Nickname of a WebReport node",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webreports_DestinationResponse"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not get node for {nickname}</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>No output returned from WebReport execution.</li><li>Invalid export destination</li><li>Specified node is not a WebReport node.</li></ul>"
          }
        },
        "tags": [
          "webreports"
        ]
      }
    },
    "/v1/webreports/{nickname}/parameters": {
      "get": {
        "operationId": "getParameters2",
        "summary": "Get parameters info",
        "description": "Returns the definition of all parameters defined for a WebReport node.",
        "parameters": [
          {
            "name": "nickname",
            "description": "Nickname of a WebReport node",
            "schema": {
              "type": "string"
            },
            "required": true,
            "in": "path"
          },
          {
            "$ref": "#/components/parameters/suppress_response_codes"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webreports_ParametersListing"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Could not get node for {nickname}</li><li>The REST API URL could not be found in the mappings registry</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Error getting parameters for WebReport"
          }
        },
        "tags": [
          "webreports"
        ]
      }
    },
    "/v2/import/settings/admin": {
      "post": {
        "operationId": "XmlIngestion",
        "summary": "Import administration settings",
        "description": "Imports administration settings from an XML file.",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The XML file containing the admin settings to be imported.",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/xmlimport_response_200"
                }
              }
            }
          },
          "400": {
            "description": "Import failed.<ul><li>Not an XML file.</li><li>Malformed XML.</li><li>Failed to parse request.</li><li>Error extracting properties from the uploaded file.</li></ul>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/xmlimport_response_400"
                }
              }
            }
          },
          "500": {
            "description": "Import failed: System error.<ul><li>Invalid values in the XML.</li><li>Error saving values.</li></ul>",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/xmlimport_response_500"
                }
              }
            }
          }
        },
        "tags": [
          "xmlimport"
        ]
      }
    },
    "/v2/nodes/{id}/followups": {
      "get": {
        "operationId": "getFollowUps",
        "summary": "Get all followups for a given node.",
        "description": "Get all followups for a given node.",
        "parameters": [
          {
            "name": "id",
            "description": "Data ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "actions",
            "description": "Actions",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2FollowUps"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry or Invalid datatype specified for argument 'id'."
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "resubmission"
        ]
      }
    },
    "/v2/nodes/{id}/followups/{followup_id}": {
      "get": {
        "operationId": "getFollowUpInfo",
        "summary": "Get followup details for node and related followup.",
        "description": "This will give followups for a given node and followup id.",
        "parameters": [
          {
            "name": "id",
            "description": "Data ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "followup_id",
            "description": "FollowupID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "actions",
            "description": "Actions",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "allowEmptyValue": true,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2FollowUpInfo"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry or Invalid datatype specified for argument 'id'."
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "resubmission"
        ]
      },
      "put": {
        "operationId": "UpdateReminderStatus",
        "summary": "Changes the status of Reminder.",
        "description": "This will change status of reminder.",
        "parameters": [
          {
            "name": "id",
            "description": "Data ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "followup_id",
            "description": "FollowupID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "properties"
                ],
                "properties": {
                  "status": {
                    "description": "status to be updated",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PostReminder"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry or Could not set feature Status, value must be a integer"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance or Errors getting assignee information."
          }
        },
        "tags": [
          "resubmission"
        ]
      }
    },
    "/v1/forms/nodes/followup/getClientTypes": {
      "get": {
        "operationId": "getFollowupClientTypes",
        "summary": "Get info on followup client types.",
        "description": "This will give followup client types information.",
        "parameters": [
          {
            "name": "client_id",
            "description": "Reminder Client ID",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "id",
            "description": "Reminder Client Type ID",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1FollowupClientTypes"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry, Invalid datatype specified for argument 'id', or Invalid datatype specified for argument 'client_id'."
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "resubmission"
        ]
      }
    },
    "/v1/forms/nodes/{nodeid}/reminder/view": {
      "get": {
        "operationId": "getReminderInfo",
        "summary": "Alpaca form for viewing a reminder details on a node.",
        "description": "Gets the Alpaca form for viewing a reminder details on a node",
        "parameters": [
          {
            "name": "nodeid",
            "description": "Data ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "id",
            "description": "Followup ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1ReminderView"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "resubmission"
        ]
      }
    },
    "/v1/forms/nodes/reminder/create": {
      "get": {
        "operationId": "getReminderCreateForm",
        "summary": "Alpaca form to create a reminder for a node.",
        "description": "Gets the Alpaca form to create a reminder for a node.",
        "parameters": [
          {
            "name": "client_id",
            "description": "Client ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "query"
          },
          {
            "name": "id",
            "description": "Reminder Client Type ID",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V1ReminderCreateForm"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry, Invalid datatype specified for argument 'client_id', or Invalid datatype specified for argument 'id'."
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "resubmission"
        ]
      }
    },
    "/v2/resubmission/{id}/addreminder": {
      "post": {
        "operationId": "AddReminder",
        "summary": "Create a Reminder.",
        "description": "This will create a reminder.",
        "parameters": [
          {
            "name": "id",
            "description": "Data ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "description": "contains all the required properties in JSON format to create a new reminder",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PostReminder"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance or Errors getting assignee information."
          }
        },
        "tags": [
          "resubmission"
        ]
      }
    },
    "/v2/nodes/{id}/updatereminder": {
      "put": {
        "operationId": "UpdateReminder",
        "summary": "Update reminder details.",
        "description": "This will update reminder information.",
        "parameters": [
          {
            "name": "id",
            "description": "Data ID",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "data"
                ],
                "properties": {
                  "data": {
                    "description": "contains all the required properties in JSON format to update a reminder",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/V2PostReminder"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Sorry, the item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "resubmission"
        ]
      }
    },
    "/v2/restructure": {
      "put": {
        "operationId": "Restructure",
        "summary": "Restructures a list of items from source to destination",
        "description": "Moves nodes to a new destination effectively by making use of DA framework <br>This includes permissions updates and category processing as per configuration<br><br><b>NOTE: The 'body' parameter must be used. This 'body' parameter contains a JSON string, and must be specified in the Body as a key-value pair where the key is 'body' and the value is the JSON string. </b><br><br>Restructure list of nodes from source to destination:<br><br><code>body : { \"userstobenotified\":\"List of userIds to be notified for restructure\", \"AttrSourceType\":\"Category Inheritance\",\"parent_id\":\"destination node for restructure\",\"startdate\":\"Date and time for this restructure operation\",\"subject\":\"Notification subject for this restructure operation\",\"message\":\"Notification message for this restructure operation\",\"nodes\":\"List of source data ids for the restructure operation\" }</code><br>",
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "object",
                "properties": {
                  "userstobenotified": {
                    "description": "List of users to be notified for this restructure example: [1000,1001]",
                    "type": "integer"
                  },
                  "nodes": {
                    "description": "The list of source nodes to be restructured along with categories <code> [{\"dataid\":15795,\"roles\":{\"categories\":{\"8650\":{\"8650_2\":\"resttest12345678\",\"8650_inheritance\":true,\"8650_1\":{\"upgradeable\":false,\"version_number\":1}},\"8651\":{\"8651_2\":null,\"8651_inheritance\":true,\"8651_1\":{\"upgradeable\":false,\"version_number\":1}}}}}]</code>",
                    "type": "string"
                  },
                  "message": {
                    "description": "Notification message for this restructure",
                    "type": "string"
                  },
                  "subject": {
                    "description": "Notification subject for this restructure",
                    "type": "string"
                  },
                  "startdate": {
                    "description": "schedule time for restructure if specified else immediate",
                    "type": "string"
                  },
                  "AttrSourceType": {
                    "description": "Category Inheritance where 0 is original , 1 is destination, 2 is merged",
                    "type": "integer",
                    "enum": [
                      0,
                      1,
                      2
                    ]
                  },
                  "parent_id": {
                    "description": "The destination node for restructure",
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok"
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li> <li>Not a valid object to perform operation on</li><li>Invalid destination location provided</li><li>User does not have restructure privilege </li><li>User does not have permission to restructure to destination </li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          }
        },
        "tags": [
          "restructure"
        ]
      }
    },
    "/v2/signaturerequests": {
      "post": {
        "operationId": "Create",
        "summary": "Create signature request",
        "description": "Create the signature request.<br><br> To create the signature request we need to pass doc_id , signer information and provider_id .<br><br>Examples <ul><li>we need to pass signer information in below format.</li><br><code>signer:{\"full_name\":\"name\",\"email_id\":\"test@opentext.com\"} </code>  <br>  <br> <li> To create the signature request use below format</li> <br> <code>{\"doc_id\":1234,\"signer\":{\"full_name\":\"name\",\"email_id\":\"test@opentext.com\"},\"provider_id\":\"docusign\"}</code>",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "doc_id": {
                    "description": "Document Id (non-empty) .List of documents to be sent for signing ",
                    "type": "integer"
                  },
                  "signer": {
                    "description": "Signer information. (non-empty). Signer information should contain full_name and email_id",
                    "type": "string"
                  },
                  "provider_id": {
                    "description": "Non empty text that can be either docusign or coresignature",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signaturerequests_create"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li> <li>Provider ID is not registered</li><li>Invalid value specified for argument 'signer'</li><li>Please provide at least one document to sign.</li><li>Invalid datatype specified for argument 'doc_id_list'.</li><li>Invalid datatype specified for argument 'signer'.</li><li>You do not have permissions to perform this action.</li><li>Adhoc Signing is not enabled for DocuSign/Core Signature.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>An error occurred while validating/refreshing the access token</li><li>An error occurred when sending the document to DocuSign/CoreSignature</li><li>An error occurred when storing signature request information</li></ul>"
          }
        },
        "tags": [
          "signaturerequests"
        ]
      },
      "get": {
        "operationId": "Get",
        "summary": "Get signature request",
        "description": "Get signature request details",
        "parameters": [
          {
            "name": "where_provider_name",
            "description": "Specify docusign or coresignature",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "where_status",
            "description": "Filters the results based on status. Valid values are 'created', 'sent', signed', 'voided' ",
            "schema": {
              "type": "string"
            },
            "in": "query"
          },
          {
            "name": "limit",
            "description": "Page size",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "page",
            "description": "Page number",
            "schema": {
              "type": "integer"
            },
            "in": "query"
          },
          {
            "name": "sort",
            "description": "Order by named column (Using prefixes such as sort=asc_created or sort=desc_created ). Format can be sort = provider_name, sort = status. If the prefix of asc or desc is not used then asc will be assumed.",
            "schema": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signaturerequests_get"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li> <li>Invalid value specified for argument 'provider_name'</li><li>Invalid value specified for argument 'status'</li><li>Could not set feature Page, the value 0 is less than the minimum value (1)</li><li>Could not set feature limit, the value 0 is less than the minimum value (1)</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Could not retrieve the signature request details</li></ul>"
          }
        },
        "tags": [
          "signaturerequests"
        ]
      }
    },
    "/v2/signaturerequests/{request_id}": {
      "get": {
        "operationId": "GetById",
        "summary": "Get signature request details by request id",
        "description": "Get signature request details by request id",
        "parameters": [
          {
            "name": "request_id",
            "description": "Signature request id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          },
          {
            "name": "include_activities",
            "description": "Activities",
            "schema": {
              "type": "boolean"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signaturerequests_getbyId"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li> <li>Invalid Request ID</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>An error occurred when fetching the documents associated with signature request</li></ul>"
          }
        },
        "tags": [
          "signaturerequests"
        ]
      }
    },
    "/v2/signaturerequests/{request_id}/reminder/": {
      "post": {
        "operationId": "SendReminders",
        "summary": "Send reminder notification to signers by request id",
        "description": "Send reminder notification to signers by request id",
        "parameters": [
          {
            "name": "request_id",
            "description": "Signature request id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signaturerequests_sendnotification"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li> <li>Invalid Request ID</li> <li>The signature request ID is invalid or you don't have access to it or the request is no longer in progress.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>An error occurred while validating/refreshing the access token</li> <li>An error occurred while sending reminder notification to signer</li></ul>"
          }
        },
        "tags": [
          "signaturerequests"
        ]
      }
    },
    "/v2/signaturerequests/{request_id}/cancel": {
      "post": {
        "operationId": "Cancel",
        "summary": "Cancel the signature request by request id",
        "description": "Cancel the signature request by request id",
        "parameters": [
          {
            "name": "request_id",
            "description": "Signature request id",
            "schema": {
              "type": "integer"
            },
            "required": true,
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/signaturerequests_cancel"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>The REST API URL could not be found in the mappings registry</li> <li>Signature request cannot be cancelled, it is already stopped or completed.</li><li>The signature request ID is invalid or you don't have access to the request.</li></ul>"
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "<ul><li>Provider ID is not registered</li><li>Error occurred while stopping the signature request</li></ul>"
          }
        },
        "tags": [
          "signaturerequests"
        ]
      }
    },
    "/v2/syndication/{id}": {
      "get": {
        "operationId": "syndication",
        "summary": "Get syndication information of a given node",
        "description": "Get syndication information of a given node.",
        "parameters": [
          {
            "name": "id",
            "description": "The ID of the node",
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/syndication_response_200"
                }
              }
            }
          },
          "400": {
            "description": "The REST API URL could not be found in the mappings registry, Invalid datatype specified for argument 'id'."
          },
          "401": {
            "description": "Authentication Required"
          },
          "500": {
            "description": "Internal error. The item you requested could not be accessed. Either it does not exist, or you do not have permission to access it. If you were sent a link to this item, please contact the sender for assistance."
          }
        },
        "tags": [
          "syndication"
        ]
      }
    }
  }
}